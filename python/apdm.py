# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_apdm', [dirname(__file__)])
        except ImportError:
            import _apdm
            return _apdm
        if fp is not None:
            try:
                _mod = imp.load_module('_apdm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _apdm = swig_import_helper()
    del swig_import_helper
else:
    import _apdm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ucharArray(_object):
    """Proxy of C ucharArray struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ucharArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ucharArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, nelements) -> ucharArray"""
        this = _apdm.new_ucharArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_ucharArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, index) -> unsigned char"""
        return _apdm.ucharArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, index, value)"""
        return _apdm.ucharArray___setitem__(self, *args)

    def cast(self):
        """cast(self) -> unsigned char *"""
        return _apdm.ucharArray_cast(self)

    def frompointer(*args):
        """frompointer(t) -> ucharArray"""
        return _apdm.ucharArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
ucharArray_swigregister = _apdm.ucharArray_swigregister
ucharArray_swigregister(ucharArray)

def ucharArray_frompointer(*args):
  """ucharArray_frompointer(t) -> ucharArray"""
  return _apdm.ucharArray_frompointer(*args)

class charArray(_object):
    """Proxy of C charArray struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, nelements) -> charArray"""
        this = _apdm.new_charArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_charArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, index) -> char"""
        return _apdm.charArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, index, value)"""
        return _apdm.charArray___setitem__(self, *args)

    def cast(self):
        """cast(self) -> char *"""
        return _apdm.charArray_cast(self)

    def frompointer(*args):
        """frompointer(t) -> charArray"""
        return _apdm.charArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
charArray_swigregister = _apdm.charArray_swigregister
charArray_swigregister(charArray)

def charArray_frompointer(*args):
  """charArray_frompointer(t) -> charArray"""
  return _apdm.charArray_frompointer(*args)

class uintArray(_object):
    """Proxy of C uintArray struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uintArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uintArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, nelements) -> uintArray"""
        this = _apdm.new_uintArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_uintArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, index) -> unsigned int"""
        return _apdm.uintArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, index, value)"""
        return _apdm.uintArray___setitem__(self, *args)

    def cast(self):
        """cast(self) -> unsigned int *"""
        return _apdm.uintArray_cast(self)

    def frompointer(*args):
        """frompointer(t) -> uintArray"""
        return _apdm.uintArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
uintArray_swigregister = _apdm.uintArray_swigregister
uintArray_swigregister(uintArray)

def uintArray_frompointer(*args):
  """uintArray_frompointer(t) -> uintArray"""
  return _apdm.uintArray_frompointer(*args)

class intArray(_object):
    """Proxy of C intArray struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, nelements) -> intArray"""
        this = _apdm.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, index) -> int"""
        return _apdm.intArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, index, value)"""
        return _apdm.intArray___setitem__(self, *args)

    def cast(self):
        """cast(self) -> int *"""
        return _apdm.intArray_cast(self)

    def frompointer(*args):
        """frompointer(t) -> intArray"""
        return _apdm.intArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
intArray_swigregister = _apdm.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  """intArray_frompointer(t) -> intArray"""
  return _apdm.intArray_frompointer(*args)

class shortArray(_object):
    """Proxy of C shortArray struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shortArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shortArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, nelements) -> shortArray"""
        this = _apdm.new_shortArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_shortArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, index) -> short"""
        return _apdm.shortArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, index, value)"""
        return _apdm.shortArray___setitem__(self, *args)

    def cast(self):
        """cast(self) -> short *"""
        return _apdm.shortArray_cast(self)

    def frompointer(*args):
        """frompointer(t) -> shortArray"""
        return _apdm.shortArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
shortArray_swigregister = _apdm.shortArray_swigregister
shortArray_swigregister(shortArray)

def shortArray_frompointer(*args):
  """shortArray_frompointer(t) -> shortArray"""
  return _apdm.shortArray_frompointer(*args)

class ushortArray(_object):
    """Proxy of C ushortArray struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ushortArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ushortArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, nelements) -> ushortArray"""
        this = _apdm.new_ushortArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_ushortArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, index) -> unsigned short"""
        return _apdm.ushortArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, index, value)"""
        return _apdm.ushortArray___setitem__(self, *args)

    def cast(self):
        """cast(self) -> unsigned short *"""
        return _apdm.ushortArray_cast(self)

    def frompointer(*args):
        """frompointer(t) -> ushortArray"""
        return _apdm.ushortArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
ushortArray_swigregister = _apdm.ushortArray_swigregister
ushortArray_swigregister(ushortArray)

def ushortArray_frompointer(*args):
  """ushortArray_frompointer(t) -> ushortArray"""
  return _apdm.ushortArray_frompointer(*args)

class longlongArray(_object):
    """Proxy of C longlongArray struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, longlongArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, longlongArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, nelements) -> longlongArray"""
        this = _apdm.new_longlongArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_longlongArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, index) -> long long"""
        return _apdm.longlongArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, index, value)"""
        return _apdm.longlongArray___setitem__(self, *args)

    def cast(self):
        """cast(self) -> long long *"""
        return _apdm.longlongArray_cast(self)

    def frompointer(*args):
        """frompointer(t) -> longlongArray"""
        return _apdm.longlongArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
longlongArray_swigregister = _apdm.longlongArray_swigregister
longlongArray_swigregister(longlongArray)

def longlongArray_frompointer(*args):
  """longlongArray_frompointer(t) -> longlongArray"""
  return _apdm.longlongArray_frompointer(*args)

class ulonglongArray(_object):
    """Proxy of C ulonglongArray struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ulonglongArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ulonglongArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, nelements) -> ulonglongArray"""
        this = _apdm.new_ulonglongArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_ulonglongArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, index) -> unsigned long long"""
        return _apdm.ulonglongArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, index, value)"""
        return _apdm.ulonglongArray___setitem__(self, *args)

    def cast(self):
        """cast(self) -> unsigned long long *"""
        return _apdm.ulonglongArray_cast(self)

    def frompointer(*args):
        """frompointer(t) -> ulonglongArray"""
        return _apdm.ulonglongArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
ulonglongArray_swigregister = _apdm.ulonglongArray_swigregister
ulonglongArray_swigregister(ulonglongArray)

def ulonglongArray_frompointer(*args):
  """ulonglongArray_frompointer(t) -> ulonglongArray"""
  return _apdm.ulonglongArray_frompointer(*args)

class apdm_v2_sensor_device_handle_t_array(_object):
    """Proxy of C apdm_v2_sensor_device_handle_t_array struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_v2_sensor_device_handle_t_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_v2_sensor_device_handle_t_array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, nelements) -> apdm_v2_sensor_device_handle_t_array"""
        this = _apdm.new_apdm_v2_sensor_device_handle_t_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_v2_sensor_device_handle_t_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, index) -> apdm_v2_sensor_device_handle_t"""
        return _apdm.apdm_v2_sensor_device_handle_t_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, index, value)"""
        return _apdm.apdm_v2_sensor_device_handle_t_array___setitem__(self, *args)

    def cast(self):
        """cast(self) -> apdm_v2_sensor_device_handle_t *"""
        return _apdm.apdm_v2_sensor_device_handle_t_array_cast(self)

    def frompointer(*args):
        """frompointer(t) -> apdm_v2_sensor_device_handle_t_array"""
        return _apdm.apdm_v2_sensor_device_handle_t_array_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
apdm_v2_sensor_device_handle_t_array_swigregister = _apdm.apdm_v2_sensor_device_handle_t_array_swigregister
apdm_v2_sensor_device_handle_t_array_swigregister(apdm_v2_sensor_device_handle_t_array)

def apdm_v2_sensor_device_handle_t_array_frompointer(*args):
  """apdm_v2_sensor_device_handle_t_array_frompointer(t) -> apdm_v2_sensor_device_handle_t_array"""
  return _apdm.apdm_v2_sensor_device_handle_t_array_frompointer(*args)

def apdm_sensor_list_attached_sensors3_py():
  """apdm_sensor_list_attached_sensors3_py() -> (status, module_id_list)"""
  sn_buffer = uintArray(100)
  status, buffer_count = apdm_sensor_list_attached_sensors3(sn_buffer, 100)

  print(status, buffer_count, type(sn_buffer))

  # create a list with the populated elements of the buffer
  result = []

  if status == APDM_OK:
    for i in range(buffer_count):
      result.append(sn_buffer[i])

  return status, result

def apdm_ap_get_version_string_py( ap_handle ):
  """apdm_ap_get_version_string_py( ap_handle ) -> (status, version_string"""
  b_array = charArray(100)
  status = apdm_ap_get_version_string(ap_handle, b_array, 100)
  
  # convert byte array into string
  result = ""

  if status == APDM_OK:
    for i in range(100):
      if b_array[i] == '\0':
        break
      else:
        result += b_array[i]

  return status, result

def apdm_ap_get_board_version_string_py( ap_handle ):
  """apdm_ap_get_board_version_string_py( ap_handle ) -> (status, board_version_string)"""
  b_array = charArray(100)
  status = apdm_ap_get_board_version_string(ap_handle, b_array, 100)
  
  # convert byte array into string
  result = ""

  if status == APDM_OK:
    for i in range(100):
      if b_array[i] == '\0':
        break
      else:
        result += b_array[i]

  return status, result

def apdm_ap_get_case_id_py( ap_handle ):
  """apdm_ap_get_case_id_py( ap_handle ) -> (status, case_id_string)"""
  b_array = charArray(100)
  status = apdm_ap_get_case_id(ap_handle, b_array, 100)
  
  # convert byte array into string
  result = ""

  if status == APDM_OK:
    for i in range(100):
      if b_array[i] == '\0':
        break
      else:
        result += b_array[i]

  return status, result

def apdm_ds_get_case_id_py( ds_handle ):
  """apdm_ds_get_case_id_py( ds_handle ) -> (status, case_id_string)"""
  b_array = charArray(100)
  status = apdm_ds_get_case_id(ds_handle, b_array, 100)
  
  # convert byte array into string
  result = ""

  if status == APDM_OK:
    for i in range(100):
      if b_array[i] == '\0':
        break
      else:
        result += b_array[i]

  return status, result

def apdm_sensor_cmd_error_name_py( device_handle, error_id ):
  """apdm_sensor_cmd_error_name_py( device_handle ) -> (status, error_name_string)"""
  b_array = charArray(100)
  status = apdm_sensor_cmd_error_name_py(device_handle, b_array, 100, error_id)
  
  # convert byte array into string
  result = ""

  if status == APDM_OK:
    for i in range(100):
      if b_array[i] == '\0':
        break
      else:
        result += b_array[i]

  return status, result

def apdm_sensor_cmd_version_string_1_py( device_handle ):
  """apdm_sensor_cmd_version_string_1_py( device_handle ) -> (status, version_string)"""
  b_array = charArray(130)
  status = apdm_sensor_cmd_version_string_1(device_handle, b_array, 130)
  
  # convert byte array into string
  result = ""

  if status == APDM_OK:
    for i in range(130):
      if b_array[i] == '\0':
        break
      else:
        result += b_array[i]

  return status, result

def apdm_sensor_cmd_version_string_2_py( device_handle ):
  """apdm_sensor_cmd_version_string_2_py( device_handle ) -> (status, version_string)"""
  b_array = charArray(130)
  status = apdm_sensor_cmd_version_string_2(device_handle, b_array, 130)
  
  # convert byte array into string
  result = ""

  if status == APDM_OK:
    for i in range(130):
      if b_array[i] == '\0':
        break
      else:
        result += b_array[i]

  return status, result

def apdm_sensor_cmd_version_string_3_py( device_handle ):
  """apdm_sensor_cmd_version_string_3_py( device_handle ) -> (status, version_string)"""
  b_array = charArray(130)
  status = apdm_sensor_cmd_version_string_3(device_handle, b_array, 130)
  
  # convert byte array into string
  result = ""

  if status == APDM_OK:
    for i in range(130):
      if b_array[i] == '\0':
        break
      else:
        result += b_array[i]

  return status, result

def apdm_sensor_config_get_label_py( device_handle ):
  """apdm_sensor_config_get_label_py( device_handle ) -> (status, label_string)"""
  b_array = charArray(32)
  status = apdm_sensor_config_get_label(device_handle, b_array, 32)
  
  # convert byte array into string
  result = ""

  if status == APDM_OK:
    for i in range(32):
      if b_array[i] == '\0':
        break
      else:
        result += b_array[i]

  return status, result

def apdm_sensor_cmd_case_id_py( device_handle ):
  """apdm_sensor_cmd_case_id_py( device_handle ) -> (status, case_id_string)"""
  b_array = charArray(32)
  status = apdm_sensor_cmd_case_id(device_handle, b_array, 32)
  
  # convert byte array into string
  result = ""

  if status == APDM_OK:
    for i in range(32):
      if b_array[i] == '\0':
        break
      else:
        result += b_array[i]

  return status, result

APDM_WIRELESS_CHANNEL_SPACING = _apdm.APDM_WIRELESS_CHANNEL_SPACING
APDM_SYNC_COUNTS_PER_SECOND = _apdm.APDM_SYNC_COUNTS_PER_SECOND
APDM_DEFAULT_MAX_LATENCY = _apdm.APDM_DEFAULT_MAX_LATENCY
APDM_INFINITE_MAX_LATENCY = _apdm.APDM_INFINITE_MAX_LATENCY
APDM_DEFAULT_MAX_LATENCY_SECONDS = _apdm.APDM_DEFAULT_MAX_LATENCY_SECONDS
APDM_MAX_WIRELESS_CHANNEL = _apdm.APDM_MAX_WIRELESS_CHANNEL
DEVICE_LABEL_SIZE = _apdm.DEVICE_LABEL_SIZE
CASE_ID_SIZE = _apdm.CASE_ID_SIZE
VERSION_STRING_SIZE = _apdm.VERSION_STRING_SIZE
TIMEZONE_STRING_SIZE = _apdm.TIMEZONE_STRING_SIZE
CALIBRATION_DATA_BUFFER_SIZE = _apdm.CALIBRATION_DATA_BUFFER_SIZE
MAX_APDM_EVENTS = _apdm.MAX_APDM_EVENTS
APDM_MAX_NUMBER_OF_SENSORS = _apdm.APDM_MAX_NUMBER_OF_SENSORS
MAX_SAMPLES_THAT_A_DEVICE_CAN_BUFFER_WO_SD_CARD = _apdm.MAX_SAMPLES_THAT_A_DEVICE_CAN_BUFFER_WO_SD_CARD
MAX_SAMPLES_THAT_A_DEVICE_CAN_BUFFER = _apdm.MAX_SAMPLES_THAT_A_DEVICE_CAN_BUFFER
MONITOR_DATA_FLAG_ACCEL = _apdm.MONITOR_DATA_FLAG_ACCEL
MONITOR_DATA_FLAG_GYRO = _apdm.MONITOR_DATA_FLAG_GYRO
MONITOR_DATA_FLAG_MAG = _apdm.MONITOR_DATA_FLAG_MAG
MONITOR_DATA_FLAG_FULL_SCALE = _apdm.MONITOR_DATA_FLAG_FULL_SCALE
MONITOR_DATA_FLAG_TEMP_SELECT = _apdm.MONITOR_DATA_FLAG_TEMP_SELECT
MONITOR_DATA_FLAG_BUTTON_STATE = _apdm.MONITOR_DATA_FLAG_BUTTON_STATE
MONITOR_DATA_FLAG_SYNC_LOCK = _apdm.MONITOR_DATA_FLAG_SYNC_LOCK
MONITOR_DATA_FLAG_SYNC_RESET = _apdm.MONITOR_DATA_FLAG_SYNC_RESET
MONITOR_DATA_FLAG_OPT_SELECT_0 = _apdm.MONITOR_DATA_FLAG_OPT_SELECT_0
MONITOR_DATA_FLAG_OPT_SELECT_1 = _apdm.MONITOR_DATA_FLAG_OPT_SELECT_1
MONITOR_DATA_FLAG_OPT_SELECT_2 = _apdm.MONITOR_DATA_FLAG_OPT_SELECT_2
MONITOR_DATA_FLAG_OPT_SELECT_3 = _apdm.MONITOR_DATA_FLAG_OPT_SELECT_3
E_OK = _apdm.E_OK
E_EVENT_OVERFLOW = _apdm.E_EVENT_OVERFLOW
E_BUFFER_OVERFLOW = _apdm.E_BUFFER_OVERFLOW
E_SD_RESPONSE_TIMEOUT = _apdm.E_SD_RESPONSE_TIMEOUT
E_SD_R1_INVALID = _apdm.E_SD_R1_INVALID
E_SD_R1_PARAM_ERROR = _apdm.E_SD_R1_PARAM_ERROR
E_SD_R1_ADDRESS_ERROR = _apdm.E_SD_R1_ADDRESS_ERROR
E_SD_R1_ERASE_SEQ_ERROR = _apdm.E_SD_R1_ERASE_SEQ_ERROR
E_SD_R1_CRC_ERROR = _apdm.E_SD_R1_CRC_ERROR
E_SD_R1_ILLEGAL_CMD = _apdm.E_SD_R1_ILLEGAL_CMD
E_SD_R1_ERASE_RESET = _apdm.E_SD_R1_ERASE_RESET
E_SD_CMD_0 = _apdm.E_SD_CMD_0
E_SD_CMD_8 = _apdm.E_SD_CMD_8
E_SD_CMD_55 = _apdm.E_SD_CMD_55
E_SD_CMD_41 = _apdm.E_SD_CMD_41
E_SD_CMD_16 = _apdm.E_SD_CMD_16
E_SD_CMD_24 = _apdm.E_SD_CMD_24
E_SD_CMD_17 = _apdm.E_SD_CMD_17
E_SD_CMD_9 = _apdm.E_SD_CMD_9
E_SD_CMD_OTHER = _apdm.E_SD_CMD_OTHER
E_SD_BAD_SIZE = _apdm.E_SD_BAD_SIZE
E_SD_STATE = _apdm.E_SD_STATE
E_SD_BUFFER_FULL = _apdm.E_SD_BUFFER_FULL
E_SD_CMD_8_FORMAT = _apdm.E_SD_CMD_8_FORMAT
E_SD_CMD_8_VOLTAGE = _apdm.E_SD_CMD_8_VOLTAGE
E_SD_CMD_8_CHECK = _apdm.E_SD_CMD_8_CHECK
E_SD_WRITE_CRC = _apdm.E_SD_WRITE_CRC
E_SD_READ_CRC = _apdm.E_SD_READ_CRC
E_SD_CSD_CRC = _apdm.E_SD_CSD_CRC
E_SD_WRITE_ERROR = _apdm.E_SD_WRITE_ERROR
E_SD_WRITE_OTHER = _apdm.E_SD_WRITE_OTHER
E_SD_PROCESS = _apdm.E_SD_PROCESS
E_UART_COLLISION = _apdm.E_UART_COLLISION
E_DECIMATE_OVERFLOW1 = _apdm.E_DECIMATE_OVERFLOW1
E_DECIMATE_OVERFLOW2 = _apdm.E_DECIMATE_OVERFLOW2
E_DECIMATE_NEG1 = _apdm.E_DECIMATE_NEG1
E_DECIMATE_NEG2 = _apdm.E_DECIMATE_NEG2
E_WIRELESS_BUFFER_OVERFLOW = _apdm.E_WIRELESS_BUFFER_OVERFLOW
E_SPI_TIMEOUT = _apdm.E_SPI_TIMEOUT
E_DEBUG_1 = _apdm.E_DEBUG_1
E_DEBUG_2 = _apdm.E_DEBUG_2
E_DEBUG_3 = _apdm.E_DEBUG_3
E_DEBUG_4 = _apdm.E_DEBUG_4
E_DEBUG_5 = _apdm.E_DEBUG_5
E_DEBUG_6 = _apdm.E_DEBUG_6
E_DEBUG_7 = _apdm.E_DEBUG_7
E_DEBUG_8 = _apdm.E_DEBUG_8
E_DEBUG_9 = _apdm.E_DEBUG_9
E_DEBUG_10 = _apdm.E_DEBUG_10
E_DEBUG_11 = _apdm.E_DEBUG_11
E_DEBUG_12 = _apdm.E_DEBUG_12
E_DEBUG_13 = _apdm.E_DEBUG_13
E_DEBUG_14 = _apdm.E_DEBUG_14
E_DEBUG_15 = _apdm.E_DEBUG_15
E_DEBUG_16 = _apdm.E_DEBUG_16
E_OSC_FAULT = _apdm.E_OSC_FAULT
E_DCO_FAULT = _apdm.E_DCO_FAULT
E_LF_FAULT = _apdm.E_LF_FAULT
E_XT1_FAULT = _apdm.E_XT1_FAULT
E_OFF_BATTERY = _apdm.E_OFF_BATTERY
E_OFF_SPIN = _apdm.E_OFF_SPIN
E_OFF_ALWAYS = _apdm.E_OFF_ALWAYS
E_OFF_WIRELESS = _apdm.E_OFF_WIRELESS
E_OFF_HALT = _apdm.E_OFF_HALT
E_WDT_RESET = _apdm.E_WDT_RESET
E_INVALID_CONFIG = _apdm.E_INVALID_CONFIG
E_DEBUG_17 = _apdm.E_DEBUG_17
E_DEBUG_18 = _apdm.E_DEBUG_18
E_DEBUG_19 = _apdm.E_DEBUG_19
E_DEBUG_20 = _apdm.E_DEBUG_20
E_DEBUG_21 = _apdm.E_DEBUG_21
E_DEBUG_22 = _apdm.E_DEBUG_22
E_DEBUG_23 = _apdm.E_DEBUG_23
E_DEBUG_24 = _apdm.E_DEBUG_24
E_DEBUG_25 = _apdm.E_DEBUG_25
E_DEBUG_26 = _apdm.E_DEBUG_26
E_DEBUG_27 = _apdm.E_DEBUG_27
E_DEBUG_28 = _apdm.E_DEBUG_28
E_DEBUG_29 = _apdm.E_DEBUG_29
E_DEBUG_30 = _apdm.E_DEBUG_30
E_DEBUG_31 = _apdm.E_DEBUG_31
E_DEBUG_32 = _apdm.E_DEBUG_32
E_ISR_OVER_RUN = _apdm.E_ISR_OVER_RUN
E_STANDBY = _apdm.E_STANDBY
WIRELESS_PROTO_SYNC = _apdm.WIRELESS_PROTO_SYNC
WIRELESS_PROTO_STREAM = _apdm.WIRELESS_PROTO_STREAM
WIRELESS_PROTO_SPEW = _apdm.WIRELESS_PROTO_SPEW
WIRELESS_PROTO_CARRIER = _apdm.WIRELESS_PROTO_CARRIER
WIRELESS_PROTO_CARRIER_SWEEP = _apdm.WIRELESS_PROTO_CARRIER_SWEEP
WIRELESS_PROTO_STREAM_MUX = _apdm.WIRELESS_PROTO_STREAM_MUX
WIRELESS_PROTO_SUPER_SPEW = _apdm.WIRELESS_PROTO_SUPER_SPEW
WIRELESS_PROTO_CONFIG = _apdm.WIRELESS_PROTO_CONFIG
WIRELESS_PROTO_CLOCK_CAL = _apdm.WIRELESS_PROTO_CLOCK_CAL
WIRELESS_PROTO_ACCESS_POINT = _apdm.WIRELESS_PROTO_ACCESS_POINT
COM_DOCK_STATUS_WAIT = _apdm.COM_DOCK_STATUS_WAIT
COM_DOCK_STATUS_READY = _apdm.COM_DOCK_STATUS_READY
COM_DOCK_STATUS_ERROR = _apdm.COM_DOCK_STATUS_ERROR
MONITOR_OPAL = _apdm.MONITOR_OPAL
MONITOR_EMERALD = _apdm.MONITOR_EMERALD
MONITOR_SAPHIRE = _apdm.MONITOR_SAPHIRE
OFF_REASON_NONE = _apdm.OFF_REASON_NONE
OFF_REASON_BATTERY = _apdm.OFF_REASON_BATTERY
OFF_REASON_SPIN = _apdm.OFF_REASON_SPIN
OFF_REASON_HALT = _apdm.OFF_REASON_HALT
OFF_REASON_WIRELESS = _apdm.OFF_REASON_WIRELESS
OFF_REASON_ALWAYS = _apdm.OFF_REASON_ALWAYS
OFF_REASON_STANDBY = _apdm.OFF_REASON_STANDBY
CONFIG_ENABLE_ACCEL = _apdm.CONFIG_ENABLE_ACCEL
CONFIG_ENABLE_GYRO = _apdm.CONFIG_ENABLE_GYRO
CONFIG_ENABLE_MAG = _apdm.CONFIG_ENABLE_MAG
CONFIG_ENABLE_WIRELESS = _apdm.CONFIG_ENABLE_WIRELESS
CONFIG_ENABLE_SD = _apdm.CONFIG_ENABLE_SD
CONFIG_WIRELESS_CHANNEL_0 = _apdm.CONFIG_WIRELESS_CHANNEL_0
CONFIG_WIRELESS_CHANNEL_1 = _apdm.CONFIG_WIRELESS_CHANNEL_1
CONFIG_WIRELESS_CHANNEL_2 = _apdm.CONFIG_WIRELESS_CHANNEL_2
CONFIG_WIRELESS_CHANNEL_3 = _apdm.CONFIG_WIRELESS_CHANNEL_3
CONFIG_WIRELESS_ADDR_ID = _apdm.CONFIG_WIRELESS_ADDR_ID
CONFIG_WIRELESS_ADDR_BLOCK_0 = _apdm.CONFIG_WIRELESS_ADDR_BLOCK_0
CONFIG_WIRELESS_ADDR_BLOCK_1 = _apdm.CONFIG_WIRELESS_ADDR_BLOCK_1
CONFIG_WIRELESS_ADDR_BLOCK_2 = _apdm.CONFIG_WIRELESS_ADDR_BLOCK_2
CONFIG_WIRELESS_ADDR_BLOCK_3 = _apdm.CONFIG_WIRELESS_ADDR_BLOCK_3
CONFIG_WIRELESS_TIME_SLICE = _apdm.CONFIG_WIRELESS_TIME_SLICE
CONFIG_WIRELESS_PROTOCOL = _apdm.CONFIG_WIRELESS_PROTOCOL
CONFIG_ACCEL_FULL_SCALE = _apdm.CONFIG_ACCEL_FULL_SCALE
CONFIG_ALWAYS_OFF = _apdm.CONFIG_ALWAYS_OFF
CONFIG_SPIN_MODE = _apdm.CONFIG_SPIN_MODE
CONFIG_BATTERY_LED = _apdm.CONFIG_BATTERY_LED
CONFIG_WIRELESS_LATENCY = _apdm.CONFIG_WIRELESS_LATENCY
CONFIG_TEMP_SELECT = _apdm.CONFIG_TEMP_SELECT
CONFIG_OUTPUT_SELECT = _apdm.CONFIG_OUTPUT_SELECT
CONFIG_DECIMATION_SELECT = _apdm.CONFIG_DECIMATION_SELECT
CONFIG_BYPASS_DECIMATION = _apdm.CONFIG_BYPASS_DECIMATION
CONFIG_EXTEND_LED = _apdm.CONFIG_EXTEND_LED
CONFIG_MAG_SET_RESET = _apdm.CONFIG_MAG_SET_RESET
CONFIG_LOCAL_TIMEZONE = _apdm.CONFIG_LOCAL_TIMEZONE
CONFIG_ENABLE_LED = _apdm.CONFIG_ENABLE_LED
CONFIG_ENABLE_BUTTON = _apdm.CONFIG_ENABLE_BUTTON
CONFIG_BUTTON_MODE = _apdm.CONFIG_BUTTON_MODE
CONFIG_LABEL_0 = _apdm.CONFIG_LABEL_0
CONFIG_LABEL_1 = _apdm.CONFIG_LABEL_1
CONFIG_LABEL_2 = _apdm.CONFIG_LABEL_2
CONFIG_LABEL_3 = _apdm.CONFIG_LABEL_3
CONFIG_DEBUG_LED = _apdm.CONFIG_DEBUG_LED
CONFIG_DEBUG_FILE = _apdm.CONFIG_DEBUG_FILE
CONFIG_BATTERY_CUTOFF = _apdm.CONFIG_BATTERY_CUTOFF
APDM_DECIMATE_1x1 = _apdm.APDM_DECIMATE_1x1
APDM_DECIMATE_2x1 = _apdm.APDM_DECIMATE_2x1
APDM_DECIMATE_2x2 = _apdm.APDM_DECIMATE_2x2
APDM_DECIMATE_5x1 = _apdm.APDM_DECIMATE_5x1
APDM_DECIMATE_4x2 = _apdm.APDM_DECIMATE_4x2
APDM_DECIMATE_5x2 = _apdm.APDM_DECIMATE_5x2
APDM_DECIMATE_4x4 = _apdm.APDM_DECIMATE_4x4
APDM_DECIMATE_5x4 = _apdm.APDM_DECIMATE_5x4
APDM_DECIMATE_8x4 = _apdm.APDM_DECIMATE_8x4
APDM_DECIMATE_8x5 = _apdm.APDM_DECIMATE_8x5
APDM_DECIMATE_8x8 = _apdm.APDM_DECIMATE_8x8
APDM_OUTPUT_SELECT_RATE_20 = _apdm.APDM_OUTPUT_SELECT_RATE_20
APDM_OUTPUT_SELECT_RATE_32 = _apdm.APDM_OUTPUT_SELECT_RATE_32
APDM_OUTPUT_SELECT_RATE_40 = _apdm.APDM_OUTPUT_SELECT_RATE_40
APDM_OUTPUT_SELECT_RATE_64 = _apdm.APDM_OUTPUT_SELECT_RATE_64
APDM_OUTPUT_SELECT_RATE_80 = _apdm.APDM_OUTPUT_SELECT_RATE_80
APDM_OUTPUT_SELECT_RATE_128 = _apdm.APDM_OUTPUT_SELECT_RATE_128
APDM_OUTPUT_SELECT_RATE_256 = _apdm.APDM_OUTPUT_SELECT_RATE_256
APDM_OUTPUT_SELECT_RATE_512 = _apdm.APDM_OUTPUT_SELECT_RATE_512
APDM_OUTPUT_SELECT_RATE_640 = _apdm.APDM_OUTPUT_SELECT_RATE_640
APDM_OUTPUT_SELECT_RATE_1280 = _apdm.APDM_OUTPUT_SELECT_RATE_1280
MODE_RESET = _apdm.MODE_RESET
MODE_RUN = _apdm.MODE_RUN
MODE_DOCK = _apdm.MODE_DOCK
MODE_ERROR = _apdm.MODE_ERROR
MODE_FULL = _apdm.MODE_FULL
MODE_OFF = _apdm.MODE_OFF
MODE_STANDBY = _apdm.MODE_STANDBY
MODE_RUN_WAIT = _apdm.MODE_RUN_WAIT
MODE_DOCK_WAIT = _apdm.MODE_DOCK_WAIT
MODE_WIRELESS_CONFIG = _apdm.MODE_WIRELESS_CONFIG
MODE_OTHER = _apdm.MODE_OTHER
SPIN_MODE_NONE = _apdm.SPIN_MODE_NONE
SPIN_MODE_HALT = _apdm.SPIN_MODE_HALT
SPIN_MODE_STANDBY = _apdm.SPIN_MODE_STANDBY
SPIN_MODE_HOLD = _apdm.SPIN_MODE_HOLD
RECORDING_MODE_STREAMING = _apdm.RECORDING_MODE_STREAMING
RECORDING_MODE_MESH = _apdm.RECORDING_MODE_MESH
RECORDING_MODE_LOGGING = _apdm.RECORDING_MODE_LOGGING
DATA_MODE_STREAMED = _apdm.DATA_MODE_STREAMED
DATA_MODE_LOGGED = _apdm.DATA_MODE_LOGGED
CONFIG_MAG_SET_RESET_OFF = _apdm.CONFIG_MAG_SET_RESET_OFF
CONFIG_MAG_SET_RESET_CONTINUOUS = _apdm.CONFIG_MAG_SET_RESET_CONTINUOUS
CONFIG_MAG_SET_RESET_SINGLE = _apdm.CONFIG_MAG_SET_RESET_SINGLE
CHARGE_STATUS_OFF = _apdm.CHARGE_STATUS_OFF
CHARGE_STATUS_CHARGING = _apdm.CHARGE_STATUS_CHARGING
CHARGE_STATUS_FULL = _apdm.CHARGE_STATUS_FULL
CHARGE_STATUS_TEST = _apdm.CHARGE_STATUS_TEST
CHARGE_STATUS_PRE = _apdm.CHARGE_STATUS_PRE
CHARGE_STATUS_BULK = _apdm.CHARGE_STATUS_BULK
CHARGE_STATUS_CONST = _apdm.CHARGE_STATUS_CONST
APDM_OFFSET_OK = _apdm.APDM_OFFSET_OK
APDM_BAD_ACCELEROMETER_RANGE = _apdm.APDM_BAD_ACCELEROMETER_RANGE
APDM_BAD_ACCELEROMETER_OFFSET = _apdm.APDM_BAD_ACCELEROMETER_OFFSET
APDM_BAD_ACCELEROMETER_NOISE = _apdm.APDM_BAD_ACCELEROMETER_NOISE
APDM_BAD_GYROSCOPE_RANGE = _apdm.APDM_BAD_GYROSCOPE_RANGE
APDM_BAD_GYROSCOPE_OFFSET = _apdm.APDM_BAD_GYROSCOPE_OFFSET
APDM_BAD_GYROSCOPE_NOISE = _apdm.APDM_BAD_GYROSCOPE_NOISE
APDM_BAD_MAGNETOMETER_RANGE = _apdm.APDM_BAD_MAGNETOMETER_RANGE
APDM_BAD_MAGNETOMETER_OFFSET = _apdm.APDM_BAD_MAGNETOMETER_OFFSET
APDM_BAD_MAGNETOMETER_NOISE = _apdm.APDM_BAD_MAGNETOMETER_NOISE
APDM_BAD_TEMPERATURE_OFFSET = _apdm.APDM_BAD_TEMPERATURE_OFFSET
APDM_BAD_TEMPERATURE_NOISE = _apdm.APDM_BAD_TEMPERATURE_NOISE
APDM_BAD_TEMPERATURE_RANGE = _apdm.APDM_BAD_TEMPERATURE_RANGE
APDM_AP_GPIO_0 = _apdm.APDM_AP_GPIO_0
APDM_AP_ANALOG_OUT_0 = _apdm.APDM_AP_ANALOG_OUT_0
APDM_AP_ANALOG_IN_0 = _apdm.APDM_AP_ANALOG_IN_0
APDM_DS_RUN = _apdm.APDM_DS_RUN
APDM_DS_HALT = _apdm.APDM_DS_HALT
ODEHM_AUTO = _apdm.ODEHM_AUTO
ODEHM_MOUNT_SD = _apdm.ODEHM_MOUNT_SD
ODEHM_UNMOUNT_SD = _apdm.ODEHM_UNMOUNT_SD
OUEHM_AUTO = _apdm.OUEHM_AUTO
OUEHM_ENABLED = _apdm.OUEHM_ENABLED
OUEHM_DISABLED = _apdm.OUEHM_DISABLED
APDM_LL_ALL = _apdm.APDM_LL_ALL
APDM_LL_DEBUG = _apdm.APDM_LL_DEBUG
APDM_LL_INFO = _apdm.APDM_LL_INFO
APDM_LL_WARNING = _apdm.APDM_LL_WARNING
APDM_LL_ERROR = _apdm.APDM_LL_ERROR
APDM_LL_NONE = _apdm.APDM_LL_NONE
APDM_OK = _apdm.APDM_OK
APDM_INVALID_PARAM = _apdm.APDM_INVALID_PARAM
APDM_MISSED_DATA = _apdm.APDM_MISSED_DATA
APDM_INITIALIZATION_ERROR = _apdm.APDM_INITIALIZATION_ERROR
APDM_NO_MORE_DATA = _apdm.APDM_NO_MORE_DATA
APDM_FT_COMMUNICATIONS_ERROR = _apdm.APDM_FT_COMMUNICATIONS_ERROR
APDM_STATUS_ERROR = _apdm.APDM_STATUS_ERROR
APDM_STATUS_UNKNOWN = _apdm.APDM_STATUS_UNKNOWN
APDM_MEMORY_ALLOCATION_ERROR = _apdm.APDM_MEMORY_ALLOCATION_ERROR
APDM_INSUFFICIENT_RESOURCES = _apdm.APDM_INSUFFICIENT_RESOURCES
APDM_COMMUNICATIONS_ERROR = _apdm.APDM_COMMUNICATIONS_ERROR
APDM_NOT_ENOUGH_ACCESS_POINTS = _apdm.APDM_NOT_ENOUGH_ACCESS_POINTS
APDM_INVALID_FIRMWARE = _apdm.APDM_INVALID_FIRMWARE
APDM_CANT_RESET_INTO_TARGET_MODE = _apdm.APDM_CANT_RESET_INTO_TARGET_MODE
APDM_FIRMWARE = _apdm.APDM_FIRMWARE
APDM_BOOTLOADER = _apdm.APDM_BOOTLOADER
APDM_INVALID_CONTEXT_HANDLE = _apdm.APDM_INVALID_CONTEXT_HANDLE
APDM_CRC16_ERROR = _apdm.APDM_CRC16_ERROR
APDM_DEVICE_RESPONSE_ERROR = _apdm.APDM_DEVICE_RESPONSE_ERROR
APDM_DEVICE_FIRMWARE_TOO_OLD = _apdm.APDM_DEVICE_FIRMWARE_TOO_OLD
APDM_FILE_ERROR = _apdm.APDM_FILE_ERROR
APDM_UNSUPPORTED_DEVICE_FIRMWARE_VERSION = _apdm.APDM_UNSUPPORTED_DEVICE_FIRMWARE_VERSION
APDM_UNSUPPORTED_DOCKING_STATION_FIRMWARE_VERSION = _apdm.APDM_UNSUPPORTED_DOCKING_STATION_FIRMWARE_VERSION
APDM_UNSUPPORTED_AP_FIRMWARE_VERSION = _apdm.APDM_UNSUPPORTED_AP_FIRMWARE_VERSION
APDM_UNSUPPORTED_CALIBRATION_DATA_VERSION = _apdm.APDM_UNSUPPORTED_CALIBRATION_DATA_VERSION
APDM_SYNC_LINE_ERROR = _apdm.APDM_SYNC_LINE_ERROR
APDM_UNKNOWN_SENSOR_ID_ERROR = _apdm.APDM_UNKNOWN_SENSOR_ID_ERROR
APDM_DEVICE_NOT_FOUND = _apdm.APDM_DEVICE_NOT_FOUND
APDM_UNSUPPORTED_COMMAND = _apdm.APDM_UNSUPPORTED_COMMAND
APDM_DEVICE_TX_RX_COLLISION_ERROR = _apdm.APDM_DEVICE_TX_RX_COLLISION_ERROR
APDM_READ_TIMEOUT_ERROR = _apdm.APDM_READ_TIMEOUT_ERROR
APDM_UNABLE_TO_SYNC_RECORD_HEAD_LIST_ERROR = _apdm.APDM_UNABLE_TO_SYNC_RECORD_HEAD_LIST_ERROR
APDM_UNKNOWN_CALIBRATION_DATA_STRUCTURE = _apdm.APDM_UNKNOWN_CALIBRATION_DATA_STRUCTURE
APDM_NULL_PARAMETER_ERROR = _apdm.APDM_NULL_PARAMETER_ERROR
APDM_NOT_FOUND = _apdm.APDM_NOT_FOUND
APDM_UNKNOWN_DEVICE_TYPE = _apdm.APDM_UNKNOWN_DEVICE_TYPE
APDM_NO_CORRELATION_FIFO = _apdm.APDM_NO_CORRELATION_FIFO
APDM_UNSUPPORTED_DATA_FILE_VERSION = _apdm.APDM_UNSUPPORTED_DATA_FILE_VERSION
APDM_CORRUPT_DISK_FIFO = _apdm.APDM_CORRUPT_DISK_FIFO
APDM_DOCK_UNSUPPORTED_HOST_LIBRARY_VERSION = _apdm.APDM_DOCK_UNSUPPORTED_HOST_LIBRARY_VERSION
APDM_AP_UNSUPPORTED_HOST_LIBRARY_VERSION = _apdm.APDM_AP_UNSUPPORTED_HOST_LIBRARY_VERSION
APDM_UNEXPECTED_STRUCTURE_VALUE = _apdm.APDM_UNEXPECTED_STRUCTURE_VALUE
APDM_BAD_DATA = _apdm.APDM_BAD_DATA
APDM_CORRUPT_CONTEXT = _apdm.APDM_CORRUPT_CONTEXT
APDM_AP_READ_TIMEOUT_ERROR = _apdm.APDM_AP_READ_TIMEOUT_ERROR
APDM_MONITOR_READ_TIMEOUT_ERROR = _apdm.APDM_MONITOR_READ_TIMEOUT_ERROR
APDM_DOCK_READ_TIMEOUT_ERROR = _apdm.APDM_DOCK_READ_TIMEOUT_ERROR
APDM_DEVICE_RESPONSE_ERROR_CRC_ERROR = _apdm.APDM_DEVICE_RESPONSE_ERROR_CRC_ERROR
APDM_DEVICE_RESPONSE_ERROR_INVALID_COMMAND = _apdm.APDM_DEVICE_RESPONSE_ERROR_INVALID_COMMAND
APDM_DEVICE_RESPONSE_ERROR_INVALID_PARAM_SIZE = _apdm.APDM_DEVICE_RESPONSE_ERROR_INVALID_PARAM_SIZE
APDM_DEVICE_RESPONSE_ERROR_INVALID_PARAM_VALUE = _apdm.APDM_DEVICE_RESPONSE_ERROR_INVALID_PARAM_VALUE
APDM_DEVICE_RESPONSE_ERROR_ERROR_EXECUTING_COMMAND = _apdm.APDM_DEVICE_RESPONSE_ERROR_ERROR_EXECUTING_COMMAND
APDM_RECALIBRATION_INSUFFICIENT_DATA = _apdm.APDM_RECALIBRATION_INSUFFICIENT_DATA
APDM_RECALIBRATION_BAD_FIT = _apdm.APDM_RECALIBRATION_BAD_FIT
APDM_RECALIBRATION_INSUFFICIENT_MOVEMENT = _apdm.APDM_RECALIBRATION_INSUFFICIENT_MOVEMENT
APDM_FIRMWARE_COMBINATION_ERROR = _apdm.APDM_FIRMWARE_COMBINATION_ERROR
APDM_DATA_FROM_UNEXPECTED_MONITOR_ERROR = _apdm.APDM_DATA_FROM_UNEXPECTED_MONITOR_ERROR
APDM_ORIENTATION_ERROR = _apdm.APDM_ORIENTATION_ERROR
APDM_UNABLE_TO_PING_MONITOR_ERROR = _apdm.APDM_UNABLE_TO_PING_MONITOR_ERROR
APDM_FIRMWARE_INCOMPATABLE = _apdm.APDM_FIRMWARE_INCOMPATABLE
APDM_INVALID_MONITOR_CONFIGURATION = _apdm.APDM_INVALID_MONITOR_CONFIGURATION
APDM_UNABLE_TO_MATCH_EXPECTED_AP_IDS = _apdm.APDM_UNABLE_TO_MATCH_EXPECTED_AP_IDS
APDM_AP_LIBUSB_ERROR_NO_DEVICE = _apdm.APDM_AP_LIBUSB_ERROR_NO_DEVICE
APDM_DOCK_LIBUSB_ERROR_NO_DEVICE = _apdm.APDM_DOCK_LIBUSB_ERROR_NO_DEVICE
APDM_UNSUPPORTED_AP_HANDLE_VERSION = _apdm.APDM_UNSUPPORTED_AP_HANDLE_VERSION
APDM_NOT_V1_AP_HANDLE = _apdm.APDM_NOT_V1_AP_HANDLE
APDM_NOT_V2_AP_HANDLE = _apdm.APDM_NOT_V2_AP_HANDLE
APDM_NOT_V1_DOCK_HANDLE = _apdm.APDM_NOT_V1_DOCK_HANDLE
APDM_NOT_V2_MONITOR_HANDLE = _apdm.APDM_NOT_V2_MONITOR_HANDLE
APDM_HANDLE_VERSION_UNKNOWN = _apdm.APDM_HANDLE_VERSION_UNKNOWN
APDM_CANT_MIX_HARDWARE_VERSIONS = _apdm.APDM_CANT_MIX_HARDWARE_VERSIONS
APDM_CORRELATION_ERROR = _apdm.APDM_CORRELATION_ERROR
APDM_NOT_ENOUGH_MONITORS = _apdm.APDM_NOT_ENOUGH_MONITORS
APDM_NO_FILE_OVERLAP = _apdm.APDM_NO_FILE_OVERLAP
APDM_ECHO_SYNC_ERROR = _apdm.APDM_ECHO_SYNC_ERROR
APDM_AP_NOT_READY_TO_STREAM = _apdm.APDM_AP_NOT_READY_TO_STREAM
APDM_INTERPOLATION_ERROR = _apdm.APDM_INTERPOLATION_ERROR
APDM_ASYNC_MODE_RESPONSE = _apdm.APDM_ASYNC_MODE_RESPONSE
APDM_COMMUNICATION_MAGIC_NUMBER_ERROR = _apdm.APDM_COMMUNICATION_MAGIC_NUMBER_ERROR
APDM_SENSOR_RESET_DURING_STREAMING = _apdm.APDM_SENSOR_RESET_DURING_STREAMING
APDM_HDF_ERROR = _apdm.APDM_HDF_ERROR
APDM_BUFFER_VALIDATION = _apdm.APDM_BUFFER_VALIDATION
APDM_DECOMPRESSION_ERROR = _apdm.APDM_DECOMPRESSION_ERROR
APDM_DATA_COMM_CRC_ERROR = _apdm.APDM_DATA_COMM_CRC_ERROR
APDM_INCORRECT_NUMBER_OF_APS_CONNECTED = _apdm.APDM_INCORRECT_NUMBER_OF_APS_CONNECTED
APDM_LIB_USB_ERROR = _apdm.APDM_LIB_USB_ERROR
APDM_LIBUSB_ERROR_IO = _apdm.APDM_LIBUSB_ERROR_IO
APDM_LIBUSB_ERROR_INVALID_PARAM = _apdm.APDM_LIBUSB_ERROR_INVALID_PARAM
APDM_LIBUSB_ERROR_ACCESS = _apdm.APDM_LIBUSB_ERROR_ACCESS
APDM_LIBUSB_ERROR_NO_DEVICE = _apdm.APDM_LIBUSB_ERROR_NO_DEVICE
APDM_LIBUSB_ERROR_NOT_FOUND = _apdm.APDM_LIBUSB_ERROR_NOT_FOUND
APDM_LIBUSB_ERROR_BUSY = _apdm.APDM_LIBUSB_ERROR_BUSY
APDM_LIBUSB_ERROR_TIMEOUT = _apdm.APDM_LIBUSB_ERROR_TIMEOUT
APDM_LIBUSB_ERROR_OVERFLOW = _apdm.APDM_LIBUSB_ERROR_OVERFLOW
APDM_LIBUSB_ERROR_PIPE = _apdm.APDM_LIBUSB_ERROR_PIPE
APDM_LIBUSB_ERROR_INTERRUPTED = _apdm.APDM_LIBUSB_ERROR_INTERRUPTED
APDM_LIBUSB_ERROR_NO_MEM = _apdm.APDM_LIBUSB_ERROR_NO_MEM
APDM_LIBUSB_ERROR_NOT_SUPPORTED = _apdm.APDM_LIBUSB_ERROR_NOT_SUPPORTED
APDM_LIBUSB_ERROR_UNKOWN = _apdm.APDM_LIBUSB_ERROR_UNKOWN
APDM_LIBUSB_ERROR_OTHER = _apdm.APDM_LIBUSB_ERROR_OTHER
APDM_FTDI_COMM_ERROR = _apdm.APDM_FTDI_COMM_ERROR
APDM_SEVERITY_ERROR = _apdm.APDM_SEVERITY_ERROR
APDM_SEVERITY_WARNING = _apdm.APDM_SEVERITY_WARNING
APDM_SEVERITY_INFO = _apdm.APDM_SEVERITY_INFO
ACCELEROMETERS = _apdm.ACCELEROMETERS
GYROS = _apdm.GYROS
TEMPERATURE = _apdm.TEMPERATURE
MAGNETOMETER = _apdm.MAGNETOMETER
DEPRECATED = _apdm.DEPRECATED
EVENTS = _apdm.EVENTS
DEVICE_INFORMATION = _apdm.DEVICE_INFORMATION
APDME_EHB_OMIT_RECORD = _apdm.APDME_EHB_OMIT_RECORD
APDME_EHB_RETURN_PARTIAL_RECORD = _apdm.APDME_EHB_RETURN_PARTIAL_RECORD
MONITOR_OPT_SELECT_NONE = _apdm.MONITOR_OPT_SELECT_NONE
MONITOR_OPT_SELECT_VBAT = _apdm.MONITOR_OPT_SELECT_VBAT
MONITOR_OPT_SELECT_MSP_TEMP = _apdm.MONITOR_OPT_SELECT_MSP_TEMP
MONITOR_OPT_SELECT_IDG_TEMP = _apdm.MONITOR_OPT_SELECT_IDG_TEMP
MONITOR_OPT_SELECT_SAMPLES = _apdm.MONITOR_OPT_SELECT_SAMPLES
MONITOR_OPT_SELECT_TEMP_SUM = _apdm.MONITOR_OPT_SELECT_TEMP_SUM
MONITOR_OPT_SELECT_TAG_DATA = _apdm.MONITOR_OPT_SELECT_TAG_DATA
MONITOR_OPT_SELECT_MODULE_ID = _apdm.MONITOR_OPT_SELECT_MODULE_ID
APDM_TEMP_SENSOR_MSP = _apdm.APDM_TEMP_SENSOR_MSP
APDM_TEMP_SENSOR_GYRO = _apdm.APDM_TEMP_SENSOR_GYRO
class apdm_monitor_error_stat_t(_object):
    """Proxy of C apdm_monitor_error_stat_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_monitor_error_stat_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_monitor_error_stat_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error_id"] = _apdm.apdm_monitor_error_stat_t_error_id_set
    __swig_getmethods__["error_id"] = _apdm.apdm_monitor_error_stat_t_error_id_get
    if _newclass:error_id = _swig_property(_apdm.apdm_monitor_error_stat_t_error_id_get, _apdm.apdm_monitor_error_stat_t_error_id_set)
    __swig_setmethods__["error_count"] = _apdm.apdm_monitor_error_stat_t_error_count_set
    __swig_getmethods__["error_count"] = _apdm.apdm_monitor_error_stat_t_error_count_get
    if _newclass:error_count = _swig_property(_apdm.apdm_monitor_error_stat_t_error_count_get, _apdm.apdm_monitor_error_stat_t_error_count_set)
    __swig_setmethods__["sync_value"] = _apdm.apdm_monitor_error_stat_t_sync_value_set
    __swig_getmethods__["sync_value"] = _apdm.apdm_monitor_error_stat_t_sync_value_get
    if _newclass:sync_value = _swig_property(_apdm.apdm_monitor_error_stat_t_sync_value_get, _apdm.apdm_monitor_error_stat_t_sync_value_set)
    def __init__(self): 
        """__init__(self) -> apdm_monitor_error_stat_t"""
        this = _apdm.new_apdm_monitor_error_stat_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_monitor_error_stat_t
    __del__ = lambda self : None;
apdm_monitor_error_stat_t_swigregister = _apdm.apdm_monitor_error_stat_t_swigregister
apdm_monitor_error_stat_t_swigregister(apdm_monitor_error_stat_t)

APDM_AP_RECEIVING_UNKNOWN = _apdm.APDM_AP_RECEIVING_UNKNOWN
APDM_AP_RECEIVING_FROM_ALL_MONITORS = _apdm.APDM_AP_RECEIVING_FROM_ALL_MONITORS
APDM_AP_RECEIVING_FROM_ALL_MONITORS_AND_CATCHING_UP = _apdm.APDM_AP_RECEIVING_FROM_ALL_MONITORS_AND_CATCHING_UP
APDM_AP_RECEIVING_FROM_ALL_MONITORS_AND_FALLING_BEHIND = _apdm.APDM_AP_RECEIVING_FROM_ALL_MONITORS_AND_FALLING_BEHIND
APDM_AP_NOT_RECEIVING_DATA_FROM_SOME_MONITORS = _apdm.APDM_AP_NOT_RECEIVING_DATA_FROM_SOME_MONITORS
APDM_AP_NOT_RECEIVING_DATA_FROM_ANY_MONITORS = _apdm.APDM_AP_NOT_RECEIVING_DATA_FROM_ANY_MONITORS
APDM_ORIENTATION_MODEL_ALL = _apdm.APDM_ORIENTATION_MODEL_ALL
APDM_ORIENTATION_MODEL_NO_MAG = _apdm.APDM_ORIENTATION_MODEL_NO_MAG
APDM_ORIENTATION_MODEL_UNDISTURBED_MAG = _apdm.APDM_ORIENTATION_MODEL_UNDISTURBED_MAG
APDM_FILE_VERSION_UNKNOWN = _apdm.APDM_FILE_VERSION_UNKNOWN
APDM_FILE_VERSION_0000 = _apdm.APDM_FILE_VERSION_0000
APDM_FILE_VERSION_0001 = _apdm.APDM_FILE_VERSION_0001
APDM_FILE_VERSION_0002 = _apdm.APDM_FILE_VERSION_0002
APDM_FILE_VERSION_0003 = _apdm.APDM_FILE_VERSION_0003
APDM_FILE_VERSION_0004 = _apdm.APDM_FILE_VERSION_0004
APDM_FILE_VERSION_0005 = _apdm.APDM_FILE_VERSION_0005
APDM_FILE_VERSION_0006 = _apdm.APDM_FILE_VERSION_0006
APDM_FILE_VERSION_0007 = _apdm.APDM_FILE_VERSION_0007
APDM_FILE_VERSION_2001 = _apdm.APDM_FILE_VERSION_2001
APDM_DATA_INTEGRITY_GOOD = _apdm.APDM_DATA_INTEGRITY_GOOD
APDM_DATA_INTEGRITY_ACC_STUCK = _apdm.APDM_DATA_INTEGRITY_ACC_STUCK
APDM_DATA_INTEGRITY_ACC_NAN = _apdm.APDM_DATA_INTEGRITY_ACC_NAN
APDM_DATA_INTEGRITY_ACC_INF = _apdm.APDM_DATA_INTEGRITY_ACC_INF
APDM_DATA_INTEGRITY_ACC_NO_DATA = _apdm.APDM_DATA_INTEGRITY_ACC_NO_DATA
APDM_DATA_INTEGRITY_GYRO_STUCK = _apdm.APDM_DATA_INTEGRITY_GYRO_STUCK
APDM_DATA_INTEGRITY_GYRO_NAN = _apdm.APDM_DATA_INTEGRITY_GYRO_NAN
APDM_DATA_INTEGRITY_GYRO_INF = _apdm.APDM_DATA_INTEGRITY_GYRO_INF
APDM_DATA_INTEGRITY_GYRO_NO_DATA = _apdm.APDM_DATA_INTEGRITY_GYRO_NO_DATA
APDM_DATA_INTEGRITY_MAG_STUCK = _apdm.APDM_DATA_INTEGRITY_MAG_STUCK
APDM_DATA_INTEGRITY_MAG_NAN = _apdm.APDM_DATA_INTEGRITY_MAG_NAN
APDM_DATA_INTEGRITY_MAG_INF = _apdm.APDM_DATA_INTEGRITY_MAG_INF
APDM_DATA_INTEGRITY_MAG_NO_DATA = _apdm.APDM_DATA_INTEGRITY_MAG_NO_DATA
APDM_DATA_INTEGRITY_PRESSURE_STUCK = _apdm.APDM_DATA_INTEGRITY_PRESSURE_STUCK
APDM_DATA_INTEGRITY_PRESSURE_NAN = _apdm.APDM_DATA_INTEGRITY_PRESSURE_NAN
APDM_DATA_INTEGRITY_PRESSURE_INF = _apdm.APDM_DATA_INTEGRITY_PRESSURE_INF
APDM_DATA_INTEGRITY_PRESSURE_NO_DATA = _apdm.APDM_DATA_INTEGRITY_PRESSURE_NO_DATA
APDM_DATA_INTEGRITY_ORIENTATION_NAN = _apdm.APDM_DATA_INTEGRITY_ORIENTATION_NAN
APDM_DATA_INTEGRITY_OUT_OF_ORDER = _apdm.APDM_DATA_INTEGRITY_OUT_OF_ORDER
APDM_DATA_INTEGRITY_SKIPPED_SAMPLE = _apdm.APDM_DATA_INTEGRITY_SKIPPED_SAMPLE
APDM_DATA_INTEGRITY_ACC_RANGE = _apdm.APDM_DATA_INTEGRITY_ACC_RANGE
APDM_DATA_INTEGRITY_GYRO_RANGE = _apdm.APDM_DATA_INTEGRITY_GYRO_RANGE
APDM_DATA_INTEGRITY_MAG_RANGE = _apdm.APDM_DATA_INTEGRITY_MAG_RANGE
APDM_DATA_INTEGRITY_PRESSURE_RANGE = _apdm.APDM_DATA_INTEGRITY_PRESSURE_RANGE
APDM_DATA_INTEGRITY_LAST_ELEMENT = _apdm.APDM_DATA_INTEGRITY_LAST_ELEMENT
class apdm_device_status_t(_object):
    """Proxy of C apdm_device_status_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_device_status_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_device_status_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["result_code"] = _apdm.apdm_device_status_t_result_code_set
    __swig_getmethods__["result_code"] = _apdm.apdm_device_status_t_result_code_get
    if _newclass:result_code = _swig_property(_apdm.apdm_device_status_t_result_code_get, _apdm.apdm_device_status_t_result_code_set)
    __swig_setmethods__["gyro_recalibration_block"] = _apdm.apdm_device_status_t_gyro_recalibration_block_set
    __swig_getmethods__["gyro_recalibration_block"] = _apdm.apdm_device_status_t_gyro_recalibration_block_get
    if _newclass:gyro_recalibration_block = _swig_property(_apdm.apdm_device_status_t_gyro_recalibration_block_get, _apdm.apdm_device_status_t_gyro_recalibration_block_set)
    __swig_setmethods__["gyro_recalibration_result"] = _apdm.apdm_device_status_t_gyro_recalibration_result_set
    __swig_getmethods__["gyro_recalibration_result"] = _apdm.apdm_device_status_t_gyro_recalibration_result_get
    if _newclass:gyro_recalibration_result = _swig_property(_apdm.apdm_device_status_t_gyro_recalibration_result_get, _apdm.apdm_device_status_t_gyro_recalibration_result_set)
    __swig_setmethods__["sd_mbytes_total"] = _apdm.apdm_device_status_t_sd_mbytes_total_set
    __swig_getmethods__["sd_mbytes_total"] = _apdm.apdm_device_status_t_sd_mbytes_total_get
    if _newclass:sd_mbytes_total = _swig_property(_apdm.apdm_device_status_t_sd_mbytes_total_get, _apdm.apdm_device_status_t_sd_mbytes_total_set)
    __swig_setmethods__["sd_mbytes_used"] = _apdm.apdm_device_status_t_sd_mbytes_used_set
    __swig_getmethods__["sd_mbytes_used"] = _apdm.apdm_device_status_t_sd_mbytes_used_get
    if _newclass:sd_mbytes_used = _swig_property(_apdm.apdm_device_status_t_sd_mbytes_used_get, _apdm.apdm_device_status_t_sd_mbytes_used_set)
    def __init__(self): 
        """__init__(self) -> apdm_device_status_t"""
        this = _apdm.new_apdm_device_status_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_device_status_t
    __del__ = lambda self : None;
apdm_device_status_t_swigregister = _apdm.apdm_device_status_t_swigregister
apdm_device_status_t_swigregister(apdm_device_status_t)

class apdm_record_t(_object):
    """Proxy of C apdm_record_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_record_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_record_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sync_val64"] = _apdm.apdm_record_t_sync_val64_set
    __swig_getmethods__["sync_val64"] = _apdm.apdm_record_t_sync_val64_get
    if _newclass:sync_val64 = _swig_property(_apdm.apdm_record_t_sync_val64_get, _apdm.apdm_record_t_sync_val64_set)
    __swig_setmethods__["v2_sync_val64_us"] = _apdm.apdm_record_t_v2_sync_val64_us_set
    __swig_getmethods__["v2_sync_val64_us"] = _apdm.apdm_record_t_v2_sync_val64_us_get
    if _newclass:v2_sync_val64_us = _swig_property(_apdm.apdm_record_t_v2_sync_val64_us_get, _apdm.apdm_record_t_v2_sync_val64_us_set)
    __swig_setmethods__["v2_mcu_time_val64_us"] = _apdm.apdm_record_t_v2_mcu_time_val64_us_set
    __swig_getmethods__["v2_mcu_time_val64_us"] = _apdm.apdm_record_t_v2_mcu_time_val64_us_get
    if _newclass:v2_mcu_time_val64_us = _swig_property(_apdm.apdm_record_t_v2_mcu_time_val64_us_get, _apdm.apdm_record_t_v2_mcu_time_val64_us_set)
    __swig_setmethods__["v2_sync_time_delta_ms"] = _apdm.apdm_record_t_v2_sync_time_delta_ms_set
    __swig_getmethods__["v2_sync_time_delta_ms"] = _apdm.apdm_record_t_v2_sync_time_delta_ms_get
    if _newclass:v2_sync_time_delta_ms = _swig_property(_apdm.apdm_record_t_v2_sync_time_delta_ms_get, _apdm.apdm_record_t_v2_sync_time_delta_ms_set)
    __swig_setmethods__["sync_val32_low"] = _apdm.apdm_record_t_sync_val32_low_set
    __swig_getmethods__["sync_val32_low"] = _apdm.apdm_record_t_sync_val32_low_get
    if _newclass:sync_val32_low = _swig_property(_apdm.apdm_record_t_sync_val32_low_get, _apdm.apdm_record_t_sync_val32_low_set)
    __swig_setmethods__["sync_val32_high"] = _apdm.apdm_record_t_sync_val32_high_set
    __swig_getmethods__["sync_val32_high"] = _apdm.apdm_record_t_sync_val32_high_get
    if _newclass:sync_val32_high = _swig_property(_apdm.apdm_record_t_sync_val32_high_get, _apdm.apdm_record_t_sync_val32_high_set)
    __swig_setmethods__["nRF_pipe"] = _apdm.apdm_record_t_nRF_pipe_set
    __swig_getmethods__["nRF_pipe"] = _apdm.apdm_record_t_nRF_pipe_get
    if _newclass:nRF_pipe = _swig_property(_apdm.apdm_record_t_nRF_pipe_get, _apdm.apdm_record_t_nRF_pipe_set)
    __swig_setmethods__["num_retrys"] = _apdm.apdm_record_t_num_retrys_set
    __swig_getmethods__["num_retrys"] = _apdm.apdm_record_t_num_retrys_get
    if _newclass:num_retrys = _swig_property(_apdm.apdm_record_t_num_retrys_get, _apdm.apdm_record_t_num_retrys_set)
    __swig_setmethods__["source_ap_index"] = _apdm.apdm_record_t_source_ap_index_set
    __swig_getmethods__["source_ap_index"] = _apdm.apdm_record_t_source_ap_index_get
    if _newclass:source_ap_index = _swig_property(_apdm.apdm_record_t_source_ap_index_get, _apdm.apdm_record_t_source_ap_index_set)
    __swig_setmethods__["accl_x_axis"] = _apdm.apdm_record_t_accl_x_axis_set
    __swig_getmethods__["accl_x_axis"] = _apdm.apdm_record_t_accl_x_axis_get
    if _newclass:accl_x_axis = _swig_property(_apdm.apdm_record_t_accl_x_axis_get, _apdm.apdm_record_t_accl_x_axis_set)
    __swig_setmethods__["accl_y_axis"] = _apdm.apdm_record_t_accl_y_axis_set
    __swig_getmethods__["accl_y_axis"] = _apdm.apdm_record_t_accl_y_axis_get
    if _newclass:accl_y_axis = _swig_property(_apdm.apdm_record_t_accl_y_axis_get, _apdm.apdm_record_t_accl_y_axis_set)
    __swig_setmethods__["accl_z_axis"] = _apdm.apdm_record_t_accl_z_axis_set
    __swig_getmethods__["accl_z_axis"] = _apdm.apdm_record_t_accl_z_axis_get
    if _newclass:accl_z_axis = _swig_property(_apdm.apdm_record_t_accl_z_axis_get, _apdm.apdm_record_t_accl_z_axis_set)
    __swig_setmethods__["accl_high_x_axis"] = _apdm.apdm_record_t_accl_high_x_axis_set
    __swig_getmethods__["accl_high_x_axis"] = _apdm.apdm_record_t_accl_high_x_axis_get
    if _newclass:accl_high_x_axis = _swig_property(_apdm.apdm_record_t_accl_high_x_axis_get, _apdm.apdm_record_t_accl_high_x_axis_set)
    __swig_setmethods__["accl_high_y_axis"] = _apdm.apdm_record_t_accl_high_y_axis_set
    __swig_getmethods__["accl_high_y_axis"] = _apdm.apdm_record_t_accl_high_y_axis_get
    if _newclass:accl_high_y_axis = _swig_property(_apdm.apdm_record_t_accl_high_y_axis_get, _apdm.apdm_record_t_accl_high_y_axis_set)
    __swig_setmethods__["accl_high_z_axis"] = _apdm.apdm_record_t_accl_high_z_axis_set
    __swig_getmethods__["accl_high_z_axis"] = _apdm.apdm_record_t_accl_high_z_axis_get
    if _newclass:accl_high_z_axis = _swig_property(_apdm.apdm_record_t_accl_high_z_axis_get, _apdm.apdm_record_t_accl_high_z_axis_set)
    __swig_setmethods__["accl_full_scale_mode"] = _apdm.apdm_record_t_accl_full_scale_mode_set
    __swig_getmethods__["accl_full_scale_mode"] = _apdm.apdm_record_t_accl_full_scale_mode_get
    if _newclass:accl_full_scale_mode = _swig_property(_apdm.apdm_record_t_accl_full_scale_mode_get, _apdm.apdm_record_t_accl_full_scale_mode_set)
    __swig_setmethods__["accl_isPopulated"] = _apdm.apdm_record_t_accl_isPopulated_set
    __swig_getmethods__["accl_isPopulated"] = _apdm.apdm_record_t_accl_isPopulated_get
    if _newclass:accl_isPopulated = _swig_property(_apdm.apdm_record_t_accl_isPopulated_get, _apdm.apdm_record_t_accl_isPopulated_set)
    __swig_setmethods__["gyro_x_axis"] = _apdm.apdm_record_t_gyro_x_axis_set
    __swig_getmethods__["gyro_x_axis"] = _apdm.apdm_record_t_gyro_x_axis_get
    if _newclass:gyro_x_axis = _swig_property(_apdm.apdm_record_t_gyro_x_axis_get, _apdm.apdm_record_t_gyro_x_axis_set)
    __swig_setmethods__["gyro_y_axis"] = _apdm.apdm_record_t_gyro_y_axis_set
    __swig_getmethods__["gyro_y_axis"] = _apdm.apdm_record_t_gyro_y_axis_get
    if _newclass:gyro_y_axis = _swig_property(_apdm.apdm_record_t_gyro_y_axis_get, _apdm.apdm_record_t_gyro_y_axis_set)
    __swig_setmethods__["gyro_z_axis"] = _apdm.apdm_record_t_gyro_z_axis_set
    __swig_getmethods__["gyro_z_axis"] = _apdm.apdm_record_t_gyro_z_axis_get
    if _newclass:gyro_z_axis = _swig_property(_apdm.apdm_record_t_gyro_z_axis_get, _apdm.apdm_record_t_gyro_z_axis_set)
    __swig_setmethods__["gyro_isPopulated"] = _apdm.apdm_record_t_gyro_isPopulated_set
    __swig_getmethods__["gyro_isPopulated"] = _apdm.apdm_record_t_gyro_isPopulated_get
    if _newclass:gyro_isPopulated = _swig_property(_apdm.apdm_record_t_gyro_isPopulated_get, _apdm.apdm_record_t_gyro_isPopulated_set)
    __swig_setmethods__["mag_x_axis"] = _apdm.apdm_record_t_mag_x_axis_set
    __swig_getmethods__["mag_x_axis"] = _apdm.apdm_record_t_mag_x_axis_get
    if _newclass:mag_x_axis = _swig_property(_apdm.apdm_record_t_mag_x_axis_get, _apdm.apdm_record_t_mag_x_axis_set)
    __swig_setmethods__["mag_y_axis"] = _apdm.apdm_record_t_mag_y_axis_set
    __swig_getmethods__["mag_y_axis"] = _apdm.apdm_record_t_mag_y_axis_get
    if _newclass:mag_y_axis = _swig_property(_apdm.apdm_record_t_mag_y_axis_get, _apdm.apdm_record_t_mag_y_axis_set)
    __swig_setmethods__["mag_z_axis"] = _apdm.apdm_record_t_mag_z_axis_set
    __swig_getmethods__["mag_z_axis"] = _apdm.apdm_record_t_mag_z_axis_get
    if _newclass:mag_z_axis = _swig_property(_apdm.apdm_record_t_mag_z_axis_get, _apdm.apdm_record_t_mag_z_axis_set)
    __swig_setmethods__["mag_common_axis"] = _apdm.apdm_record_t_mag_common_axis_set
    __swig_getmethods__["mag_common_axis"] = _apdm.apdm_record_t_mag_common_axis_get
    if _newclass:mag_common_axis = _swig_property(_apdm.apdm_record_t_mag_common_axis_get, _apdm.apdm_record_t_mag_common_axis_set)
    __swig_setmethods__["mag_isPopulated"] = _apdm.apdm_record_t_mag_isPopulated_set
    __swig_getmethods__["mag_isPopulated"] = _apdm.apdm_record_t_mag_isPopulated_get
    if _newclass:mag_isPopulated = _swig_property(_apdm.apdm_record_t_mag_isPopulated_get, _apdm.apdm_record_t_mag_isPopulated_set)
    __swig_setmethods__["flag_accel_enabled"] = _apdm.apdm_record_t_flag_accel_enabled_set
    __swig_getmethods__["flag_accel_enabled"] = _apdm.apdm_record_t_flag_accel_enabled_get
    if _newclass:flag_accel_enabled = _swig_property(_apdm.apdm_record_t_flag_accel_enabled_get, _apdm.apdm_record_t_flag_accel_enabled_set)
    __swig_setmethods__["flag_gyro_enabled"] = _apdm.apdm_record_t_flag_gyro_enabled_set
    __swig_getmethods__["flag_gyro_enabled"] = _apdm.apdm_record_t_flag_gyro_enabled_get
    if _newclass:flag_gyro_enabled = _swig_property(_apdm.apdm_record_t_flag_gyro_enabled_get, _apdm.apdm_record_t_flag_gyro_enabled_set)
    __swig_setmethods__["flag_mag_enabled"] = _apdm.apdm_record_t_flag_mag_enabled_set
    __swig_getmethods__["flag_mag_enabled"] = _apdm.apdm_record_t_flag_mag_enabled_get
    if _newclass:flag_mag_enabled = _swig_property(_apdm.apdm_record_t_flag_mag_enabled_get, _apdm.apdm_record_t_flag_mag_enabled_set)
    __swig_setmethods__["flag_full_scale_enabled"] = _apdm.apdm_record_t_flag_full_scale_enabled_set
    __swig_getmethods__["flag_full_scale_enabled"] = _apdm.apdm_record_t_flag_full_scale_enabled_get
    if _newclass:flag_full_scale_enabled = _swig_property(_apdm.apdm_record_t_flag_full_scale_enabled_get, _apdm.apdm_record_t_flag_full_scale_enabled_set)
    __swig_setmethods__["flag_sync_lock"] = _apdm.apdm_record_t_flag_sync_lock_set
    __swig_getmethods__["flag_sync_lock"] = _apdm.apdm_record_t_flag_sync_lock_get
    if _newclass:flag_sync_lock = _swig_property(_apdm.apdm_record_t_flag_sync_lock_get, _apdm.apdm_record_t_flag_sync_lock_set)
    __swig_setmethods__["flag_sync_reset"] = _apdm.apdm_record_t_flag_sync_reset_set
    __swig_getmethods__["flag_sync_reset"] = _apdm.apdm_record_t_flag_sync_reset_get
    if _newclass:flag_sync_reset = _swig_property(_apdm.apdm_record_t_flag_sync_reset_get, _apdm.apdm_record_t_flag_sync_reset_set)
    __swig_setmethods__["flag_temp_select"] = _apdm.apdm_record_t_flag_temp_select_set
    __swig_getmethods__["flag_temp_select"] = _apdm.apdm_record_t_flag_temp_select_get
    if _newclass:flag_temp_select = _swig_property(_apdm.apdm_record_t_flag_temp_select_get, _apdm.apdm_record_t_flag_temp_select_set)
    __swig_setmethods__["flags"] = _apdm.apdm_record_t_flags_set
    __swig_getmethods__["flags"] = _apdm.apdm_record_t_flags_get
    if _newclass:flags = _swig_property(_apdm.apdm_record_t_flags_get, _apdm.apdm_record_t_flags_set)
    __swig_setmethods__["gyro_temperature_sensor_selected"] = _apdm.apdm_record_t_gyro_temperature_sensor_selected_set
    __swig_getmethods__["gyro_temperature_sensor_selected"] = _apdm.apdm_record_t_gyro_temperature_sensor_selected_get
    if _newclass:gyro_temperature_sensor_selected = _swig_property(_apdm.apdm_record_t_gyro_temperature_sensor_selected_get, _apdm.apdm_record_t_gyro_temperature_sensor_selected_set)
    __swig_setmethods__["optional_data"] = _apdm.apdm_record_t_optional_data_set
    __swig_getmethods__["optional_data"] = _apdm.apdm_record_t_optional_data_get
    if _newclass:optional_data = _swig_property(_apdm.apdm_record_t_optional_data_get, _apdm.apdm_record_t_optional_data_set)
    __swig_setmethods__["opt_select"] = _apdm.apdm_record_t_opt_select_set
    __swig_getmethods__["opt_select"] = _apdm.apdm_record_t_opt_select_get
    if _newclass:opt_select = _swig_property(_apdm.apdm_record_t_opt_select_get, _apdm.apdm_record_t_opt_select_set)
    __swig_setmethods__["debug_data"] = _apdm.apdm_record_t_debug_data_set
    __swig_getmethods__["debug_data"] = _apdm.apdm_record_t_debug_data_get
    if _newclass:debug_data = _swig_property(_apdm.apdm_record_t_debug_data_get, _apdm.apdm_record_t_debug_data_set)
    __swig_setmethods__["debug_flags"] = _apdm.apdm_record_t_debug_flags_set
    __swig_getmethods__["debug_flags"] = _apdm.apdm_record_t_debug_flags_get
    if _newclass:debug_flags = _swig_property(_apdm.apdm_record_t_debug_flags_get, _apdm.apdm_record_t_debug_flags_set)
    __swig_setmethods__["temperature"] = _apdm.apdm_record_t_temperature_set
    __swig_getmethods__["temperature"] = _apdm.apdm_record_t_temperature_get
    if _newclass:temperature = _swig_property(_apdm.apdm_record_t_temperature_get, _apdm.apdm_record_t_temperature_set)
    __swig_setmethods__["temperature_average"] = _apdm.apdm_record_t_temperature_average_set
    __swig_getmethods__["temperature_average"] = _apdm.apdm_record_t_temperature_average_get
    if _newclass:temperature_average = _swig_property(_apdm.apdm_record_t_temperature_average_get, _apdm.apdm_record_t_temperature_average_set)
    __swig_setmethods__["temperature_diff"] = _apdm.apdm_record_t_temperature_diff_set
    __swig_getmethods__["temperature_diff"] = _apdm.apdm_record_t_temperature_diff_get
    if _newclass:temperature_diff = _swig_property(_apdm.apdm_record_t_temperature_diff_get, _apdm.apdm_record_t_temperature_diff_set)
    __swig_setmethods__["temperature_isPopulated"] = _apdm.apdm_record_t_temperature_isPopulated_set
    __swig_getmethods__["temperature_isPopulated"] = _apdm.apdm_record_t_temperature_isPopulated_get
    if _newclass:temperature_isPopulated = _swig_property(_apdm.apdm_record_t_temperature_isPopulated_get, _apdm.apdm_record_t_temperature_isPopulated_set)
    __swig_setmethods__["batt_voltage"] = _apdm.apdm_record_t_batt_voltage_set
    __swig_getmethods__["batt_voltage"] = _apdm.apdm_record_t_batt_voltage_get
    if _newclass:batt_voltage = _swig_property(_apdm.apdm_record_t_batt_voltage_get, _apdm.apdm_record_t_batt_voltage_set)
    __swig_setmethods__["batt_voltage_isPopulated"] = _apdm.apdm_record_t_batt_voltage_isPopulated_set
    __swig_getmethods__["batt_voltage_isPopulated"] = _apdm.apdm_record_t_batt_voltage_isPopulated_get
    if _newclass:batt_voltage_isPopulated = _swig_property(_apdm.apdm_record_t_batt_voltage_isPopulated_get, _apdm.apdm_record_t_batt_voltage_isPopulated_set)
    __swig_setmethods__["device_info_serial_number"] = _apdm.apdm_record_t_device_info_serial_number_set
    __swig_getmethods__["device_info_serial_number"] = _apdm.apdm_record_t_device_info_serial_number_get
    if _newclass:device_info_serial_number = _swig_property(_apdm.apdm_record_t_device_info_serial_number_get, _apdm.apdm_record_t_device_info_serial_number_set)
    __swig_setmethods__["device_info_wireless_channel_id"] = _apdm.apdm_record_t_device_info_wireless_channel_id_set
    __swig_getmethods__["device_info_wireless_channel_id"] = _apdm.apdm_record_t_device_info_wireless_channel_id_get
    if _newclass:device_info_wireless_channel_id = _swig_property(_apdm.apdm_record_t_device_info_wireless_channel_id_get, _apdm.apdm_record_t_device_info_wireless_channel_id_set)
    __swig_setmethods__["device_info_wireless_address"] = _apdm.apdm_record_t_device_info_wireless_address_set
    __swig_getmethods__["device_info_wireless_address"] = _apdm.apdm_record_t_device_info_wireless_address_get
    if _newclass:device_info_wireless_address = _swig_property(_apdm.apdm_record_t_device_info_wireless_address_get, _apdm.apdm_record_t_device_info_wireless_address_set)
    __swig_setmethods__["device_info_isPopulated"] = _apdm.apdm_record_t_device_info_isPopulated_set
    __swig_getmethods__["device_info_isPopulated"] = _apdm.apdm_record_t_device_info_isPopulated_get
    if _newclass:device_info_isPopulated = _swig_property(_apdm.apdm_record_t_device_info_isPopulated_get, _apdm.apdm_record_t_device_info_isPopulated_set)
    __swig_setmethods__["button_status"] = _apdm.apdm_record_t_button_status_set
    __swig_getmethods__["button_status"] = _apdm.apdm_record_t_button_status_get
    if _newclass:button_status = _swig_property(_apdm.apdm_record_t_button_status_get, _apdm.apdm_record_t_button_status_set)
    __swig_setmethods__["tag_data"] = _apdm.apdm_record_t_tag_data_set
    __swig_getmethods__["tag_data"] = _apdm.apdm_record_t_tag_data_get
    if _newclass:tag_data = _swig_property(_apdm.apdm_record_t_tag_data_get, _apdm.apdm_record_t_tag_data_set)
    __swig_setmethods__["tag_data_isPopulated"] = _apdm.apdm_record_t_tag_data_isPopulated_set
    __swig_getmethods__["tag_data_isPopulated"] = _apdm.apdm_record_t_tag_data_isPopulated_get
    if _newclass:tag_data_isPopulated = _swig_property(_apdm.apdm_record_t_tag_data_isPopulated_get, _apdm.apdm_record_t_tag_data_isPopulated_set)
    __swig_setmethods__["sensor_version"] = _apdm.apdm_record_t_sensor_version_set
    __swig_getmethods__["sensor_version"] = _apdm.apdm_record_t_sensor_version_get
    if _newclass:sensor_version = _swig_property(_apdm.apdm_record_t_sensor_version_get, _apdm.apdm_record_t_sensor_version_set)
    __swig_setmethods__["accl_x_axis_si"] = _apdm.apdm_record_t_accl_x_axis_si_set
    __swig_getmethods__["accl_x_axis_si"] = _apdm.apdm_record_t_accl_x_axis_si_get
    if _newclass:accl_x_axis_si = _swig_property(_apdm.apdm_record_t_accl_x_axis_si_get, _apdm.apdm_record_t_accl_x_axis_si_set)
    __swig_setmethods__["accl_y_axis_si"] = _apdm.apdm_record_t_accl_y_axis_si_set
    __swig_getmethods__["accl_y_axis_si"] = _apdm.apdm_record_t_accl_y_axis_si_get
    if _newclass:accl_y_axis_si = _swig_property(_apdm.apdm_record_t_accl_y_axis_si_get, _apdm.apdm_record_t_accl_y_axis_si_set)
    __swig_setmethods__["accl_z_axis_si"] = _apdm.apdm_record_t_accl_z_axis_si_set
    __swig_getmethods__["accl_z_axis_si"] = _apdm.apdm_record_t_accl_z_axis_si_get
    if _newclass:accl_z_axis_si = _swig_property(_apdm.apdm_record_t_accl_z_axis_si_get, _apdm.apdm_record_t_accl_z_axis_si_set)
    __swig_setmethods__["gyro_x_axis_si"] = _apdm.apdm_record_t_gyro_x_axis_si_set
    __swig_getmethods__["gyro_x_axis_si"] = _apdm.apdm_record_t_gyro_x_axis_si_get
    if _newclass:gyro_x_axis_si = _swig_property(_apdm.apdm_record_t_gyro_x_axis_si_get, _apdm.apdm_record_t_gyro_x_axis_si_set)
    __swig_setmethods__["gyro_y_axis_si"] = _apdm.apdm_record_t_gyro_y_axis_si_set
    __swig_getmethods__["gyro_y_axis_si"] = _apdm.apdm_record_t_gyro_y_axis_si_get
    if _newclass:gyro_y_axis_si = _swig_property(_apdm.apdm_record_t_gyro_y_axis_si_get, _apdm.apdm_record_t_gyro_y_axis_si_set)
    __swig_setmethods__["gyro_z_axis_si"] = _apdm.apdm_record_t_gyro_z_axis_si_set
    __swig_getmethods__["gyro_z_axis_si"] = _apdm.apdm_record_t_gyro_z_axis_si_get
    if _newclass:gyro_z_axis_si = _swig_property(_apdm.apdm_record_t_gyro_z_axis_si_get, _apdm.apdm_record_t_gyro_z_axis_si_set)
    __swig_setmethods__["mag_x_axis_si"] = _apdm.apdm_record_t_mag_x_axis_si_set
    __swig_getmethods__["mag_x_axis_si"] = _apdm.apdm_record_t_mag_x_axis_si_get
    if _newclass:mag_x_axis_si = _swig_property(_apdm.apdm_record_t_mag_x_axis_si_get, _apdm.apdm_record_t_mag_x_axis_si_set)
    __swig_setmethods__["mag_y_axis_si"] = _apdm.apdm_record_t_mag_y_axis_si_set
    __swig_getmethods__["mag_y_axis_si"] = _apdm.apdm_record_t_mag_y_axis_si_get
    if _newclass:mag_y_axis_si = _swig_property(_apdm.apdm_record_t_mag_y_axis_si_get, _apdm.apdm_record_t_mag_y_axis_si_set)
    __swig_setmethods__["mag_z_axis_si"] = _apdm.apdm_record_t_mag_z_axis_si_set
    __swig_getmethods__["mag_z_axis_si"] = _apdm.apdm_record_t_mag_z_axis_si_get
    if _newclass:mag_z_axis_si = _swig_property(_apdm.apdm_record_t_mag_z_axis_si_get, _apdm.apdm_record_t_mag_z_axis_si_set)
    __swig_setmethods__["gyro_x_axis_filtered"] = _apdm.apdm_record_t_gyro_x_axis_filtered_set
    __swig_getmethods__["gyro_x_axis_filtered"] = _apdm.apdm_record_t_gyro_x_axis_filtered_get
    if _newclass:gyro_x_axis_filtered = _swig_property(_apdm.apdm_record_t_gyro_x_axis_filtered_get, _apdm.apdm_record_t_gyro_x_axis_filtered_set)
    __swig_setmethods__["gyro_y_axis_filtered"] = _apdm.apdm_record_t_gyro_y_axis_filtered_set
    __swig_getmethods__["gyro_y_axis_filtered"] = _apdm.apdm_record_t_gyro_y_axis_filtered_get
    if _newclass:gyro_y_axis_filtered = _swig_property(_apdm.apdm_record_t_gyro_y_axis_filtered_get, _apdm.apdm_record_t_gyro_y_axis_filtered_set)
    __swig_setmethods__["gyro_z_axis_filtered"] = _apdm.apdm_record_t_gyro_z_axis_filtered_set
    __swig_getmethods__["gyro_z_axis_filtered"] = _apdm.apdm_record_t_gyro_z_axis_filtered_get
    if _newclass:gyro_z_axis_filtered = _swig_property(_apdm.apdm_record_t_gyro_z_axis_filtered_get, _apdm.apdm_record_t_gyro_z_axis_filtered_set)
    __swig_setmethods__["orientation_quaternion0"] = _apdm.apdm_record_t_orientation_quaternion0_set
    __swig_getmethods__["orientation_quaternion0"] = _apdm.apdm_record_t_orientation_quaternion0_get
    if _newclass:orientation_quaternion0 = _swig_property(_apdm.apdm_record_t_orientation_quaternion0_get, _apdm.apdm_record_t_orientation_quaternion0_set)
    __swig_setmethods__["orientation_quaternion1"] = _apdm.apdm_record_t_orientation_quaternion1_set
    __swig_getmethods__["orientation_quaternion1"] = _apdm.apdm_record_t_orientation_quaternion1_get
    if _newclass:orientation_quaternion1 = _swig_property(_apdm.apdm_record_t_orientation_quaternion1_get, _apdm.apdm_record_t_orientation_quaternion1_set)
    __swig_setmethods__["orientation_quaternion2"] = _apdm.apdm_record_t_orientation_quaternion2_set
    __swig_getmethods__["orientation_quaternion2"] = _apdm.apdm_record_t_orientation_quaternion2_get
    if _newclass:orientation_quaternion2 = _swig_property(_apdm.apdm_record_t_orientation_quaternion2_get, _apdm.apdm_record_t_orientation_quaternion2_set)
    __swig_setmethods__["orientation_quaternion3"] = _apdm.apdm_record_t_orientation_quaternion3_set
    __swig_getmethods__["orientation_quaternion3"] = _apdm.apdm_record_t_orientation_quaternion3_get
    if _newclass:orientation_quaternion3 = _swig_property(_apdm.apdm_record_t_orientation_quaternion3_get, _apdm.apdm_record_t_orientation_quaternion3_set)
    __swig_setmethods__["temperature_si"] = _apdm.apdm_record_t_temperature_si_set
    __swig_getmethods__["temperature_si"] = _apdm.apdm_record_t_temperature_si_get
    if _newclass:temperature_si = _swig_property(_apdm.apdm_record_t_temperature_si_get, _apdm.apdm_record_t_temperature_si_set)
    __swig_setmethods__["temperature_derivative_si"] = _apdm.apdm_record_t_temperature_derivative_si_set
    __swig_getmethods__["temperature_derivative_si"] = _apdm.apdm_record_t_temperature_derivative_si_get
    if _newclass:temperature_derivative_si = _swig_property(_apdm.apdm_record_t_temperature_derivative_si_get, _apdm.apdm_record_t_temperature_derivative_si_set)
    __swig_setmethods__["pressure"] = _apdm.apdm_record_t_pressure_set
    __swig_getmethods__["pressure"] = _apdm.apdm_record_t_pressure_get
    if _newclass:pressure = _swig_property(_apdm.apdm_record_t_pressure_get, _apdm.apdm_record_t_pressure_set)
    __swig_setmethods__["pressure_si"] = _apdm.apdm_record_t_pressure_si_set
    __swig_getmethods__["pressure_si"] = _apdm.apdm_record_t_pressure_si_get
    if _newclass:pressure_si = _swig_property(_apdm.apdm_record_t_pressure_si_get, _apdm.apdm_record_t_pressure_si_set)
    __swig_setmethods__["pressure_isPopulated"] = _apdm.apdm_record_t_pressure_isPopulated_set
    __swig_getmethods__["pressure_isPopulated"] = _apdm.apdm_record_t_pressure_isPopulated_get
    if _newclass:pressure_isPopulated = _swig_property(_apdm.apdm_record_t_pressure_isPopulated_get, _apdm.apdm_record_t_pressure_isPopulated_set)
    __swig_setmethods__["accl_low_x_axis_si"] = _apdm.apdm_record_t_accl_low_x_axis_si_set
    __swig_getmethods__["accl_low_x_axis_si"] = _apdm.apdm_record_t_accl_low_x_axis_si_get
    if _newclass:accl_low_x_axis_si = _swig_property(_apdm.apdm_record_t_accl_low_x_axis_si_get, _apdm.apdm_record_t_accl_low_x_axis_si_set)
    __swig_setmethods__["accl_low_y_axis_si"] = _apdm.apdm_record_t_accl_low_y_axis_si_set
    __swig_getmethods__["accl_low_y_axis_si"] = _apdm.apdm_record_t_accl_low_y_axis_si_get
    if _newclass:accl_low_y_axis_si = _swig_property(_apdm.apdm_record_t_accl_low_y_axis_si_get, _apdm.apdm_record_t_accl_low_y_axis_si_set)
    __swig_setmethods__["accl_low_z_axis_si"] = _apdm.apdm_record_t_accl_low_z_axis_si_set
    __swig_getmethods__["accl_low_z_axis_si"] = _apdm.apdm_record_t_accl_low_z_axis_si_get
    if _newclass:accl_low_z_axis_si = _swig_property(_apdm.apdm_record_t_accl_low_z_axis_si_get, _apdm.apdm_record_t_accl_low_z_axis_si_set)
    __swig_setmethods__["accl_high_x_axis_si"] = _apdm.apdm_record_t_accl_high_x_axis_si_set
    __swig_getmethods__["accl_high_x_axis_si"] = _apdm.apdm_record_t_accl_high_x_axis_si_get
    if _newclass:accl_high_x_axis_si = _swig_property(_apdm.apdm_record_t_accl_high_x_axis_si_get, _apdm.apdm_record_t_accl_high_x_axis_si_set)
    __swig_setmethods__["accl_high_y_axis_si"] = _apdm.apdm_record_t_accl_high_y_axis_si_set
    __swig_getmethods__["accl_high_y_axis_si"] = _apdm.apdm_record_t_accl_high_y_axis_si_get
    if _newclass:accl_high_y_axis_si = _swig_property(_apdm.apdm_record_t_accl_high_y_axis_si_get, _apdm.apdm_record_t_accl_high_y_axis_si_set)
    __swig_setmethods__["accl_high_z_axis_si"] = _apdm.apdm_record_t_accl_high_z_axis_si_set
    __swig_getmethods__["accl_high_z_axis_si"] = _apdm.apdm_record_t_accl_high_z_axis_si_get
    if _newclass:accl_high_z_axis_si = _swig_property(_apdm.apdm_record_t_accl_high_z_axis_si_get, _apdm.apdm_record_t_accl_high_z_axis_si_set)
    __swig_setmethods__["battery_level"] = _apdm.apdm_record_t_battery_level_set
    __swig_getmethods__["battery_level"] = _apdm.apdm_record_t_battery_level_get
    if _newclass:battery_level = _swig_property(_apdm.apdm_record_t_battery_level_get, _apdm.apdm_record_t_battery_level_set)
    __swig_setmethods__["data_status"] = _apdm.apdm_record_t_data_status_set
    __swig_getmethods__["data_status"] = _apdm.apdm_record_t_data_status_get
    if _newclass:data_status = _swig_property(_apdm.apdm_record_t_data_status_get, _apdm.apdm_record_t_data_status_set)
    def __init__(self): 
        """__init__(self) -> apdm_record_t"""
        this = _apdm.new_apdm_record_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_record_t
    __del__ = lambda self : None;
apdm_record_t_swigregister = _apdm.apdm_record_t_swigregister
apdm_record_t_swigregister(apdm_record_t)

class apdm_ranging_sample_t(_object):
    """Proxy of C apdm_ranging_sample_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_ranging_sample_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_ranging_sample_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sync_val64"] = _apdm.apdm_ranging_sample_t_sync_val64_set
    __swig_getmethods__["sync_val64"] = _apdm.apdm_ranging_sample_t_sync_val64_get
    if _newclass:sync_val64 = _swig_property(_apdm.apdm_ranging_sample_t_sync_val64_get, _apdm.apdm_ranging_sample_t_sync_val64_set)
    __swig_setmethods__["source_ap_index"] = _apdm.apdm_ranging_sample_t_source_ap_index_set
    __swig_getmethods__["source_ap_index"] = _apdm.apdm_ranging_sample_t_source_ap_index_get
    if _newclass:source_ap_index = _swig_property(_apdm.apdm_ranging_sample_t_source_ap_index_get, _apdm.apdm_ranging_sample_t_source_ap_index_set)
    __swig_setmethods__["sync_epoch_ms_offset"] = _apdm.apdm_ranging_sample_t_sync_epoch_ms_offset_set
    __swig_getmethods__["sync_epoch_ms_offset"] = _apdm.apdm_ranging_sample_t_sync_epoch_ms_offset_get
    if _newclass:sync_epoch_ms_offset = _swig_property(_apdm.apdm_ranging_sample_t_sync_epoch_ms_offset_get, _apdm.apdm_ranging_sample_t_sync_epoch_ms_offset_set)
    __swig_setmethods__["wireless_sync_time_us"] = _apdm.apdm_ranging_sample_t_wireless_sync_time_us_set
    __swig_getmethods__["wireless_sync_time_us"] = _apdm.apdm_ranging_sample_t_wireless_sync_time_us_get
    if _newclass:wireless_sync_time_us = _swig_property(_apdm.apdm_ranging_sample_t_wireless_sync_time_us_get, _apdm.apdm_ranging_sample_t_wireless_sync_time_us_set)
    __swig_setmethods__["microcontroller_time_us"] = _apdm.apdm_ranging_sample_t_microcontroller_time_us_set
    __swig_getmethods__["microcontroller_time_us"] = _apdm.apdm_ranging_sample_t_microcontroller_time_us_get
    if _newclass:microcontroller_time_us = _swig_property(_apdm.apdm_ranging_sample_t_microcontroller_time_us_get, _apdm.apdm_ranging_sample_t_microcontroller_time_us_set)
    __swig_setmethods__["flags"] = _apdm.apdm_ranging_sample_t_flags_set
    __swig_getmethods__["flags"] = _apdm.apdm_ranging_sample_t_flags_get
    if _newclass:flags = _swig_property(_apdm.apdm_ranging_sample_t_flags_get, _apdm.apdm_ranging_sample_t_flags_set)
    __swig_setmethods__["stm32_time_us"] = _apdm.apdm_ranging_sample_t_stm32_time_us_set
    __swig_getmethods__["stm32_time_us"] = _apdm.apdm_ranging_sample_t_stm32_time_us_get
    if _newclass:stm32_time_us = _swig_property(_apdm.apdm_ranging_sample_t_stm32_time_us_get, _apdm.apdm_ranging_sample_t_stm32_time_us_set)
    __swig_setmethods__["source_device_id"] = _apdm.apdm_ranging_sample_t_source_device_id_set
    __swig_getmethods__["source_device_id"] = _apdm.apdm_ranging_sample_t_source_device_id_get
    if _newclass:source_device_id = _swig_property(_apdm.apdm_ranging_sample_t_source_device_id_get, _apdm.apdm_ranging_sample_t_source_device_id_set)
    __swig_setmethods__["remote_device_id"] = _apdm.apdm_ranging_sample_t_remote_device_id_set
    __swig_getmethods__["remote_device_id"] = _apdm.apdm_ranging_sample_t_remote_device_id_get
    if _newclass:remote_device_id = _swig_property(_apdm.apdm_ranging_sample_t_remote_device_id_get, _apdm.apdm_ranging_sample_t_remote_device_id_set)
    __swig_setmethods__["anchor_timestamp"] = _apdm.apdm_ranging_sample_t_anchor_timestamp_set
    __swig_getmethods__["anchor_timestamp"] = _apdm.apdm_ranging_sample_t_anchor_timestamp_get
    if _newclass:anchor_timestamp = _swig_property(_apdm.apdm_ranging_sample_t_anchor_timestamp_get, _apdm.apdm_ranging_sample_t_anchor_timestamp_set)
    def __init__(self): 
        """__init__(self) -> apdm_ranging_sample_t"""
        this = _apdm.new_apdm_ranging_sample_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_ranging_sample_t
    __del__ = lambda self : None;
apdm_ranging_sample_t_swigregister = _apdm.apdm_ranging_sample_t_swigregister
apdm_ranging_sample_t_swigregister(apdm_ranging_sample_t)

class apdm_external_sync_data_t(_object):
    """Proxy of C apdm_external_sync_data_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_external_sync_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_external_sync_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _apdm.apdm_external_sync_data_t_data_set
    __swig_getmethods__["data"] = _apdm.apdm_external_sync_data_t_data_get
    if _newclass:data = _swig_property(_apdm.apdm_external_sync_data_t_data_get, _apdm.apdm_external_sync_data_t_data_set)
    __swig_setmethods__["data_type"] = _apdm.apdm_external_sync_data_t_data_type_set
    __swig_getmethods__["data_type"] = _apdm.apdm_external_sync_data_t_data_type_get
    if _newclass:data_type = _swig_property(_apdm.apdm_external_sync_data_t_data_type_get, _apdm.apdm_external_sync_data_t_data_type_set)
    __swig_setmethods__["sync_value"] = _apdm.apdm_external_sync_data_t_sync_value_set
    __swig_getmethods__["sync_value"] = _apdm.apdm_external_sync_data_t_sync_value_get
    if _newclass:sync_value = _swig_property(_apdm.apdm_external_sync_data_t_sync_value_get, _apdm.apdm_external_sync_data_t_sync_value_set)
    __swig_setmethods__["sync_value_v2"] = _apdm.apdm_external_sync_data_t_sync_value_v2_set
    __swig_getmethods__["sync_value_v2"] = _apdm.apdm_external_sync_data_t_sync_value_v2_get
    if _newclass:sync_value_v2 = _swig_property(_apdm.apdm_external_sync_data_t_sync_value_v2_get, _apdm.apdm_external_sync_data_t_sync_value_v2_set)
    __swig_setmethods__["ap_id"] = _apdm.apdm_external_sync_data_t_ap_id_set
    __swig_getmethods__["ap_id"] = _apdm.apdm_external_sync_data_t_ap_id_get
    if _newclass:ap_id = _swig_property(_apdm.apdm_external_sync_data_t_ap_id_get, _apdm.apdm_external_sync_data_t_ap_id_set)
    __swig_setmethods__["v2_pin"] = _apdm.apdm_external_sync_data_t_v2_pin_set
    __swig_getmethods__["v2_pin"] = _apdm.apdm_external_sync_data_t_v2_pin_get
    if _newclass:v2_pin = _swig_property(_apdm.apdm_external_sync_data_t_v2_pin_get, _apdm.apdm_external_sync_data_t_v2_pin_set)
    def __init__(self): 
        """__init__(self) -> apdm_external_sync_data_t"""
        this = _apdm.new_apdm_external_sync_data_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_external_sync_data_t
    __del__ = lambda self : None;
apdm_external_sync_data_t_swigregister = _apdm.apdm_external_sync_data_t_swigregister
apdm_external_sync_data_t_swigregister(apdm_external_sync_data_t)

class apdm_mag_step_response_state_t(_object):
    """Proxy of C apdm_mag_step_response_state_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_mag_step_response_state_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_mag_step_response_state_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _apdm.apdm_mag_step_response_state_t_state_set
    __swig_getmethods__["state"] = _apdm.apdm_mag_step_response_state_t_state_get
    if _newclass:state = _swig_property(_apdm.apdm_mag_step_response_state_t_state_get, _apdm.apdm_mag_step_response_state_t_state_set)
    __swig_setmethods__["state_transition_matrix"] = _apdm.apdm_mag_step_response_state_t_state_transition_matrix_set
    __swig_getmethods__["state_transition_matrix"] = _apdm.apdm_mag_step_response_state_t_state_transition_matrix_get
    if _newclass:state_transition_matrix = _swig_property(_apdm.apdm_mag_step_response_state_t_state_transition_matrix_get, _apdm.apdm_mag_step_response_state_t_state_transition_matrix_set)
    __swig_setmethods__["process_noise_matrix"] = _apdm.apdm_mag_step_response_state_t_process_noise_matrix_set
    __swig_getmethods__["process_noise_matrix"] = _apdm.apdm_mag_step_response_state_t_process_noise_matrix_get
    if _newclass:process_noise_matrix = _swig_property(_apdm.apdm_mag_step_response_state_t_process_noise_matrix_get, _apdm.apdm_mag_step_response_state_t_process_noise_matrix_set)
    __swig_setmethods__["measurement"] = _apdm.apdm_mag_step_response_state_t_measurement_set
    __swig_getmethods__["measurement"] = _apdm.apdm_mag_step_response_state_t_measurement_get
    if _newclass:measurement = _swig_property(_apdm.apdm_mag_step_response_state_t_measurement_get, _apdm.apdm_mag_step_response_state_t_measurement_set)
    __swig_setmethods__["measurement_matrix"] = _apdm.apdm_mag_step_response_state_t_measurement_matrix_set
    __swig_getmethods__["measurement_matrix"] = _apdm.apdm_mag_step_response_state_t_measurement_matrix_get
    if _newclass:measurement_matrix = _swig_property(_apdm.apdm_mag_step_response_state_t_measurement_matrix_get, _apdm.apdm_mag_step_response_state_t_measurement_matrix_set)
    __swig_setmethods__["measurement_noise_matrix"] = _apdm.apdm_mag_step_response_state_t_measurement_noise_matrix_set
    __swig_getmethods__["measurement_noise_matrix"] = _apdm.apdm_mag_step_response_state_t_measurement_noise_matrix_get
    if _newclass:measurement_noise_matrix = _swig_property(_apdm.apdm_mag_step_response_state_t_measurement_noise_matrix_get, _apdm.apdm_mag_step_response_state_t_measurement_noise_matrix_set)
    __swig_setmethods__["error_covariance_matrix"] = _apdm.apdm_mag_step_response_state_t_error_covariance_matrix_set
    __swig_getmethods__["error_covariance_matrix"] = _apdm.apdm_mag_step_response_state_t_error_covariance_matrix_get
    if _newclass:error_covariance_matrix = _swig_property(_apdm.apdm_mag_step_response_state_t_error_covariance_matrix_get, _apdm.apdm_mag_step_response_state_t_error_covariance_matrix_set)
    __swig_setmethods__["filtered_measurement"] = _apdm.apdm_mag_step_response_state_t_filtered_measurement_set
    __swig_getmethods__["filtered_measurement"] = _apdm.apdm_mag_step_response_state_t_filtered_measurement_get
    if _newclass:filtered_measurement = _swig_property(_apdm.apdm_mag_step_response_state_t_filtered_measurement_get, _apdm.apdm_mag_step_response_state_t_filtered_measurement_set)
    def __init__(self): 
        """__init__(self) -> apdm_mag_step_response_state_t"""
        this = _apdm.new_apdm_mag_step_response_state_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_mag_step_response_state_t
    __del__ = lambda self : None;
apdm_mag_step_response_state_t_swigregister = _apdm.apdm_mag_step_response_state_t_swigregister
apdm_mag_step_response_state_t_swigregister(apdm_mag_step_response_state_t)

class apdm_mag_dechop_state_t(_object):
    """Proxy of C apdm_mag_dechop_state_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_mag_dechop_state_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_mag_dechop_state_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _apdm.apdm_mag_dechop_state_t_state_set
    __swig_getmethods__["state"] = _apdm.apdm_mag_dechop_state_t_state_get
    if _newclass:state = _swig_property(_apdm.apdm_mag_dechop_state_t_state_get, _apdm.apdm_mag_dechop_state_t_state_set)
    __swig_setmethods__["state_transition_matrix"] = _apdm.apdm_mag_dechop_state_t_state_transition_matrix_set
    __swig_getmethods__["state_transition_matrix"] = _apdm.apdm_mag_dechop_state_t_state_transition_matrix_get
    if _newclass:state_transition_matrix = _swig_property(_apdm.apdm_mag_dechop_state_t_state_transition_matrix_get, _apdm.apdm_mag_dechop_state_t_state_transition_matrix_set)
    __swig_setmethods__["process_noise_matrix"] = _apdm.apdm_mag_dechop_state_t_process_noise_matrix_set
    __swig_getmethods__["process_noise_matrix"] = _apdm.apdm_mag_dechop_state_t_process_noise_matrix_get
    if _newclass:process_noise_matrix = _swig_property(_apdm.apdm_mag_dechop_state_t_process_noise_matrix_get, _apdm.apdm_mag_dechop_state_t_process_noise_matrix_set)
    __swig_setmethods__["measurement"] = _apdm.apdm_mag_dechop_state_t_measurement_set
    __swig_getmethods__["measurement"] = _apdm.apdm_mag_dechop_state_t_measurement_get
    if _newclass:measurement = _swig_property(_apdm.apdm_mag_dechop_state_t_measurement_get, _apdm.apdm_mag_dechop_state_t_measurement_set)
    __swig_setmethods__["measurement_matrix"] = _apdm.apdm_mag_dechop_state_t_measurement_matrix_set
    __swig_getmethods__["measurement_matrix"] = _apdm.apdm_mag_dechop_state_t_measurement_matrix_get
    if _newclass:measurement_matrix = _swig_property(_apdm.apdm_mag_dechop_state_t_measurement_matrix_get, _apdm.apdm_mag_dechop_state_t_measurement_matrix_set)
    __swig_setmethods__["measurement_noise_matrix"] = _apdm.apdm_mag_dechop_state_t_measurement_noise_matrix_set
    __swig_getmethods__["measurement_noise_matrix"] = _apdm.apdm_mag_dechop_state_t_measurement_noise_matrix_get
    if _newclass:measurement_noise_matrix = _swig_property(_apdm.apdm_mag_dechop_state_t_measurement_noise_matrix_get, _apdm.apdm_mag_dechop_state_t_measurement_noise_matrix_set)
    __swig_setmethods__["error_covariance_matrix"] = _apdm.apdm_mag_dechop_state_t_error_covariance_matrix_set
    __swig_getmethods__["error_covariance_matrix"] = _apdm.apdm_mag_dechop_state_t_error_covariance_matrix_get
    if _newclass:error_covariance_matrix = _swig_property(_apdm.apdm_mag_dechop_state_t_error_covariance_matrix_get, _apdm.apdm_mag_dechop_state_t_error_covariance_matrix_set)
    __swig_setmethods__["filtered_measurement"] = _apdm.apdm_mag_dechop_state_t_filtered_measurement_set
    __swig_getmethods__["filtered_measurement"] = _apdm.apdm_mag_dechop_state_t_filtered_measurement_get
    if _newclass:filtered_measurement = _swig_property(_apdm.apdm_mag_dechop_state_t_filtered_measurement_get, _apdm.apdm_mag_dechop_state_t_filtered_measurement_set)
    __swig_setmethods__["stepResponse"] = _apdm.apdm_mag_dechop_state_t_stepResponse_set
    __swig_getmethods__["stepResponse"] = _apdm.apdm_mag_dechop_state_t_stepResponse_get
    if _newclass:stepResponse = _swig_property(_apdm.apdm_mag_dechop_state_t_stepResponse_get, _apdm.apdm_mag_dechop_state_t_stepResponse_set)
    __swig_setmethods__["stepResponseEstimate"] = _apdm.apdm_mag_dechop_state_t_stepResponseEstimate_set
    __swig_getmethods__["stepResponseEstimate"] = _apdm.apdm_mag_dechop_state_t_stepResponseEstimate_get
    if _newclass:stepResponseEstimate = _swig_property(_apdm.apdm_mag_dechop_state_t_stepResponseEstimate_get, _apdm.apdm_mag_dechop_state_t_stepResponseEstimate_set)
    __swig_setmethods__["set_reset_flag"] = _apdm.apdm_mag_dechop_state_t_set_reset_flag_set
    __swig_getmethods__["set_reset_flag"] = _apdm.apdm_mag_dechop_state_t_set_reset_flag_get
    if _newclass:set_reset_flag = _swig_property(_apdm.apdm_mag_dechop_state_t_set_reset_flag_get, _apdm.apdm_mag_dechop_state_t_set_reset_flag_set)
    __swig_setmethods__["polarity"] = _apdm.apdm_mag_dechop_state_t_polarity_set
    __swig_getmethods__["polarity"] = _apdm.apdm_mag_dechop_state_t_polarity_get
    if _newclass:polarity = _swig_property(_apdm.apdm_mag_dechop_state_t_polarity_get, _apdm.apdm_mag_dechop_state_t_polarity_set)
    __swig_setmethods__["iSample"] = _apdm.apdm_mag_dechop_state_t_iSample_set
    __swig_getmethods__["iSample"] = _apdm.apdm_mag_dechop_state_t_iSample_get
    if _newclass:iSample = _swig_property(_apdm.apdm_mag_dechop_state_t_iSample_get, _apdm.apdm_mag_dechop_state_t_iSample_set)
    def __init__(self): 
        """__init__(self) -> apdm_mag_dechop_state_t"""
        this = _apdm.new_apdm_mag_dechop_state_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_mag_dechop_state_t
    __del__ = lambda self : None;
apdm_mag_dechop_state_t_swigregister = _apdm.apdm_mag_dechop_state_t_swigregister
apdm_mag_dechop_state_t_swigregister(apdm_mag_dechop_state_t)

class calibration_v4_t(_object):
    """Proxy of C calibration_v4_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibration_v4_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibration_v4_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["accl_x_bias"] = _apdm.calibration_v4_t_accl_x_bias_set
    __swig_getmethods__["accl_x_bias"] = _apdm.calibration_v4_t_accl_x_bias_get
    if _newclass:accl_x_bias = _swig_property(_apdm.calibration_v4_t_accl_x_bias_get, _apdm.calibration_v4_t_accl_x_bias_set)
    __swig_setmethods__["accl_y_bias"] = _apdm.calibration_v4_t_accl_y_bias_set
    __swig_getmethods__["accl_y_bias"] = _apdm.calibration_v4_t_accl_y_bias_get
    if _newclass:accl_y_bias = _swig_property(_apdm.calibration_v4_t_accl_y_bias_get, _apdm.calibration_v4_t_accl_y_bias_set)
    __swig_setmethods__["accl_z_bias"] = _apdm.calibration_v4_t_accl_z_bias_set
    __swig_getmethods__["accl_z_bias"] = _apdm.calibration_v4_t_accl_z_bias_get
    if _newclass:accl_z_bias = _swig_property(_apdm.calibration_v4_t_accl_z_bias_get, _apdm.calibration_v4_t_accl_z_bias_set)
    __swig_setmethods__["accl_x_bias_temp"] = _apdm.calibration_v4_t_accl_x_bias_temp_set
    __swig_getmethods__["accl_x_bias_temp"] = _apdm.calibration_v4_t_accl_x_bias_temp_get
    if _newclass:accl_x_bias_temp = _swig_property(_apdm.calibration_v4_t_accl_x_bias_temp_get, _apdm.calibration_v4_t_accl_x_bias_temp_set)
    __swig_setmethods__["accl_y_bias_temp"] = _apdm.calibration_v4_t_accl_y_bias_temp_set
    __swig_getmethods__["accl_y_bias_temp"] = _apdm.calibration_v4_t_accl_y_bias_temp_get
    if _newclass:accl_y_bias_temp = _swig_property(_apdm.calibration_v4_t_accl_y_bias_temp_get, _apdm.calibration_v4_t_accl_y_bias_temp_set)
    __swig_setmethods__["accl_z_bias_temp"] = _apdm.calibration_v4_t_accl_z_bias_temp_set
    __swig_getmethods__["accl_z_bias_temp"] = _apdm.calibration_v4_t_accl_z_bias_temp_get
    if _newclass:accl_z_bias_temp = _swig_property(_apdm.calibration_v4_t_accl_z_bias_temp_get, _apdm.calibration_v4_t_accl_z_bias_temp_set)
    __swig_setmethods__["accl_z_bias_dtemp"] = _apdm.calibration_v4_t_accl_z_bias_dtemp_set
    __swig_getmethods__["accl_z_bias_dtemp"] = _apdm.calibration_v4_t_accl_z_bias_dtemp_get
    if _newclass:accl_z_bias_dtemp = _swig_property(_apdm.calibration_v4_t_accl_z_bias_dtemp_get, _apdm.calibration_v4_t_accl_z_bias_dtemp_set)
    __swig_setmethods__["accl_x_scale"] = _apdm.calibration_v4_t_accl_x_scale_set
    __swig_getmethods__["accl_x_scale"] = _apdm.calibration_v4_t_accl_x_scale_get
    if _newclass:accl_x_scale = _swig_property(_apdm.calibration_v4_t_accl_x_scale_get, _apdm.calibration_v4_t_accl_x_scale_set)
    __swig_setmethods__["accl_y_scale"] = _apdm.calibration_v4_t_accl_y_scale_set
    __swig_getmethods__["accl_y_scale"] = _apdm.calibration_v4_t_accl_y_scale_get
    if _newclass:accl_y_scale = _swig_property(_apdm.calibration_v4_t_accl_y_scale_get, _apdm.calibration_v4_t_accl_y_scale_set)
    __swig_setmethods__["accl_z_scale"] = _apdm.calibration_v4_t_accl_z_scale_set
    __swig_getmethods__["accl_z_scale"] = _apdm.calibration_v4_t_accl_z_scale_get
    if _newclass:accl_z_scale = _swig_property(_apdm.calibration_v4_t_accl_z_scale_get, _apdm.calibration_v4_t_accl_z_scale_set)
    __swig_setmethods__["accl_x_scale_temp"] = _apdm.calibration_v4_t_accl_x_scale_temp_set
    __swig_getmethods__["accl_x_scale_temp"] = _apdm.calibration_v4_t_accl_x_scale_temp_get
    if _newclass:accl_x_scale_temp = _swig_property(_apdm.calibration_v4_t_accl_x_scale_temp_get, _apdm.calibration_v4_t_accl_x_scale_temp_set)
    __swig_setmethods__["accl_y_scale_temp"] = _apdm.calibration_v4_t_accl_y_scale_temp_set
    __swig_getmethods__["accl_y_scale_temp"] = _apdm.calibration_v4_t_accl_y_scale_temp_get
    if _newclass:accl_y_scale_temp = _swig_property(_apdm.calibration_v4_t_accl_y_scale_temp_get, _apdm.calibration_v4_t_accl_y_scale_temp_set)
    __swig_setmethods__["accl_z_scale_temp"] = _apdm.calibration_v4_t_accl_z_scale_temp_set
    __swig_getmethods__["accl_z_scale_temp"] = _apdm.calibration_v4_t_accl_z_scale_temp_get
    if _newclass:accl_z_scale_temp = _swig_property(_apdm.calibration_v4_t_accl_z_scale_temp_get, _apdm.calibration_v4_t_accl_z_scale_temp_set)
    __swig_setmethods__["accl_xy_sensitivity"] = _apdm.calibration_v4_t_accl_xy_sensitivity_set
    __swig_getmethods__["accl_xy_sensitivity"] = _apdm.calibration_v4_t_accl_xy_sensitivity_get
    if _newclass:accl_xy_sensitivity = _swig_property(_apdm.calibration_v4_t_accl_xy_sensitivity_get, _apdm.calibration_v4_t_accl_xy_sensitivity_set)
    __swig_setmethods__["accl_xz_sensitivity"] = _apdm.calibration_v4_t_accl_xz_sensitivity_set
    __swig_getmethods__["accl_xz_sensitivity"] = _apdm.calibration_v4_t_accl_xz_sensitivity_get
    if _newclass:accl_xz_sensitivity = _swig_property(_apdm.calibration_v4_t_accl_xz_sensitivity_get, _apdm.calibration_v4_t_accl_xz_sensitivity_set)
    __swig_setmethods__["accl_yz_sensitivity"] = _apdm.calibration_v4_t_accl_yz_sensitivity_set
    __swig_getmethods__["accl_yz_sensitivity"] = _apdm.calibration_v4_t_accl_yz_sensitivity_get
    if _newclass:accl_yz_sensitivity = _swig_property(_apdm.calibration_v4_t_accl_yz_sensitivity_get, _apdm.calibration_v4_t_accl_yz_sensitivity_set)
    __swig_setmethods__["accl_error_matrix"] = _apdm.calibration_v4_t_accl_error_matrix_set
    __swig_getmethods__["accl_error_matrix"] = _apdm.calibration_v4_t_accl_error_matrix_get
    if _newclass:accl_error_matrix = _swig_property(_apdm.calibration_v4_t_accl_error_matrix_get, _apdm.calibration_v4_t_accl_error_matrix_set)
    __swig_setmethods__["gyro_x_bias"] = _apdm.calibration_v4_t_gyro_x_bias_set
    __swig_getmethods__["gyro_x_bias"] = _apdm.calibration_v4_t_gyro_x_bias_get
    if _newclass:gyro_x_bias = _swig_property(_apdm.calibration_v4_t_gyro_x_bias_get, _apdm.calibration_v4_t_gyro_x_bias_set)
    __swig_setmethods__["gyro_y_bias"] = _apdm.calibration_v4_t_gyro_y_bias_set
    __swig_getmethods__["gyro_y_bias"] = _apdm.calibration_v4_t_gyro_y_bias_get
    if _newclass:gyro_y_bias = _swig_property(_apdm.calibration_v4_t_gyro_y_bias_get, _apdm.calibration_v4_t_gyro_y_bias_set)
    __swig_setmethods__["gyro_z_bias"] = _apdm.calibration_v4_t_gyro_z_bias_set
    __swig_getmethods__["gyro_z_bias"] = _apdm.calibration_v4_t_gyro_z_bias_get
    if _newclass:gyro_z_bias = _swig_property(_apdm.calibration_v4_t_gyro_z_bias_get, _apdm.calibration_v4_t_gyro_z_bias_set)
    __swig_setmethods__["gyro_x_bias_temp"] = _apdm.calibration_v4_t_gyro_x_bias_temp_set
    __swig_getmethods__["gyro_x_bias_temp"] = _apdm.calibration_v4_t_gyro_x_bias_temp_get
    if _newclass:gyro_x_bias_temp = _swig_property(_apdm.calibration_v4_t_gyro_x_bias_temp_get, _apdm.calibration_v4_t_gyro_x_bias_temp_set)
    __swig_setmethods__["gyro_x_bias_temp2"] = _apdm.calibration_v4_t_gyro_x_bias_temp2_set
    __swig_getmethods__["gyro_x_bias_temp2"] = _apdm.calibration_v4_t_gyro_x_bias_temp2_get
    if _newclass:gyro_x_bias_temp2 = _swig_property(_apdm.calibration_v4_t_gyro_x_bias_temp2_get, _apdm.calibration_v4_t_gyro_x_bias_temp2_set)
    __swig_setmethods__["gyro_y_bias_temp"] = _apdm.calibration_v4_t_gyro_y_bias_temp_set
    __swig_getmethods__["gyro_y_bias_temp"] = _apdm.calibration_v4_t_gyro_y_bias_temp_get
    if _newclass:gyro_y_bias_temp = _swig_property(_apdm.calibration_v4_t_gyro_y_bias_temp_get, _apdm.calibration_v4_t_gyro_y_bias_temp_set)
    __swig_setmethods__["gyro_y_bias_temp2"] = _apdm.calibration_v4_t_gyro_y_bias_temp2_set
    __swig_getmethods__["gyro_y_bias_temp2"] = _apdm.calibration_v4_t_gyro_y_bias_temp2_get
    if _newclass:gyro_y_bias_temp2 = _swig_property(_apdm.calibration_v4_t_gyro_y_bias_temp2_get, _apdm.calibration_v4_t_gyro_y_bias_temp2_set)
    __swig_setmethods__["gyro_z_bias_temp"] = _apdm.calibration_v4_t_gyro_z_bias_temp_set
    __swig_getmethods__["gyro_z_bias_temp"] = _apdm.calibration_v4_t_gyro_z_bias_temp_get
    if _newclass:gyro_z_bias_temp = _swig_property(_apdm.calibration_v4_t_gyro_z_bias_temp_get, _apdm.calibration_v4_t_gyro_z_bias_temp_set)
    __swig_setmethods__["gyro_x_scale"] = _apdm.calibration_v4_t_gyro_x_scale_set
    __swig_getmethods__["gyro_x_scale"] = _apdm.calibration_v4_t_gyro_x_scale_get
    if _newclass:gyro_x_scale = _swig_property(_apdm.calibration_v4_t_gyro_x_scale_get, _apdm.calibration_v4_t_gyro_x_scale_set)
    __swig_setmethods__["gyro_y_scale"] = _apdm.calibration_v4_t_gyro_y_scale_set
    __swig_getmethods__["gyro_y_scale"] = _apdm.calibration_v4_t_gyro_y_scale_get
    if _newclass:gyro_y_scale = _swig_property(_apdm.calibration_v4_t_gyro_y_scale_get, _apdm.calibration_v4_t_gyro_y_scale_set)
    __swig_setmethods__["gyro_z_scale"] = _apdm.calibration_v4_t_gyro_z_scale_set
    __swig_getmethods__["gyro_z_scale"] = _apdm.calibration_v4_t_gyro_z_scale_get
    if _newclass:gyro_z_scale = _swig_property(_apdm.calibration_v4_t_gyro_z_scale_get, _apdm.calibration_v4_t_gyro_z_scale_set)
    __swig_setmethods__["gyro_x_scale_temp"] = _apdm.calibration_v4_t_gyro_x_scale_temp_set
    __swig_getmethods__["gyro_x_scale_temp"] = _apdm.calibration_v4_t_gyro_x_scale_temp_get
    if _newclass:gyro_x_scale_temp = _swig_property(_apdm.calibration_v4_t_gyro_x_scale_temp_get, _apdm.calibration_v4_t_gyro_x_scale_temp_set)
    __swig_setmethods__["gyro_y_scale_temp"] = _apdm.calibration_v4_t_gyro_y_scale_temp_set
    __swig_getmethods__["gyro_y_scale_temp"] = _apdm.calibration_v4_t_gyro_y_scale_temp_get
    if _newclass:gyro_y_scale_temp = _swig_property(_apdm.calibration_v4_t_gyro_y_scale_temp_get, _apdm.calibration_v4_t_gyro_y_scale_temp_set)
    __swig_setmethods__["gyro_z_scale_temp"] = _apdm.calibration_v4_t_gyro_z_scale_temp_set
    __swig_getmethods__["gyro_z_scale_temp"] = _apdm.calibration_v4_t_gyro_z_scale_temp_get
    if _newclass:gyro_z_scale_temp = _swig_property(_apdm.calibration_v4_t_gyro_z_scale_temp_get, _apdm.calibration_v4_t_gyro_z_scale_temp_set)
    __swig_setmethods__["gyro_xy_sensitivity"] = _apdm.calibration_v4_t_gyro_xy_sensitivity_set
    __swig_getmethods__["gyro_xy_sensitivity"] = _apdm.calibration_v4_t_gyro_xy_sensitivity_get
    if _newclass:gyro_xy_sensitivity = _swig_property(_apdm.calibration_v4_t_gyro_xy_sensitivity_get, _apdm.calibration_v4_t_gyro_xy_sensitivity_set)
    __swig_setmethods__["gyro_xz_sensitivity"] = _apdm.calibration_v4_t_gyro_xz_sensitivity_set
    __swig_getmethods__["gyro_xz_sensitivity"] = _apdm.calibration_v4_t_gyro_xz_sensitivity_get
    if _newclass:gyro_xz_sensitivity = _swig_property(_apdm.calibration_v4_t_gyro_xz_sensitivity_get, _apdm.calibration_v4_t_gyro_xz_sensitivity_set)
    __swig_setmethods__["gyro_yz_sensitivity"] = _apdm.calibration_v4_t_gyro_yz_sensitivity_set
    __swig_getmethods__["gyro_yz_sensitivity"] = _apdm.calibration_v4_t_gyro_yz_sensitivity_get
    if _newclass:gyro_yz_sensitivity = _swig_property(_apdm.calibration_v4_t_gyro_yz_sensitivity_get, _apdm.calibration_v4_t_gyro_yz_sensitivity_set)
    __swig_setmethods__["gyro_accl_roll"] = _apdm.calibration_v4_t_gyro_accl_roll_set
    __swig_getmethods__["gyro_accl_roll"] = _apdm.calibration_v4_t_gyro_accl_roll_get
    if _newclass:gyro_accl_roll = _swig_property(_apdm.calibration_v4_t_gyro_accl_roll_get, _apdm.calibration_v4_t_gyro_accl_roll_set)
    __swig_setmethods__["gyro_accl_pitch"] = _apdm.calibration_v4_t_gyro_accl_pitch_set
    __swig_getmethods__["gyro_accl_pitch"] = _apdm.calibration_v4_t_gyro_accl_pitch_get
    if _newclass:gyro_accl_pitch = _swig_property(_apdm.calibration_v4_t_gyro_accl_pitch_get, _apdm.calibration_v4_t_gyro_accl_pitch_set)
    __swig_setmethods__["gyro_accl_yaw"] = _apdm.calibration_v4_t_gyro_accl_yaw_set
    __swig_getmethods__["gyro_accl_yaw"] = _apdm.calibration_v4_t_gyro_accl_yaw_get
    if _newclass:gyro_accl_yaw = _swig_property(_apdm.calibration_v4_t_gyro_accl_yaw_get, _apdm.calibration_v4_t_gyro_accl_yaw_set)
    __swig_setmethods__["gyro_error_matrix"] = _apdm.calibration_v4_t_gyro_error_matrix_set
    __swig_getmethods__["gyro_error_matrix"] = _apdm.calibration_v4_t_gyro_error_matrix_get
    if _newclass:gyro_error_matrix = _swig_property(_apdm.calibration_v4_t_gyro_error_matrix_get, _apdm.calibration_v4_t_gyro_error_matrix_set)
    __swig_setmethods__["mag_x_bias"] = _apdm.calibration_v4_t_mag_x_bias_set
    __swig_getmethods__["mag_x_bias"] = _apdm.calibration_v4_t_mag_x_bias_get
    if _newclass:mag_x_bias = _swig_property(_apdm.calibration_v4_t_mag_x_bias_get, _apdm.calibration_v4_t_mag_x_bias_set)
    __swig_setmethods__["mag_y_bias"] = _apdm.calibration_v4_t_mag_y_bias_set
    __swig_getmethods__["mag_y_bias"] = _apdm.calibration_v4_t_mag_y_bias_get
    if _newclass:mag_y_bias = _swig_property(_apdm.calibration_v4_t_mag_y_bias_get, _apdm.calibration_v4_t_mag_y_bias_set)
    __swig_setmethods__["mag_z_bias"] = _apdm.calibration_v4_t_mag_z_bias_set
    __swig_getmethods__["mag_z_bias"] = _apdm.calibration_v4_t_mag_z_bias_get
    if _newclass:mag_z_bias = _swig_property(_apdm.calibration_v4_t_mag_z_bias_get, _apdm.calibration_v4_t_mag_z_bias_set)
    __swig_setmethods__["mag_x_scale"] = _apdm.calibration_v4_t_mag_x_scale_set
    __swig_getmethods__["mag_x_scale"] = _apdm.calibration_v4_t_mag_x_scale_get
    if _newclass:mag_x_scale = _swig_property(_apdm.calibration_v4_t_mag_x_scale_get, _apdm.calibration_v4_t_mag_x_scale_set)
    __swig_setmethods__["mag_y_scale"] = _apdm.calibration_v4_t_mag_y_scale_set
    __swig_getmethods__["mag_y_scale"] = _apdm.calibration_v4_t_mag_y_scale_get
    if _newclass:mag_y_scale = _swig_property(_apdm.calibration_v4_t_mag_y_scale_get, _apdm.calibration_v4_t_mag_y_scale_set)
    __swig_setmethods__["mag_z_scale"] = _apdm.calibration_v4_t_mag_z_scale_set
    __swig_getmethods__["mag_z_scale"] = _apdm.calibration_v4_t_mag_z_scale_get
    if _newclass:mag_z_scale = _swig_property(_apdm.calibration_v4_t_mag_z_scale_get, _apdm.calibration_v4_t_mag_z_scale_set)
    __swig_setmethods__["mag_xy_sensitivity"] = _apdm.calibration_v4_t_mag_xy_sensitivity_set
    __swig_getmethods__["mag_xy_sensitivity"] = _apdm.calibration_v4_t_mag_xy_sensitivity_get
    if _newclass:mag_xy_sensitivity = _swig_property(_apdm.calibration_v4_t_mag_xy_sensitivity_get, _apdm.calibration_v4_t_mag_xy_sensitivity_set)
    __swig_setmethods__["mag_xz_sensitivity"] = _apdm.calibration_v4_t_mag_xz_sensitivity_set
    __swig_getmethods__["mag_xz_sensitivity"] = _apdm.calibration_v4_t_mag_xz_sensitivity_get
    if _newclass:mag_xz_sensitivity = _swig_property(_apdm.calibration_v4_t_mag_xz_sensitivity_get, _apdm.calibration_v4_t_mag_xz_sensitivity_set)
    __swig_setmethods__["mag_yz_sensitivity"] = _apdm.calibration_v4_t_mag_yz_sensitivity_set
    __swig_getmethods__["mag_yz_sensitivity"] = _apdm.calibration_v4_t_mag_yz_sensitivity_get
    if _newclass:mag_yz_sensitivity = _swig_property(_apdm.calibration_v4_t_mag_yz_sensitivity_get, _apdm.calibration_v4_t_mag_yz_sensitivity_set)
    __swig_setmethods__["mag_accl_roll"] = _apdm.calibration_v4_t_mag_accl_roll_set
    __swig_getmethods__["mag_accl_roll"] = _apdm.calibration_v4_t_mag_accl_roll_get
    if _newclass:mag_accl_roll = _swig_property(_apdm.calibration_v4_t_mag_accl_roll_get, _apdm.calibration_v4_t_mag_accl_roll_set)
    __swig_setmethods__["mag_accl_pitch"] = _apdm.calibration_v4_t_mag_accl_pitch_set
    __swig_getmethods__["mag_accl_pitch"] = _apdm.calibration_v4_t_mag_accl_pitch_get
    if _newclass:mag_accl_pitch = _swig_property(_apdm.calibration_v4_t_mag_accl_pitch_get, _apdm.calibration_v4_t_mag_accl_pitch_set)
    __swig_setmethods__["mag_accl_yaw"] = _apdm.calibration_v4_t_mag_accl_yaw_set
    __swig_getmethods__["mag_accl_yaw"] = _apdm.calibration_v4_t_mag_accl_yaw_get
    if _newclass:mag_accl_yaw = _swig_property(_apdm.calibration_v4_t_mag_accl_yaw_get, _apdm.calibration_v4_t_mag_accl_yaw_set)
    __swig_setmethods__["mag_error_matrix"] = _apdm.calibration_v4_t_mag_error_matrix_set
    __swig_getmethods__["mag_error_matrix"] = _apdm.calibration_v4_t_mag_error_matrix_get
    if _newclass:mag_error_matrix = _swig_property(_apdm.calibration_v4_t_mag_error_matrix_get, _apdm.calibration_v4_t_mag_error_matrix_set)
    __swig_setmethods__["mag_x_state"] = _apdm.calibration_v4_t_mag_x_state_set
    __swig_getmethods__["mag_x_state"] = _apdm.calibration_v4_t_mag_x_state_get
    if _newclass:mag_x_state = _swig_property(_apdm.calibration_v4_t_mag_x_state_get, _apdm.calibration_v4_t_mag_x_state_set)
    __swig_setmethods__["mag_y_state"] = _apdm.calibration_v4_t_mag_y_state_set
    __swig_getmethods__["mag_y_state"] = _apdm.calibration_v4_t_mag_y_state_get
    if _newclass:mag_y_state = _swig_property(_apdm.calibration_v4_t_mag_y_state_get, _apdm.calibration_v4_t_mag_y_state_set)
    __swig_setmethods__["mag_z_state"] = _apdm.calibration_v4_t_mag_z_state_set
    __swig_getmethods__["mag_z_state"] = _apdm.calibration_v4_t_mag_z_state_get
    if _newclass:mag_z_state = _swig_property(_apdm.calibration_v4_t_mag_z_state_get, _apdm.calibration_v4_t_mag_z_state_set)
    __swig_setmethods__["temperature_bias"] = _apdm.calibration_v4_t_temperature_bias_set
    __swig_getmethods__["temperature_bias"] = _apdm.calibration_v4_t_temperature_bias_get
    if _newclass:temperature_bias = _swig_property(_apdm.calibration_v4_t_temperature_bias_get, _apdm.calibration_v4_t_temperature_bias_set)
    __swig_setmethods__["temperature_scale"] = _apdm.calibration_v4_t_temperature_scale_set
    __swig_getmethods__["temperature_scale"] = _apdm.calibration_v4_t_temperature_scale_get
    if _newclass:temperature_scale = _swig_property(_apdm.calibration_v4_t_temperature_scale_get, _apdm.calibration_v4_t_temperature_scale_set)
    __swig_setmethods__["temperature_bias_msp"] = _apdm.calibration_v4_t_temperature_bias_msp_set
    __swig_getmethods__["temperature_bias_msp"] = _apdm.calibration_v4_t_temperature_bias_msp_get
    if _newclass:temperature_bias_msp = _swig_property(_apdm.calibration_v4_t_temperature_bias_msp_get, _apdm.calibration_v4_t_temperature_bias_msp_set)
    __swig_setmethods__["temperature_scale_msp"] = _apdm.calibration_v4_t_temperature_scale_msp_set
    __swig_getmethods__["temperature_scale_msp"] = _apdm.calibration_v4_t_temperature_scale_msp_get
    if _newclass:temperature_scale_msp = _swig_property(_apdm.calibration_v4_t_temperature_scale_msp_get, _apdm.calibration_v4_t_temperature_scale_msp_set)
    def __init__(self): 
        """__init__(self) -> calibration_v4_t"""
        this = _apdm.new_calibration_v4_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_calibration_v4_t
    __del__ = lambda self : None;
calibration_v4_t_swigregister = _apdm.calibration_v4_t_swigregister
calibration_v4_t_swigregister(calibration_v4_t)

class calibration_v5_t(_object):
    """Proxy of C calibration_v5_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibration_v5_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibration_v5_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["accl_x_bias"] = _apdm.calibration_v5_t_accl_x_bias_set
    __swig_getmethods__["accl_x_bias"] = _apdm.calibration_v5_t_accl_x_bias_get
    if _newclass:accl_x_bias = _swig_property(_apdm.calibration_v5_t_accl_x_bias_get, _apdm.calibration_v5_t_accl_x_bias_set)
    __swig_setmethods__["accl_y_bias"] = _apdm.calibration_v5_t_accl_y_bias_set
    __swig_getmethods__["accl_y_bias"] = _apdm.calibration_v5_t_accl_y_bias_get
    if _newclass:accl_y_bias = _swig_property(_apdm.calibration_v5_t_accl_y_bias_get, _apdm.calibration_v5_t_accl_y_bias_set)
    __swig_setmethods__["accl_z_bias"] = _apdm.calibration_v5_t_accl_z_bias_set
    __swig_getmethods__["accl_z_bias"] = _apdm.calibration_v5_t_accl_z_bias_get
    if _newclass:accl_z_bias = _swig_property(_apdm.calibration_v5_t_accl_z_bias_get, _apdm.calibration_v5_t_accl_z_bias_set)
    __swig_setmethods__["accl_z_bias_dtemp"] = _apdm.calibration_v5_t_accl_z_bias_dtemp_set
    __swig_getmethods__["accl_z_bias_dtemp"] = _apdm.calibration_v5_t_accl_z_bias_dtemp_get
    if _newclass:accl_z_bias_dtemp = _swig_property(_apdm.calibration_v5_t_accl_z_bias_dtemp_get, _apdm.calibration_v5_t_accl_z_bias_dtemp_set)
    __swig_setmethods__["accl_x_scale"] = _apdm.calibration_v5_t_accl_x_scale_set
    __swig_getmethods__["accl_x_scale"] = _apdm.calibration_v5_t_accl_x_scale_get
    if _newclass:accl_x_scale = _swig_property(_apdm.calibration_v5_t_accl_x_scale_get, _apdm.calibration_v5_t_accl_x_scale_set)
    __swig_setmethods__["accl_y_scale"] = _apdm.calibration_v5_t_accl_y_scale_set
    __swig_getmethods__["accl_y_scale"] = _apdm.calibration_v5_t_accl_y_scale_get
    if _newclass:accl_y_scale = _swig_property(_apdm.calibration_v5_t_accl_y_scale_get, _apdm.calibration_v5_t_accl_y_scale_set)
    __swig_setmethods__["accl_z_scale"] = _apdm.calibration_v5_t_accl_z_scale_set
    __swig_getmethods__["accl_z_scale"] = _apdm.calibration_v5_t_accl_z_scale_get
    if _newclass:accl_z_scale = _swig_property(_apdm.calibration_v5_t_accl_z_scale_get, _apdm.calibration_v5_t_accl_z_scale_set)
    __swig_setmethods__["accl_x_scale_temp"] = _apdm.calibration_v5_t_accl_x_scale_temp_set
    __swig_getmethods__["accl_x_scale_temp"] = _apdm.calibration_v5_t_accl_x_scale_temp_get
    if _newclass:accl_x_scale_temp = _swig_property(_apdm.calibration_v5_t_accl_x_scale_temp_get, _apdm.calibration_v5_t_accl_x_scale_temp_set)
    __swig_setmethods__["accl_y_scale_temp"] = _apdm.calibration_v5_t_accl_y_scale_temp_set
    __swig_getmethods__["accl_y_scale_temp"] = _apdm.calibration_v5_t_accl_y_scale_temp_get
    if _newclass:accl_y_scale_temp = _swig_property(_apdm.calibration_v5_t_accl_y_scale_temp_get, _apdm.calibration_v5_t_accl_y_scale_temp_set)
    __swig_setmethods__["accl_z_scale_temp"] = _apdm.calibration_v5_t_accl_z_scale_temp_set
    __swig_getmethods__["accl_z_scale_temp"] = _apdm.calibration_v5_t_accl_z_scale_temp_get
    if _newclass:accl_z_scale_temp = _swig_property(_apdm.calibration_v5_t_accl_z_scale_temp_get, _apdm.calibration_v5_t_accl_z_scale_temp_set)
    __swig_setmethods__["accl_xy_sensitivity"] = _apdm.calibration_v5_t_accl_xy_sensitivity_set
    __swig_getmethods__["accl_xy_sensitivity"] = _apdm.calibration_v5_t_accl_xy_sensitivity_get
    if _newclass:accl_xy_sensitivity = _swig_property(_apdm.calibration_v5_t_accl_xy_sensitivity_get, _apdm.calibration_v5_t_accl_xy_sensitivity_set)
    __swig_setmethods__["accl_xz_sensitivity"] = _apdm.calibration_v5_t_accl_xz_sensitivity_set
    __swig_getmethods__["accl_xz_sensitivity"] = _apdm.calibration_v5_t_accl_xz_sensitivity_get
    if _newclass:accl_xz_sensitivity = _swig_property(_apdm.calibration_v5_t_accl_xz_sensitivity_get, _apdm.calibration_v5_t_accl_xz_sensitivity_set)
    __swig_setmethods__["accl_yz_sensitivity"] = _apdm.calibration_v5_t_accl_yz_sensitivity_set
    __swig_getmethods__["accl_yz_sensitivity"] = _apdm.calibration_v5_t_accl_yz_sensitivity_get
    if _newclass:accl_yz_sensitivity = _swig_property(_apdm.calibration_v5_t_accl_yz_sensitivity_get, _apdm.calibration_v5_t_accl_yz_sensitivity_set)
    __swig_setmethods__["accl_error_matrix"] = _apdm.calibration_v5_t_accl_error_matrix_set
    __swig_getmethods__["accl_error_matrix"] = _apdm.calibration_v5_t_accl_error_matrix_get
    if _newclass:accl_error_matrix = _swig_property(_apdm.calibration_v5_t_accl_error_matrix_get, _apdm.calibration_v5_t_accl_error_matrix_set)
    __swig_setmethods__["gyro_x_bias"] = _apdm.calibration_v5_t_gyro_x_bias_set
    __swig_getmethods__["gyro_x_bias"] = _apdm.calibration_v5_t_gyro_x_bias_get
    if _newclass:gyro_x_bias = _swig_property(_apdm.calibration_v5_t_gyro_x_bias_get, _apdm.calibration_v5_t_gyro_x_bias_set)
    __swig_setmethods__["gyro_y_bias"] = _apdm.calibration_v5_t_gyro_y_bias_set
    __swig_getmethods__["gyro_y_bias"] = _apdm.calibration_v5_t_gyro_y_bias_get
    if _newclass:gyro_y_bias = _swig_property(_apdm.calibration_v5_t_gyro_y_bias_get, _apdm.calibration_v5_t_gyro_y_bias_set)
    __swig_setmethods__["gyro_z_bias"] = _apdm.calibration_v5_t_gyro_z_bias_set
    __swig_getmethods__["gyro_z_bias"] = _apdm.calibration_v5_t_gyro_z_bias_get
    if _newclass:gyro_z_bias = _swig_property(_apdm.calibration_v5_t_gyro_z_bias_get, _apdm.calibration_v5_t_gyro_z_bias_set)
    __swig_setmethods__["gyro_x_scale"] = _apdm.calibration_v5_t_gyro_x_scale_set
    __swig_getmethods__["gyro_x_scale"] = _apdm.calibration_v5_t_gyro_x_scale_get
    if _newclass:gyro_x_scale = _swig_property(_apdm.calibration_v5_t_gyro_x_scale_get, _apdm.calibration_v5_t_gyro_x_scale_set)
    __swig_setmethods__["gyro_y_scale"] = _apdm.calibration_v5_t_gyro_y_scale_set
    __swig_getmethods__["gyro_y_scale"] = _apdm.calibration_v5_t_gyro_y_scale_get
    if _newclass:gyro_y_scale = _swig_property(_apdm.calibration_v5_t_gyro_y_scale_get, _apdm.calibration_v5_t_gyro_y_scale_set)
    __swig_setmethods__["gyro_z_scale"] = _apdm.calibration_v5_t_gyro_z_scale_set
    __swig_getmethods__["gyro_z_scale"] = _apdm.calibration_v5_t_gyro_z_scale_get
    if _newclass:gyro_z_scale = _swig_property(_apdm.calibration_v5_t_gyro_z_scale_get, _apdm.calibration_v5_t_gyro_z_scale_set)
    __swig_setmethods__["gyro_x_scale_temp"] = _apdm.calibration_v5_t_gyro_x_scale_temp_set
    __swig_getmethods__["gyro_x_scale_temp"] = _apdm.calibration_v5_t_gyro_x_scale_temp_get
    if _newclass:gyro_x_scale_temp = _swig_property(_apdm.calibration_v5_t_gyro_x_scale_temp_get, _apdm.calibration_v5_t_gyro_x_scale_temp_set)
    __swig_setmethods__["gyro_y_scale_temp"] = _apdm.calibration_v5_t_gyro_y_scale_temp_set
    __swig_getmethods__["gyro_y_scale_temp"] = _apdm.calibration_v5_t_gyro_y_scale_temp_get
    if _newclass:gyro_y_scale_temp = _swig_property(_apdm.calibration_v5_t_gyro_y_scale_temp_get, _apdm.calibration_v5_t_gyro_y_scale_temp_set)
    __swig_setmethods__["gyro_z_scale_temp"] = _apdm.calibration_v5_t_gyro_z_scale_temp_set
    __swig_getmethods__["gyro_z_scale_temp"] = _apdm.calibration_v5_t_gyro_z_scale_temp_get
    if _newclass:gyro_z_scale_temp = _swig_property(_apdm.calibration_v5_t_gyro_z_scale_temp_get, _apdm.calibration_v5_t_gyro_z_scale_temp_set)
    __swig_setmethods__["gyro_xy_sensitivity"] = _apdm.calibration_v5_t_gyro_xy_sensitivity_set
    __swig_getmethods__["gyro_xy_sensitivity"] = _apdm.calibration_v5_t_gyro_xy_sensitivity_get
    if _newclass:gyro_xy_sensitivity = _swig_property(_apdm.calibration_v5_t_gyro_xy_sensitivity_get, _apdm.calibration_v5_t_gyro_xy_sensitivity_set)
    __swig_setmethods__["gyro_xz_sensitivity"] = _apdm.calibration_v5_t_gyro_xz_sensitivity_set
    __swig_getmethods__["gyro_xz_sensitivity"] = _apdm.calibration_v5_t_gyro_xz_sensitivity_get
    if _newclass:gyro_xz_sensitivity = _swig_property(_apdm.calibration_v5_t_gyro_xz_sensitivity_get, _apdm.calibration_v5_t_gyro_xz_sensitivity_set)
    __swig_setmethods__["gyro_yz_sensitivity"] = _apdm.calibration_v5_t_gyro_yz_sensitivity_set
    __swig_getmethods__["gyro_yz_sensitivity"] = _apdm.calibration_v5_t_gyro_yz_sensitivity_get
    if _newclass:gyro_yz_sensitivity = _swig_property(_apdm.calibration_v5_t_gyro_yz_sensitivity_get, _apdm.calibration_v5_t_gyro_yz_sensitivity_set)
    __swig_setmethods__["gyro_accl_roll"] = _apdm.calibration_v5_t_gyro_accl_roll_set
    __swig_getmethods__["gyro_accl_roll"] = _apdm.calibration_v5_t_gyro_accl_roll_get
    if _newclass:gyro_accl_roll = _swig_property(_apdm.calibration_v5_t_gyro_accl_roll_get, _apdm.calibration_v5_t_gyro_accl_roll_set)
    __swig_setmethods__["gyro_accl_pitch"] = _apdm.calibration_v5_t_gyro_accl_pitch_set
    __swig_getmethods__["gyro_accl_pitch"] = _apdm.calibration_v5_t_gyro_accl_pitch_get
    if _newclass:gyro_accl_pitch = _swig_property(_apdm.calibration_v5_t_gyro_accl_pitch_get, _apdm.calibration_v5_t_gyro_accl_pitch_set)
    __swig_setmethods__["gyro_accl_yaw"] = _apdm.calibration_v5_t_gyro_accl_yaw_set
    __swig_getmethods__["gyro_accl_yaw"] = _apdm.calibration_v5_t_gyro_accl_yaw_get
    if _newclass:gyro_accl_yaw = _swig_property(_apdm.calibration_v5_t_gyro_accl_yaw_get, _apdm.calibration_v5_t_gyro_accl_yaw_set)
    __swig_setmethods__["gyro_error_matrix"] = _apdm.calibration_v5_t_gyro_error_matrix_set
    __swig_getmethods__["gyro_error_matrix"] = _apdm.calibration_v5_t_gyro_error_matrix_get
    if _newclass:gyro_error_matrix = _swig_property(_apdm.calibration_v5_t_gyro_error_matrix_get, _apdm.calibration_v5_t_gyro_error_matrix_set)
    __swig_setmethods__["mag_x_bias"] = _apdm.calibration_v5_t_mag_x_bias_set
    __swig_getmethods__["mag_x_bias"] = _apdm.calibration_v5_t_mag_x_bias_get
    if _newclass:mag_x_bias = _swig_property(_apdm.calibration_v5_t_mag_x_bias_get, _apdm.calibration_v5_t_mag_x_bias_set)
    __swig_setmethods__["mag_y_bias"] = _apdm.calibration_v5_t_mag_y_bias_set
    __swig_getmethods__["mag_y_bias"] = _apdm.calibration_v5_t_mag_y_bias_get
    if _newclass:mag_y_bias = _swig_property(_apdm.calibration_v5_t_mag_y_bias_get, _apdm.calibration_v5_t_mag_y_bias_set)
    __swig_setmethods__["mag_z_bias"] = _apdm.calibration_v5_t_mag_z_bias_set
    __swig_getmethods__["mag_z_bias"] = _apdm.calibration_v5_t_mag_z_bias_get
    if _newclass:mag_z_bias = _swig_property(_apdm.calibration_v5_t_mag_z_bias_get, _apdm.calibration_v5_t_mag_z_bias_set)
    __swig_setmethods__["mag_x_scale"] = _apdm.calibration_v5_t_mag_x_scale_set
    __swig_getmethods__["mag_x_scale"] = _apdm.calibration_v5_t_mag_x_scale_get
    if _newclass:mag_x_scale = _swig_property(_apdm.calibration_v5_t_mag_x_scale_get, _apdm.calibration_v5_t_mag_x_scale_set)
    __swig_setmethods__["mag_y_scale"] = _apdm.calibration_v5_t_mag_y_scale_set
    __swig_getmethods__["mag_y_scale"] = _apdm.calibration_v5_t_mag_y_scale_get
    if _newclass:mag_y_scale = _swig_property(_apdm.calibration_v5_t_mag_y_scale_get, _apdm.calibration_v5_t_mag_y_scale_set)
    __swig_setmethods__["mag_z_scale"] = _apdm.calibration_v5_t_mag_z_scale_set
    __swig_getmethods__["mag_z_scale"] = _apdm.calibration_v5_t_mag_z_scale_get
    if _newclass:mag_z_scale = _swig_property(_apdm.calibration_v5_t_mag_z_scale_get, _apdm.calibration_v5_t_mag_z_scale_set)
    __swig_setmethods__["mag_x_scale_temp"] = _apdm.calibration_v5_t_mag_x_scale_temp_set
    __swig_getmethods__["mag_x_scale_temp"] = _apdm.calibration_v5_t_mag_x_scale_temp_get
    if _newclass:mag_x_scale_temp = _swig_property(_apdm.calibration_v5_t_mag_x_scale_temp_get, _apdm.calibration_v5_t_mag_x_scale_temp_set)
    __swig_setmethods__["mag_y_scale_temp"] = _apdm.calibration_v5_t_mag_y_scale_temp_set
    __swig_getmethods__["mag_y_scale_temp"] = _apdm.calibration_v5_t_mag_y_scale_temp_get
    if _newclass:mag_y_scale_temp = _swig_property(_apdm.calibration_v5_t_mag_y_scale_temp_get, _apdm.calibration_v5_t_mag_y_scale_temp_set)
    __swig_setmethods__["mag_z_scale_temp"] = _apdm.calibration_v5_t_mag_z_scale_temp_set
    __swig_getmethods__["mag_z_scale_temp"] = _apdm.calibration_v5_t_mag_z_scale_temp_get
    if _newclass:mag_z_scale_temp = _swig_property(_apdm.calibration_v5_t_mag_z_scale_temp_get, _apdm.calibration_v5_t_mag_z_scale_temp_set)
    __swig_setmethods__["mag_xy_sensitivity"] = _apdm.calibration_v5_t_mag_xy_sensitivity_set
    __swig_getmethods__["mag_xy_sensitivity"] = _apdm.calibration_v5_t_mag_xy_sensitivity_get
    if _newclass:mag_xy_sensitivity = _swig_property(_apdm.calibration_v5_t_mag_xy_sensitivity_get, _apdm.calibration_v5_t_mag_xy_sensitivity_set)
    __swig_setmethods__["mag_xz_sensitivity"] = _apdm.calibration_v5_t_mag_xz_sensitivity_set
    __swig_getmethods__["mag_xz_sensitivity"] = _apdm.calibration_v5_t_mag_xz_sensitivity_get
    if _newclass:mag_xz_sensitivity = _swig_property(_apdm.calibration_v5_t_mag_xz_sensitivity_get, _apdm.calibration_v5_t_mag_xz_sensitivity_set)
    __swig_setmethods__["mag_yz_sensitivity"] = _apdm.calibration_v5_t_mag_yz_sensitivity_set
    __swig_getmethods__["mag_yz_sensitivity"] = _apdm.calibration_v5_t_mag_yz_sensitivity_get
    if _newclass:mag_yz_sensitivity = _swig_property(_apdm.calibration_v5_t_mag_yz_sensitivity_get, _apdm.calibration_v5_t_mag_yz_sensitivity_set)
    __swig_setmethods__["mag_accl_roll"] = _apdm.calibration_v5_t_mag_accl_roll_set
    __swig_getmethods__["mag_accl_roll"] = _apdm.calibration_v5_t_mag_accl_roll_get
    if _newclass:mag_accl_roll = _swig_property(_apdm.calibration_v5_t_mag_accl_roll_get, _apdm.calibration_v5_t_mag_accl_roll_set)
    __swig_setmethods__["mag_accl_pitch"] = _apdm.calibration_v5_t_mag_accl_pitch_set
    __swig_getmethods__["mag_accl_pitch"] = _apdm.calibration_v5_t_mag_accl_pitch_get
    if _newclass:mag_accl_pitch = _swig_property(_apdm.calibration_v5_t_mag_accl_pitch_get, _apdm.calibration_v5_t_mag_accl_pitch_set)
    __swig_setmethods__["mag_accl_yaw"] = _apdm.calibration_v5_t_mag_accl_yaw_set
    __swig_getmethods__["mag_accl_yaw"] = _apdm.calibration_v5_t_mag_accl_yaw_get
    if _newclass:mag_accl_yaw = _swig_property(_apdm.calibration_v5_t_mag_accl_yaw_get, _apdm.calibration_v5_t_mag_accl_yaw_set)
    __swig_setmethods__["mag_x_offset"] = _apdm.calibration_v5_t_mag_x_offset_set
    __swig_getmethods__["mag_x_offset"] = _apdm.calibration_v5_t_mag_x_offset_get
    if _newclass:mag_x_offset = _swig_property(_apdm.calibration_v5_t_mag_x_offset_get, _apdm.calibration_v5_t_mag_x_offset_set)
    __swig_setmethods__["mag_y_offset"] = _apdm.calibration_v5_t_mag_y_offset_set
    __swig_getmethods__["mag_y_offset"] = _apdm.calibration_v5_t_mag_y_offset_get
    if _newclass:mag_y_offset = _swig_property(_apdm.calibration_v5_t_mag_y_offset_get, _apdm.calibration_v5_t_mag_y_offset_set)
    __swig_setmethods__["mag_z_offset"] = _apdm.calibration_v5_t_mag_z_offset_set
    __swig_getmethods__["mag_z_offset"] = _apdm.calibration_v5_t_mag_z_offset_get
    if _newclass:mag_z_offset = _swig_property(_apdm.calibration_v5_t_mag_z_offset_get, _apdm.calibration_v5_t_mag_z_offset_set)
    __swig_setmethods__["mag_conversion_gain"] = _apdm.calibration_v5_t_mag_conversion_gain_set
    __swig_getmethods__["mag_conversion_gain"] = _apdm.calibration_v5_t_mag_conversion_gain_get
    if _newclass:mag_conversion_gain = _swig_property(_apdm.calibration_v5_t_mag_conversion_gain_get, _apdm.calibration_v5_t_mag_conversion_gain_set)
    __swig_setmethods__["mag_error_matrix"] = _apdm.calibration_v5_t_mag_error_matrix_set
    __swig_getmethods__["mag_error_matrix"] = _apdm.calibration_v5_t_mag_error_matrix_get
    if _newclass:mag_error_matrix = _swig_property(_apdm.calibration_v5_t_mag_error_matrix_get, _apdm.calibration_v5_t_mag_error_matrix_set)
    __swig_setmethods__["mag_x_state"] = _apdm.calibration_v5_t_mag_x_state_set
    __swig_getmethods__["mag_x_state"] = _apdm.calibration_v5_t_mag_x_state_get
    if _newclass:mag_x_state = _swig_property(_apdm.calibration_v5_t_mag_x_state_get, _apdm.calibration_v5_t_mag_x_state_set)
    __swig_setmethods__["mag_y_state"] = _apdm.calibration_v5_t_mag_y_state_set
    __swig_getmethods__["mag_y_state"] = _apdm.calibration_v5_t_mag_y_state_get
    if _newclass:mag_y_state = _swig_property(_apdm.calibration_v5_t_mag_y_state_get, _apdm.calibration_v5_t_mag_y_state_set)
    __swig_setmethods__["mag_z_state"] = _apdm.calibration_v5_t_mag_z_state_set
    __swig_getmethods__["mag_z_state"] = _apdm.calibration_v5_t_mag_z_state_get
    if _newclass:mag_z_state = _swig_property(_apdm.calibration_v5_t_mag_z_state_get, _apdm.calibration_v5_t_mag_z_state_set)
    __swig_setmethods__["temperature_bias"] = _apdm.calibration_v5_t_temperature_bias_set
    __swig_getmethods__["temperature_bias"] = _apdm.calibration_v5_t_temperature_bias_get
    if _newclass:temperature_bias = _swig_property(_apdm.calibration_v5_t_temperature_bias_get, _apdm.calibration_v5_t_temperature_bias_set)
    __swig_setmethods__["temperature_scale"] = _apdm.calibration_v5_t_temperature_scale_set
    __swig_getmethods__["temperature_scale"] = _apdm.calibration_v5_t_temperature_scale_get
    if _newclass:temperature_scale = _swig_property(_apdm.calibration_v5_t_temperature_scale_get, _apdm.calibration_v5_t_temperature_scale_set)
    __swig_setmethods__["temperature_bias_msp"] = _apdm.calibration_v5_t_temperature_bias_msp_set
    __swig_getmethods__["temperature_bias_msp"] = _apdm.calibration_v5_t_temperature_bias_msp_get
    if _newclass:temperature_bias_msp = _swig_property(_apdm.calibration_v5_t_temperature_bias_msp_get, _apdm.calibration_v5_t_temperature_bias_msp_set)
    __swig_setmethods__["temperature_scale_msp"] = _apdm.calibration_v5_t_temperature_scale_msp_set
    __swig_getmethods__["temperature_scale_msp"] = _apdm.calibration_v5_t_temperature_scale_msp_get
    if _newclass:temperature_scale_msp = _swig_property(_apdm.calibration_v5_t_temperature_scale_msp_get, _apdm.calibration_v5_t_temperature_scale_msp_set)
    def __init__(self): 
        """__init__(self) -> calibration_v5_t"""
        this = _apdm.new_calibration_v5_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_calibration_v5_t
    __del__ = lambda self : None;
calibration_v5_t_swigregister = _apdm.calibration_v5_t_swigregister
calibration_v5_t_swigregister(calibration_v5_t)

class calibration_v6_t(_object):
    """Proxy of C calibration_v6_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibration_v6_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibration_v6_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["accl_x_bias"] = _apdm.calibration_v6_t_accl_x_bias_set
    __swig_getmethods__["accl_x_bias"] = _apdm.calibration_v6_t_accl_x_bias_get
    if _newclass:accl_x_bias = _swig_property(_apdm.calibration_v6_t_accl_x_bias_get, _apdm.calibration_v6_t_accl_x_bias_set)
    __swig_setmethods__["accl_y_bias"] = _apdm.calibration_v6_t_accl_y_bias_set
    __swig_getmethods__["accl_y_bias"] = _apdm.calibration_v6_t_accl_y_bias_get
    if _newclass:accl_y_bias = _swig_property(_apdm.calibration_v6_t_accl_y_bias_get, _apdm.calibration_v6_t_accl_y_bias_set)
    __swig_setmethods__["accl_z_bias"] = _apdm.calibration_v6_t_accl_z_bias_set
    __swig_getmethods__["accl_z_bias"] = _apdm.calibration_v6_t_accl_z_bias_get
    if _newclass:accl_z_bias = _swig_property(_apdm.calibration_v6_t_accl_z_bias_get, _apdm.calibration_v6_t_accl_z_bias_set)
    __swig_setmethods__["accl_z_bias_dtemp"] = _apdm.calibration_v6_t_accl_z_bias_dtemp_set
    __swig_getmethods__["accl_z_bias_dtemp"] = _apdm.calibration_v6_t_accl_z_bias_dtemp_get
    if _newclass:accl_z_bias_dtemp = _swig_property(_apdm.calibration_v6_t_accl_z_bias_dtemp_get, _apdm.calibration_v6_t_accl_z_bias_dtemp_set)
    __swig_setmethods__["accl_x_scale"] = _apdm.calibration_v6_t_accl_x_scale_set
    __swig_getmethods__["accl_x_scale"] = _apdm.calibration_v6_t_accl_x_scale_get
    if _newclass:accl_x_scale = _swig_property(_apdm.calibration_v6_t_accl_x_scale_get, _apdm.calibration_v6_t_accl_x_scale_set)
    __swig_setmethods__["accl_y_scale"] = _apdm.calibration_v6_t_accl_y_scale_set
    __swig_getmethods__["accl_y_scale"] = _apdm.calibration_v6_t_accl_y_scale_get
    if _newclass:accl_y_scale = _swig_property(_apdm.calibration_v6_t_accl_y_scale_get, _apdm.calibration_v6_t_accl_y_scale_set)
    __swig_setmethods__["accl_z_scale"] = _apdm.calibration_v6_t_accl_z_scale_set
    __swig_getmethods__["accl_z_scale"] = _apdm.calibration_v6_t_accl_z_scale_get
    if _newclass:accl_z_scale = _swig_property(_apdm.calibration_v6_t_accl_z_scale_get, _apdm.calibration_v6_t_accl_z_scale_set)
    __swig_setmethods__["accl_x_scale_temp"] = _apdm.calibration_v6_t_accl_x_scale_temp_set
    __swig_getmethods__["accl_x_scale_temp"] = _apdm.calibration_v6_t_accl_x_scale_temp_get
    if _newclass:accl_x_scale_temp = _swig_property(_apdm.calibration_v6_t_accl_x_scale_temp_get, _apdm.calibration_v6_t_accl_x_scale_temp_set)
    __swig_setmethods__["accl_y_scale_temp"] = _apdm.calibration_v6_t_accl_y_scale_temp_set
    __swig_getmethods__["accl_y_scale_temp"] = _apdm.calibration_v6_t_accl_y_scale_temp_get
    if _newclass:accl_y_scale_temp = _swig_property(_apdm.calibration_v6_t_accl_y_scale_temp_get, _apdm.calibration_v6_t_accl_y_scale_temp_set)
    __swig_setmethods__["accl_z_scale_temp"] = _apdm.calibration_v6_t_accl_z_scale_temp_set
    __swig_getmethods__["accl_z_scale_temp"] = _apdm.calibration_v6_t_accl_z_scale_temp_get
    if _newclass:accl_z_scale_temp = _swig_property(_apdm.calibration_v6_t_accl_z_scale_temp_get, _apdm.calibration_v6_t_accl_z_scale_temp_set)
    __swig_setmethods__["accl_xy_sensitivity"] = _apdm.calibration_v6_t_accl_xy_sensitivity_set
    __swig_getmethods__["accl_xy_sensitivity"] = _apdm.calibration_v6_t_accl_xy_sensitivity_get
    if _newclass:accl_xy_sensitivity = _swig_property(_apdm.calibration_v6_t_accl_xy_sensitivity_get, _apdm.calibration_v6_t_accl_xy_sensitivity_set)
    __swig_setmethods__["accl_xz_sensitivity"] = _apdm.calibration_v6_t_accl_xz_sensitivity_set
    __swig_getmethods__["accl_xz_sensitivity"] = _apdm.calibration_v6_t_accl_xz_sensitivity_get
    if _newclass:accl_xz_sensitivity = _swig_property(_apdm.calibration_v6_t_accl_xz_sensitivity_get, _apdm.calibration_v6_t_accl_xz_sensitivity_set)
    __swig_setmethods__["accl_yz_sensitivity"] = _apdm.calibration_v6_t_accl_yz_sensitivity_set
    __swig_getmethods__["accl_yz_sensitivity"] = _apdm.calibration_v6_t_accl_yz_sensitivity_get
    if _newclass:accl_yz_sensitivity = _swig_property(_apdm.calibration_v6_t_accl_yz_sensitivity_get, _apdm.calibration_v6_t_accl_yz_sensitivity_set)
    __swig_setmethods__["accl_error_matrix"] = _apdm.calibration_v6_t_accl_error_matrix_set
    __swig_getmethods__["accl_error_matrix"] = _apdm.calibration_v6_t_accl_error_matrix_get
    if _newclass:accl_error_matrix = _swig_property(_apdm.calibration_v6_t_accl_error_matrix_get, _apdm.calibration_v6_t_accl_error_matrix_set)
    __swig_setmethods__["gyro_x_bias"] = _apdm.calibration_v6_t_gyro_x_bias_set
    __swig_getmethods__["gyro_x_bias"] = _apdm.calibration_v6_t_gyro_x_bias_get
    if _newclass:gyro_x_bias = _swig_property(_apdm.calibration_v6_t_gyro_x_bias_get, _apdm.calibration_v6_t_gyro_x_bias_set)
    __swig_setmethods__["gyro_y_bias"] = _apdm.calibration_v6_t_gyro_y_bias_set
    __swig_getmethods__["gyro_y_bias"] = _apdm.calibration_v6_t_gyro_y_bias_get
    if _newclass:gyro_y_bias = _swig_property(_apdm.calibration_v6_t_gyro_y_bias_get, _apdm.calibration_v6_t_gyro_y_bias_set)
    __swig_setmethods__["gyro_z_bias"] = _apdm.calibration_v6_t_gyro_z_bias_set
    __swig_getmethods__["gyro_z_bias"] = _apdm.calibration_v6_t_gyro_z_bias_get
    if _newclass:gyro_z_bias = _swig_property(_apdm.calibration_v6_t_gyro_z_bias_get, _apdm.calibration_v6_t_gyro_z_bias_set)
    __swig_setmethods__["gyro_x_scale"] = _apdm.calibration_v6_t_gyro_x_scale_set
    __swig_getmethods__["gyro_x_scale"] = _apdm.calibration_v6_t_gyro_x_scale_get
    if _newclass:gyro_x_scale = _swig_property(_apdm.calibration_v6_t_gyro_x_scale_get, _apdm.calibration_v6_t_gyro_x_scale_set)
    __swig_setmethods__["gyro_y_scale"] = _apdm.calibration_v6_t_gyro_y_scale_set
    __swig_getmethods__["gyro_y_scale"] = _apdm.calibration_v6_t_gyro_y_scale_get
    if _newclass:gyro_y_scale = _swig_property(_apdm.calibration_v6_t_gyro_y_scale_get, _apdm.calibration_v6_t_gyro_y_scale_set)
    __swig_setmethods__["gyro_z_scale"] = _apdm.calibration_v6_t_gyro_z_scale_set
    __swig_getmethods__["gyro_z_scale"] = _apdm.calibration_v6_t_gyro_z_scale_get
    if _newclass:gyro_z_scale = _swig_property(_apdm.calibration_v6_t_gyro_z_scale_get, _apdm.calibration_v6_t_gyro_z_scale_set)
    __swig_setmethods__["gyro_x_scale_temp"] = _apdm.calibration_v6_t_gyro_x_scale_temp_set
    __swig_getmethods__["gyro_x_scale_temp"] = _apdm.calibration_v6_t_gyro_x_scale_temp_get
    if _newclass:gyro_x_scale_temp = _swig_property(_apdm.calibration_v6_t_gyro_x_scale_temp_get, _apdm.calibration_v6_t_gyro_x_scale_temp_set)
    __swig_setmethods__["gyro_y_scale_temp"] = _apdm.calibration_v6_t_gyro_y_scale_temp_set
    __swig_getmethods__["gyro_y_scale_temp"] = _apdm.calibration_v6_t_gyro_y_scale_temp_get
    if _newclass:gyro_y_scale_temp = _swig_property(_apdm.calibration_v6_t_gyro_y_scale_temp_get, _apdm.calibration_v6_t_gyro_y_scale_temp_set)
    __swig_setmethods__["gyro_z_scale_temp"] = _apdm.calibration_v6_t_gyro_z_scale_temp_set
    __swig_getmethods__["gyro_z_scale_temp"] = _apdm.calibration_v6_t_gyro_z_scale_temp_get
    if _newclass:gyro_z_scale_temp = _swig_property(_apdm.calibration_v6_t_gyro_z_scale_temp_get, _apdm.calibration_v6_t_gyro_z_scale_temp_set)
    __swig_setmethods__["gyro_xy_sensitivity"] = _apdm.calibration_v6_t_gyro_xy_sensitivity_set
    __swig_getmethods__["gyro_xy_sensitivity"] = _apdm.calibration_v6_t_gyro_xy_sensitivity_get
    if _newclass:gyro_xy_sensitivity = _swig_property(_apdm.calibration_v6_t_gyro_xy_sensitivity_get, _apdm.calibration_v6_t_gyro_xy_sensitivity_set)
    __swig_setmethods__["gyro_xz_sensitivity"] = _apdm.calibration_v6_t_gyro_xz_sensitivity_set
    __swig_getmethods__["gyro_xz_sensitivity"] = _apdm.calibration_v6_t_gyro_xz_sensitivity_get
    if _newclass:gyro_xz_sensitivity = _swig_property(_apdm.calibration_v6_t_gyro_xz_sensitivity_get, _apdm.calibration_v6_t_gyro_xz_sensitivity_set)
    __swig_setmethods__["gyro_yz_sensitivity"] = _apdm.calibration_v6_t_gyro_yz_sensitivity_set
    __swig_getmethods__["gyro_yz_sensitivity"] = _apdm.calibration_v6_t_gyro_yz_sensitivity_get
    if _newclass:gyro_yz_sensitivity = _swig_property(_apdm.calibration_v6_t_gyro_yz_sensitivity_get, _apdm.calibration_v6_t_gyro_yz_sensitivity_set)
    __swig_setmethods__["gyro_accl_roll"] = _apdm.calibration_v6_t_gyro_accl_roll_set
    __swig_getmethods__["gyro_accl_roll"] = _apdm.calibration_v6_t_gyro_accl_roll_get
    if _newclass:gyro_accl_roll = _swig_property(_apdm.calibration_v6_t_gyro_accl_roll_get, _apdm.calibration_v6_t_gyro_accl_roll_set)
    __swig_setmethods__["gyro_accl_pitch"] = _apdm.calibration_v6_t_gyro_accl_pitch_set
    __swig_getmethods__["gyro_accl_pitch"] = _apdm.calibration_v6_t_gyro_accl_pitch_get
    if _newclass:gyro_accl_pitch = _swig_property(_apdm.calibration_v6_t_gyro_accl_pitch_get, _apdm.calibration_v6_t_gyro_accl_pitch_set)
    __swig_setmethods__["gyro_accl_yaw"] = _apdm.calibration_v6_t_gyro_accl_yaw_set
    __swig_getmethods__["gyro_accl_yaw"] = _apdm.calibration_v6_t_gyro_accl_yaw_get
    if _newclass:gyro_accl_yaw = _swig_property(_apdm.calibration_v6_t_gyro_accl_yaw_get, _apdm.calibration_v6_t_gyro_accl_yaw_set)
    __swig_setmethods__["gyro_error_matrix"] = _apdm.calibration_v6_t_gyro_error_matrix_set
    __swig_getmethods__["gyro_error_matrix"] = _apdm.calibration_v6_t_gyro_error_matrix_get
    if _newclass:gyro_error_matrix = _swig_property(_apdm.calibration_v6_t_gyro_error_matrix_get, _apdm.calibration_v6_t_gyro_error_matrix_set)
    __swig_setmethods__["mag_x_bias"] = _apdm.calibration_v6_t_mag_x_bias_set
    __swig_getmethods__["mag_x_bias"] = _apdm.calibration_v6_t_mag_x_bias_get
    if _newclass:mag_x_bias = _swig_property(_apdm.calibration_v6_t_mag_x_bias_get, _apdm.calibration_v6_t_mag_x_bias_set)
    __swig_setmethods__["mag_y_bias"] = _apdm.calibration_v6_t_mag_y_bias_set
    __swig_getmethods__["mag_y_bias"] = _apdm.calibration_v6_t_mag_y_bias_get
    if _newclass:mag_y_bias = _swig_property(_apdm.calibration_v6_t_mag_y_bias_get, _apdm.calibration_v6_t_mag_y_bias_set)
    __swig_setmethods__["mag_z_bias"] = _apdm.calibration_v6_t_mag_z_bias_set
    __swig_getmethods__["mag_z_bias"] = _apdm.calibration_v6_t_mag_z_bias_get
    if _newclass:mag_z_bias = _swig_property(_apdm.calibration_v6_t_mag_z_bias_get, _apdm.calibration_v6_t_mag_z_bias_set)
    __swig_setmethods__["mag_x_scale"] = _apdm.calibration_v6_t_mag_x_scale_set
    __swig_getmethods__["mag_x_scale"] = _apdm.calibration_v6_t_mag_x_scale_get
    if _newclass:mag_x_scale = _swig_property(_apdm.calibration_v6_t_mag_x_scale_get, _apdm.calibration_v6_t_mag_x_scale_set)
    __swig_setmethods__["mag_y_scale"] = _apdm.calibration_v6_t_mag_y_scale_set
    __swig_getmethods__["mag_y_scale"] = _apdm.calibration_v6_t_mag_y_scale_get
    if _newclass:mag_y_scale = _swig_property(_apdm.calibration_v6_t_mag_y_scale_get, _apdm.calibration_v6_t_mag_y_scale_set)
    __swig_setmethods__["mag_z_scale"] = _apdm.calibration_v6_t_mag_z_scale_set
    __swig_getmethods__["mag_z_scale"] = _apdm.calibration_v6_t_mag_z_scale_get
    if _newclass:mag_z_scale = _swig_property(_apdm.calibration_v6_t_mag_z_scale_get, _apdm.calibration_v6_t_mag_z_scale_set)
    __swig_setmethods__["mag_xy_sensitivity"] = _apdm.calibration_v6_t_mag_xy_sensitivity_set
    __swig_getmethods__["mag_xy_sensitivity"] = _apdm.calibration_v6_t_mag_xy_sensitivity_get
    if _newclass:mag_xy_sensitivity = _swig_property(_apdm.calibration_v6_t_mag_xy_sensitivity_get, _apdm.calibration_v6_t_mag_xy_sensitivity_set)
    __swig_setmethods__["mag_xz_sensitivity"] = _apdm.calibration_v6_t_mag_xz_sensitivity_set
    __swig_getmethods__["mag_xz_sensitivity"] = _apdm.calibration_v6_t_mag_xz_sensitivity_get
    if _newclass:mag_xz_sensitivity = _swig_property(_apdm.calibration_v6_t_mag_xz_sensitivity_get, _apdm.calibration_v6_t_mag_xz_sensitivity_set)
    __swig_setmethods__["mag_yz_sensitivity"] = _apdm.calibration_v6_t_mag_yz_sensitivity_set
    __swig_getmethods__["mag_yz_sensitivity"] = _apdm.calibration_v6_t_mag_yz_sensitivity_get
    if _newclass:mag_yz_sensitivity = _swig_property(_apdm.calibration_v6_t_mag_yz_sensitivity_get, _apdm.calibration_v6_t_mag_yz_sensitivity_set)
    __swig_setmethods__["mag_accl_x"] = _apdm.calibration_v6_t_mag_accl_x_set
    __swig_getmethods__["mag_accl_x"] = _apdm.calibration_v6_t_mag_accl_x_get
    if _newclass:mag_accl_x = _swig_property(_apdm.calibration_v6_t_mag_accl_x_get, _apdm.calibration_v6_t_mag_accl_x_set)
    __swig_setmethods__["mag_accl_y"] = _apdm.calibration_v6_t_mag_accl_y_set
    __swig_getmethods__["mag_accl_y"] = _apdm.calibration_v6_t_mag_accl_y_get
    if _newclass:mag_accl_y = _swig_property(_apdm.calibration_v6_t_mag_accl_y_get, _apdm.calibration_v6_t_mag_accl_y_set)
    __swig_setmethods__["mag_accl_z"] = _apdm.calibration_v6_t_mag_accl_z_set
    __swig_getmethods__["mag_accl_z"] = _apdm.calibration_v6_t_mag_accl_z_get
    if _newclass:mag_accl_z = _swig_property(_apdm.calibration_v6_t_mag_accl_z_get, _apdm.calibration_v6_t_mag_accl_z_set)
    __swig_setmethods__["mag_x_offset"] = _apdm.calibration_v6_t_mag_x_offset_set
    __swig_getmethods__["mag_x_offset"] = _apdm.calibration_v6_t_mag_x_offset_get
    if _newclass:mag_x_offset = _swig_property(_apdm.calibration_v6_t_mag_x_offset_get, _apdm.calibration_v6_t_mag_x_offset_set)
    __swig_setmethods__["mag_y_offset"] = _apdm.calibration_v6_t_mag_y_offset_set
    __swig_getmethods__["mag_y_offset"] = _apdm.calibration_v6_t_mag_y_offset_get
    if _newclass:mag_y_offset = _swig_property(_apdm.calibration_v6_t_mag_y_offset_get, _apdm.calibration_v6_t_mag_y_offset_set)
    __swig_setmethods__["mag_z_offset"] = _apdm.calibration_v6_t_mag_z_offset_set
    __swig_getmethods__["mag_z_offset"] = _apdm.calibration_v6_t_mag_z_offset_get
    if _newclass:mag_z_offset = _swig_property(_apdm.calibration_v6_t_mag_z_offset_get, _apdm.calibration_v6_t_mag_z_offset_set)
    __swig_setmethods__["mag_conversion_gain"] = _apdm.calibration_v6_t_mag_conversion_gain_set
    __swig_getmethods__["mag_conversion_gain"] = _apdm.calibration_v6_t_mag_conversion_gain_get
    if _newclass:mag_conversion_gain = _swig_property(_apdm.calibration_v6_t_mag_conversion_gain_get, _apdm.calibration_v6_t_mag_conversion_gain_set)
    __swig_setmethods__["mag_inclination"] = _apdm.calibration_v6_t_mag_inclination_set
    __swig_getmethods__["mag_inclination"] = _apdm.calibration_v6_t_mag_inclination_get
    if _newclass:mag_inclination = _swig_property(_apdm.calibration_v6_t_mag_inclination_get, _apdm.calibration_v6_t_mag_inclination_set)
    __swig_setmethods__["mag_error_matrix"] = _apdm.calibration_v6_t_mag_error_matrix_set
    __swig_getmethods__["mag_error_matrix"] = _apdm.calibration_v6_t_mag_error_matrix_get
    if _newclass:mag_error_matrix = _swig_property(_apdm.calibration_v6_t_mag_error_matrix_get, _apdm.calibration_v6_t_mag_error_matrix_set)
    __swig_setmethods__["mag_x_state"] = _apdm.calibration_v6_t_mag_x_state_set
    __swig_getmethods__["mag_x_state"] = _apdm.calibration_v6_t_mag_x_state_get
    if _newclass:mag_x_state = _swig_property(_apdm.calibration_v6_t_mag_x_state_get, _apdm.calibration_v6_t_mag_x_state_set)
    __swig_setmethods__["mag_y_state"] = _apdm.calibration_v6_t_mag_y_state_set
    __swig_getmethods__["mag_y_state"] = _apdm.calibration_v6_t_mag_y_state_get
    if _newclass:mag_y_state = _swig_property(_apdm.calibration_v6_t_mag_y_state_get, _apdm.calibration_v6_t_mag_y_state_set)
    __swig_setmethods__["mag_z_state"] = _apdm.calibration_v6_t_mag_z_state_set
    __swig_getmethods__["mag_z_state"] = _apdm.calibration_v6_t_mag_z_state_get
    if _newclass:mag_z_state = _swig_property(_apdm.calibration_v6_t_mag_z_state_get, _apdm.calibration_v6_t_mag_z_state_set)
    __swig_setmethods__["temperature_bias"] = _apdm.calibration_v6_t_temperature_bias_set
    __swig_getmethods__["temperature_bias"] = _apdm.calibration_v6_t_temperature_bias_get
    if _newclass:temperature_bias = _swig_property(_apdm.calibration_v6_t_temperature_bias_get, _apdm.calibration_v6_t_temperature_bias_set)
    __swig_setmethods__["temperature_scale"] = _apdm.calibration_v6_t_temperature_scale_set
    __swig_getmethods__["temperature_scale"] = _apdm.calibration_v6_t_temperature_scale_get
    if _newclass:temperature_scale = _swig_property(_apdm.calibration_v6_t_temperature_scale_get, _apdm.calibration_v6_t_temperature_scale_set)
    __swig_setmethods__["temperature_bias_msp"] = _apdm.calibration_v6_t_temperature_bias_msp_set
    __swig_getmethods__["temperature_bias_msp"] = _apdm.calibration_v6_t_temperature_bias_msp_get
    if _newclass:temperature_bias_msp = _swig_property(_apdm.calibration_v6_t_temperature_bias_msp_get, _apdm.calibration_v6_t_temperature_bias_msp_set)
    __swig_setmethods__["temperature_scale_msp"] = _apdm.calibration_v6_t_temperature_scale_msp_set
    __swig_getmethods__["temperature_scale_msp"] = _apdm.calibration_v6_t_temperature_scale_msp_get
    if _newclass:temperature_scale_msp = _swig_property(_apdm.calibration_v6_t_temperature_scale_msp_get, _apdm.calibration_v6_t_temperature_scale_msp_set)
    def __init__(self): 
        """__init__(self) -> calibration_v6_t"""
        this = _apdm.new_calibration_v6_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_calibration_v6_t
    __del__ = lambda self : None;
calibration_v6_t_swigregister = _apdm.calibration_v6_t_swigregister
calibration_v6_t_swigregister(calibration_v6_t)

CALIBRATION_V4 = _apdm.CALIBRATION_V4
CALIBRATION_V5 = _apdm.CALIBRATION_V5
CALIBRATION_V6 = _apdm.CALIBRATION_V6
CALIBRATION_V7 = _apdm.CALIBRATION_V7
class apdm_sensor_compensation_t(_object):
    """Proxy of C apdm_sensor_compensation_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_sensor_compensation_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_sensor_compensation_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["converted_calibration_version"] = _apdm.apdm_sensor_compensation_t_converted_calibration_version_set
    __swig_getmethods__["converted_calibration_version"] = _apdm.apdm_sensor_compensation_t_converted_calibration_version_get
    if _newclass:converted_calibration_version = _swig_property(_apdm.apdm_sensor_compensation_t_converted_calibration_version_get, _apdm.apdm_sensor_compensation_t_converted_calibration_version_set)
    __swig_setmethods__["raw_calibration_version"] = _apdm.apdm_sensor_compensation_t_raw_calibration_version_set
    __swig_getmethods__["raw_calibration_version"] = _apdm.apdm_sensor_compensation_t_raw_calibration_version_get
    if _newclass:raw_calibration_version = _swig_property(_apdm.apdm_sensor_compensation_t_raw_calibration_version_get, _apdm.apdm_sensor_compensation_t_raw_calibration_version_set)
    __swig_getmethods__["data"] = _apdm.apdm_sensor_compensation_t_data_get
    if _newclass:data = _swig_property(_apdm.apdm_sensor_compensation_t_data_get)
    def __init__(self): 
        """__init__(self) -> apdm_sensor_compensation_t"""
        this = _apdm.new_apdm_sensor_compensation_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_sensor_compensation_t
    __del__ = lambda self : None;
apdm_sensor_compensation_t_swigregister = _apdm.apdm_sensor_compensation_t_swigregister
apdm_sensor_compensation_t_swigregister(apdm_sensor_compensation_t)

class apdm_sensor_compensation_t_data(_object):
    """Proxy of C apdm_sensor_compensation_t_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_sensor_compensation_t_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_sensor_compensation_t_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v4"] = _apdm.apdm_sensor_compensation_t_data_v4_set
    __swig_getmethods__["v4"] = _apdm.apdm_sensor_compensation_t_data_v4_get
    if _newclass:v4 = _swig_property(_apdm.apdm_sensor_compensation_t_data_v4_get, _apdm.apdm_sensor_compensation_t_data_v4_set)
    __swig_setmethods__["v5"] = _apdm.apdm_sensor_compensation_t_data_v5_set
    __swig_getmethods__["v5"] = _apdm.apdm_sensor_compensation_t_data_v5_get
    if _newclass:v5 = _swig_property(_apdm.apdm_sensor_compensation_t_data_v5_get, _apdm.apdm_sensor_compensation_t_data_v5_set)
    __swig_setmethods__["v6"] = _apdm.apdm_sensor_compensation_t_data_v6_set
    __swig_getmethods__["v6"] = _apdm.apdm_sensor_compensation_t_data_v6_get
    if _newclass:v6 = _swig_property(_apdm.apdm_sensor_compensation_t_data_v6_get, _apdm.apdm_sensor_compensation_t_data_v6_set)
    __swig_setmethods__["v7"] = _apdm.apdm_sensor_compensation_t_data_v7_set
    __swig_getmethods__["v7"] = _apdm.apdm_sensor_compensation_t_data_v7_get
    if _newclass:v7 = _swig_property(_apdm.apdm_sensor_compensation_t_data_v7_get, _apdm.apdm_sensor_compensation_t_data_v7_set)
    def __init__(self): 
        """__init__(self) -> apdm_sensor_compensation_t_data"""
        this = _apdm.new_apdm_sensor_compensation_t_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_sensor_compensation_t_data
    __del__ = lambda self : None;
apdm_sensor_compensation_t_data_swigregister = _apdm.apdm_sensor_compensation_t_data_swigregister
apdm_sensor_compensation_t_data_swigregister(apdm_sensor_compensation_t_data)

class apdm_device_info_t(_object):
    """Proxy of C apdm_device_info_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_device_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_device_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["decimation_bypass_flag"] = _apdm.apdm_device_info_t_decimation_bypass_flag_set
    __swig_getmethods__["decimation_bypass_flag"] = _apdm.apdm_device_info_t_decimation_bypass_flag_get
    if _newclass:decimation_bypass_flag = _swig_property(_apdm.apdm_device_info_t_decimation_bypass_flag_get, _apdm.apdm_device_info_t_decimation_bypass_flag_set)
    __swig_setmethods__["time_good_flag"] = _apdm.apdm_device_info_t_time_good_flag_set
    __swig_getmethods__["time_good_flag"] = _apdm.apdm_device_info_t_time_good_flag_get
    if _newclass:time_good_flag = _swig_property(_apdm.apdm_device_info_t_time_good_flag_get, _apdm.apdm_device_info_t_time_good_flag_set)
    __swig_setmethods__["accelerometer_full_scale_flag"] = _apdm.apdm_device_info_t_accelerometer_full_scale_flag_set
    __swig_getmethods__["accelerometer_full_scale_flag"] = _apdm.apdm_device_info_t_accelerometer_full_scale_flag_get
    if _newclass:accelerometer_full_scale_flag = _swig_property(_apdm.apdm_device_info_t_accelerometer_full_scale_flag_get, _apdm.apdm_device_info_t_accelerometer_full_scale_flag_set)
    __swig_setmethods__["accelerometer_enabled_flag"] = _apdm.apdm_device_info_t_accelerometer_enabled_flag_set
    __swig_getmethods__["accelerometer_enabled_flag"] = _apdm.apdm_device_info_t_accelerometer_enabled_flag_get
    if _newclass:accelerometer_enabled_flag = _swig_property(_apdm.apdm_device_info_t_accelerometer_enabled_flag_get, _apdm.apdm_device_info_t_accelerometer_enabled_flag_set)
    __swig_setmethods__["gyroscope_enabled_flag"] = _apdm.apdm_device_info_t_gyroscope_enabled_flag_set
    __swig_getmethods__["gyroscope_enabled_flag"] = _apdm.apdm_device_info_t_gyroscope_enabled_flag_get
    if _newclass:gyroscope_enabled_flag = _swig_property(_apdm.apdm_device_info_t_gyroscope_enabled_flag_get, _apdm.apdm_device_info_t_gyroscope_enabled_flag_set)
    __swig_setmethods__["magnetometer_enabled_flag"] = _apdm.apdm_device_info_t_magnetometer_enabled_flag_set
    __swig_getmethods__["magnetometer_enabled_flag"] = _apdm.apdm_device_info_t_magnetometer_enabled_flag_get
    if _newclass:magnetometer_enabled_flag = _swig_property(_apdm.apdm_device_info_t_magnetometer_enabled_flag_get, _apdm.apdm_device_info_t_magnetometer_enabled_flag_set)
    __swig_setmethods__["pressure_enabled_flag"] = _apdm.apdm_device_info_t_pressure_enabled_flag_set
    __swig_getmethods__["pressure_enabled_flag"] = _apdm.apdm_device_info_t_pressure_enabled_flag_get
    if _newclass:pressure_enabled_flag = _swig_property(_apdm.apdm_device_info_t_pressure_enabled_flag_get, _apdm.apdm_device_info_t_pressure_enabled_flag_set)
    __swig_setmethods__["ranging_enabled_flag"] = _apdm.apdm_device_info_t_ranging_enabled_flag_set
    __swig_getmethods__["ranging_enabled_flag"] = _apdm.apdm_device_info_t_ranging_enabled_flag_get
    if _newclass:ranging_enabled_flag = _swig_property(_apdm.apdm_device_info_t_ranging_enabled_flag_get, _apdm.apdm_device_info_t_ranging_enabled_flag_set)
    __swig_setmethods__["sd_card_enabled_flag"] = _apdm.apdm_device_info_t_sd_card_enabled_flag_set
    __swig_getmethods__["sd_card_enabled_flag"] = _apdm.apdm_device_info_t_sd_card_enabled_flag_get
    if _newclass:sd_card_enabled_flag = _swig_property(_apdm.apdm_device_info_t_sd_card_enabled_flag_get, _apdm.apdm_device_info_t_sd_card_enabled_flag_set)
    __swig_setmethods__["always_off_flag"] = _apdm.apdm_device_info_t_always_off_flag_set
    __swig_getmethods__["always_off_flag"] = _apdm.apdm_device_info_t_always_off_flag_get
    if _newclass:always_off_flag = _swig_property(_apdm.apdm_device_info_t_always_off_flag_get, _apdm.apdm_device_info_t_always_off_flag_set)
    __swig_setmethods__["erase_sd_card_after_undocking"] = _apdm.apdm_device_info_t_erase_sd_card_after_undocking_set
    __swig_getmethods__["erase_sd_card_after_undocking"] = _apdm.apdm_device_info_t_erase_sd_card_after_undocking_get
    if _newclass:erase_sd_card_after_undocking = _swig_property(_apdm.apdm_device_info_t_erase_sd_card_after_undocking_get, _apdm.apdm_device_info_t_erase_sd_card_after_undocking_set)
    __swig_setmethods__["enable_button"] = _apdm.apdm_device_info_t_enable_button_set
    __swig_getmethods__["enable_button"] = _apdm.apdm_device_info_t_enable_button_get
    if _newclass:enable_button = _swig_property(_apdm.apdm_device_info_t_enable_button_get, _apdm.apdm_device_info_t_enable_button_set)
    __swig_setmethods__["button_mode"] = _apdm.apdm_device_info_t_button_mode_set
    __swig_getmethods__["button_mode"] = _apdm.apdm_device_info_t_button_mode_get
    if _newclass:button_mode = _swig_property(_apdm.apdm_device_info_t_button_mode_get, _apdm.apdm_device_info_t_button_mode_set)
    __swig_setmethods__["battery_led"] = _apdm.apdm_device_info_t_battery_led_set
    __swig_getmethods__["battery_led"] = _apdm.apdm_device_info_t_battery_led_get
    if _newclass:battery_led = _swig_property(_apdm.apdm_device_info_t_battery_led_get, _apdm.apdm_device_info_t_battery_led_set)
    __swig_setmethods__["extend_led"] = _apdm.apdm_device_info_t_extend_led_set
    __swig_getmethods__["extend_led"] = _apdm.apdm_device_info_t_extend_led_get
    if _newclass:extend_led = _swig_property(_apdm.apdm_device_info_t_extend_led_get, _apdm.apdm_device_info_t_extend_led_set)
    __swig_setmethods__["debug_led"] = _apdm.apdm_device_info_t_debug_led_set
    __swig_getmethods__["debug_led"] = _apdm.apdm_device_info_t_debug_led_get
    if _newclass:debug_led = _swig_property(_apdm.apdm_device_info_t_debug_led_get, _apdm.apdm_device_info_t_debug_led_set)
    __swig_setmethods__["battery_cutoff"] = _apdm.apdm_device_info_t_battery_cutoff_set
    __swig_getmethods__["battery_cutoff"] = _apdm.apdm_device_info_t_battery_cutoff_get
    if _newclass:battery_cutoff = _swig_property(_apdm.apdm_device_info_t_battery_cutoff_get, _apdm.apdm_device_info_t_battery_cutoff_set)
    __swig_setmethods__["wireless_latency"] = _apdm.apdm_device_info_t_wireless_latency_set
    __swig_getmethods__["wireless_latency"] = _apdm.apdm_device_info_t_wireless_latency_get
    if _newclass:wireless_latency = _swig_property(_apdm.apdm_device_info_t_wireless_latency_get, _apdm.apdm_device_info_t_wireless_latency_set)
    __swig_setmethods__["spin_mode"] = _apdm.apdm_device_info_t_spin_mode_set
    __swig_getmethods__["spin_mode"] = _apdm.apdm_device_info_t_spin_mode_get
    if _newclass:spin_mode = _swig_property(_apdm.apdm_device_info_t_spin_mode_get, _apdm.apdm_device_info_t_spin_mode_set)
    __swig_setmethods__["selected_temperature_sensor"] = _apdm.apdm_device_info_t_selected_temperature_sensor_set
    __swig_getmethods__["selected_temperature_sensor"] = _apdm.apdm_device_info_t_selected_temperature_sensor_get
    if _newclass:selected_temperature_sensor = _swig_property(_apdm.apdm_device_info_t_selected_temperature_sensor_get, _apdm.apdm_device_info_t_selected_temperature_sensor_set)
    __swig_setmethods__["decimation_rate"] = _apdm.apdm_device_info_t_decimation_rate_set
    __swig_getmethods__["decimation_rate"] = _apdm.apdm_device_info_t_decimation_rate_get
    if _newclass:decimation_rate = _swig_property(_apdm.apdm_device_info_t_decimation_rate_get, _apdm.apdm_device_info_t_decimation_rate_set)
    __swig_setmethods__["sample_rate"] = _apdm.apdm_device_info_t_sample_rate_set
    __swig_getmethods__["sample_rate"] = _apdm.apdm_device_info_t_sample_rate_get
    if _newclass:sample_rate = _swig_property(_apdm.apdm_device_info_t_sample_rate_get, _apdm.apdm_device_info_t_sample_rate_set)
    __swig_setmethods__["decimation_factor"] = _apdm.apdm_device_info_t_decimation_factor_set
    __swig_getmethods__["decimation_factor"] = _apdm.apdm_device_info_t_decimation_factor_get
    if _newclass:decimation_factor = _swig_property(_apdm.apdm_device_info_t_decimation_factor_get, _apdm.apdm_device_info_t_decimation_factor_set)
    __swig_setmethods__["timezone"] = _apdm.apdm_device_info_t_timezone_set
    __swig_getmethods__["timezone"] = _apdm.apdm_device_info_t_timezone_get
    if _newclass:timezone = _swig_property(_apdm.apdm_device_info_t_timezone_get, _apdm.apdm_device_info_t_timezone_set)
    __swig_setmethods__["device_label"] = _apdm.apdm_device_info_t_device_label_set
    __swig_getmethods__["device_label"] = _apdm.apdm_device_info_t_device_label_get
    if _newclass:device_label = _swig_property(_apdm.apdm_device_info_t_device_label_get, _apdm.apdm_device_info_t_device_label_set)
    __swig_setmethods__["orientation_model"] = _apdm.apdm_device_info_t_orientation_model_set
    __swig_getmethods__["orientation_model"] = _apdm.apdm_device_info_t_orientation_model_get
    if _newclass:orientation_model = _swig_property(_apdm.apdm_device_info_t_orientation_model_get, _apdm.apdm_device_info_t_orientation_model_set)
    __swig_setmethods__["calibration_binary_blob"] = _apdm.apdm_device_info_t_calibration_binary_blob_set
    __swig_getmethods__["calibration_binary_blob"] = _apdm.apdm_device_info_t_calibration_binary_blob_get
    if _newclass:calibration_binary_blob = _swig_property(_apdm.apdm_device_info_t_calibration_binary_blob_get, _apdm.apdm_device_info_t_calibration_binary_blob_set)
    __swig_setmethods__["calibration_version_number"] = _apdm.apdm_device_info_t_calibration_version_number_set
    __swig_getmethods__["calibration_version_number"] = _apdm.apdm_device_info_t_calibration_version_number_get
    if _newclass:calibration_version_number = _swig_property(_apdm.apdm_device_info_t_calibration_version_number_get, _apdm.apdm_device_info_t_calibration_version_number_set)
    __swig_setmethods__["user_calibration_binary_blob"] = _apdm.apdm_device_info_t_user_calibration_binary_blob_set
    __swig_getmethods__["user_calibration_binary_blob"] = _apdm.apdm_device_info_t_user_calibration_binary_blob_get
    if _newclass:user_calibration_binary_blob = _swig_property(_apdm.apdm_device_info_t_user_calibration_binary_blob_get, _apdm.apdm_device_info_t_user_calibration_binary_blob_set)
    __swig_setmethods__["user_calibration_version_number"] = _apdm.apdm_device_info_t_user_calibration_version_number_set
    __swig_getmethods__["user_calibration_version_number"] = _apdm.apdm_device_info_t_user_calibration_version_number_get
    if _newclass:user_calibration_version_number = _swig_property(_apdm.apdm_device_info_t_user_calibration_version_number_get, _apdm.apdm_device_info_t_user_calibration_version_number_set)
    __swig_setmethods__["device_id"] = _apdm.apdm_device_info_t_device_id_set
    __swig_getmethods__["device_id"] = _apdm.apdm_device_info_t_device_id_get
    if _newclass:device_id = _swig_property(_apdm.apdm_device_info_t_device_id_get, _apdm.apdm_device_info_t_device_id_set)
    __swig_setmethods__["hardware_id"] = _apdm.apdm_device_info_t_hardware_id_set
    __swig_getmethods__["hardware_id"] = _apdm.apdm_device_info_t_hardware_id_get
    if _newclass:hardware_id = _swig_property(_apdm.apdm_device_info_t_hardware_id_get, _apdm.apdm_device_info_t_hardware_id_set)
    __swig_setmethods__["sd_file_version"] = _apdm.apdm_device_info_t_sd_file_version_set
    __swig_getmethods__["sd_file_version"] = _apdm.apdm_device_info_t_sd_file_version_get
    if _newclass:sd_file_version = _swig_property(_apdm.apdm_device_info_t_sd_file_version_get, _apdm.apdm_device_info_t_sd_file_version_set)
    __swig_setmethods__["firmware_version_string1"] = _apdm.apdm_device_info_t_firmware_version_string1_set
    __swig_getmethods__["firmware_version_string1"] = _apdm.apdm_device_info_t_firmware_version_string1_get
    if _newclass:firmware_version_string1 = _swig_property(_apdm.apdm_device_info_t_firmware_version_string1_get, _apdm.apdm_device_info_t_firmware_version_string1_set)
    __swig_setmethods__["firmware_version_string2"] = _apdm.apdm_device_info_t_firmware_version_string2_set
    __swig_getmethods__["firmware_version_string2"] = _apdm.apdm_device_info_t_firmware_version_string2_get
    if _newclass:firmware_version_string2 = _swig_property(_apdm.apdm_device_info_t_firmware_version_string2_get, _apdm.apdm_device_info_t_firmware_version_string2_set)
    __swig_setmethods__["firmware_version_string2_number"] = _apdm.apdm_device_info_t_firmware_version_string2_number_set
    __swig_getmethods__["firmware_version_string2_number"] = _apdm.apdm_device_info_t_firmware_version_string2_number_get
    if _newclass:firmware_version_string2_number = _swig_property(_apdm.apdm_device_info_t_firmware_version_string2_number_get, _apdm.apdm_device_info_t_firmware_version_string2_number_set)
    __swig_setmethods__["firmware_version_string3"] = _apdm.apdm_device_info_t_firmware_version_string3_set
    __swig_getmethods__["firmware_version_string3"] = _apdm.apdm_device_info_t_firmware_version_string3_get
    if _newclass:firmware_version_string3 = _swig_property(_apdm.apdm_device_info_t_firmware_version_string3_get, _apdm.apdm_device_info_t_firmware_version_string3_set)
    __swig_setmethods__["case_id"] = _apdm.apdm_device_info_t_case_id_set
    __swig_getmethods__["case_id"] = _apdm.apdm_device_info_t_case_id_get
    if _newclass:case_id = _swig_property(_apdm.apdm_device_info_t_case_id_get, _apdm.apdm_device_info_t_case_id_set)
    __swig_setmethods__["timezone_string"] = _apdm.apdm_device_info_t_timezone_string_set
    __swig_getmethods__["timezone_string"] = _apdm.apdm_device_info_t_timezone_string_get
    if _newclass:timezone_string = _swig_property(_apdm.apdm_device_info_t_timezone_string_get, _apdm.apdm_device_info_t_timezone_string_set)
    __swig_setmethods__["magnetometer_set_reset"] = _apdm.apdm_device_info_t_magnetometer_set_reset_set
    __swig_getmethods__["magnetometer_set_reset"] = _apdm.apdm_device_info_t_magnetometer_set_reset_get
    if _newclass:magnetometer_set_reset = _swig_property(_apdm.apdm_device_info_t_magnetometer_set_reset_get, _apdm.apdm_device_info_t_magnetometer_set_reset_set)
    __swig_setmethods__["recording_mode"] = _apdm.apdm_device_info_t_recording_mode_set
    __swig_getmethods__["recording_mode"] = _apdm.apdm_device_info_t_recording_mode_get
    if _newclass:recording_mode = _swig_property(_apdm.apdm_device_info_t_recording_mode_get, _apdm.apdm_device_info_t_recording_mode_set)
    __swig_setmethods__["data_mode"] = _apdm.apdm_device_info_t_data_mode_set
    __swig_getmethods__["data_mode"] = _apdm.apdm_device_info_t_data_mode_get
    if _newclass:data_mode = _swig_property(_apdm.apdm_device_info_t_data_mode_get, _apdm.apdm_device_info_t_data_mode_set)
    __swig_setmethods__["enable_wireless"] = _apdm.apdm_device_info_t_enable_wireless_set
    __swig_getmethods__["enable_wireless"] = _apdm.apdm_device_info_t_enable_wireless_get
    if _newclass:enable_wireless = _swig_property(_apdm.apdm_device_info_t_enable_wireless_get, _apdm.apdm_device_info_t_enable_wireless_set)
    __swig_setmethods__["wireless_protocol"] = _apdm.apdm_device_info_t_wireless_protocol_set
    __swig_getmethods__["wireless_protocol"] = _apdm.apdm_device_info_t_wireless_protocol_get
    if _newclass:wireless_protocol = _swig_property(_apdm.apdm_device_info_t_wireless_protocol_get, _apdm.apdm_device_info_t_wireless_protocol_set)
    __swig_setmethods__["wireless_protocol_v2"] = _apdm.apdm_device_info_t_wireless_protocol_v2_set
    __swig_getmethods__["wireless_protocol_v2"] = _apdm.apdm_device_info_t_wireless_protocol_v2_get
    if _newclass:wireless_protocol_v2 = _swig_property(_apdm.apdm_device_info_t_wireless_protocol_v2_get, _apdm.apdm_device_info_t_wireless_protocol_v2_set)
    __swig_setmethods__["wireless_timeslice"] = _apdm.apdm_device_info_t_wireless_timeslice_set
    __swig_getmethods__["wireless_timeslice"] = _apdm.apdm_device_info_t_wireless_timeslice_get
    if _newclass:wireless_timeslice = _swig_property(_apdm.apdm_device_info_t_wireless_timeslice_get, _apdm.apdm_device_info_t_wireless_timeslice_set)
    __swig_setmethods__["wireless_addr_id"] = _apdm.apdm_device_info_t_wireless_addr_id_set
    __swig_getmethods__["wireless_addr_id"] = _apdm.apdm_device_info_t_wireless_addr_id_get
    if _newclass:wireless_addr_id = _swig_property(_apdm.apdm_device_info_t_wireless_addr_id_get, _apdm.apdm_device_info_t_wireless_addr_id_set)
    __swig_setmethods__["protocol_version"] = _apdm.apdm_device_info_t_protocol_version_set
    __swig_getmethods__["protocol_version"] = _apdm.apdm_device_info_t_protocol_version_get
    if _newclass:protocol_version = _swig_property(_apdm.apdm_device_info_t_protocol_version_get, _apdm.apdm_device_info_t_protocol_version_set)
    __swig_setmethods__["wireless_channel0"] = _apdm.apdm_device_info_t_wireless_channel0_set
    __swig_getmethods__["wireless_channel0"] = _apdm.apdm_device_info_t_wireless_channel0_get
    if _newclass:wireless_channel0 = _swig_property(_apdm.apdm_device_info_t_wireless_channel0_get, _apdm.apdm_device_info_t_wireless_channel0_set)
    __swig_setmethods__["wireless_block0"] = _apdm.apdm_device_info_t_wireless_block0_set
    __swig_getmethods__["wireless_block0"] = _apdm.apdm_device_info_t_wireless_block0_get
    if _newclass:wireless_block0 = _swig_property(_apdm.apdm_device_info_t_wireless_block0_get, _apdm.apdm_device_info_t_wireless_block0_set)
    __swig_setmethods__["wireless_channel1"] = _apdm.apdm_device_info_t_wireless_channel1_set
    __swig_getmethods__["wireless_channel1"] = _apdm.apdm_device_info_t_wireless_channel1_get
    if _newclass:wireless_channel1 = _swig_property(_apdm.apdm_device_info_t_wireless_channel1_get, _apdm.apdm_device_info_t_wireless_channel1_set)
    __swig_setmethods__["wireless_block1"] = _apdm.apdm_device_info_t_wireless_block1_set
    __swig_getmethods__["wireless_block1"] = _apdm.apdm_device_info_t_wireless_block1_get
    if _newclass:wireless_block1 = _swig_property(_apdm.apdm_device_info_t_wireless_block1_get, _apdm.apdm_device_info_t_wireless_block1_set)
    __swig_setmethods__["wireless_channel2"] = _apdm.apdm_device_info_t_wireless_channel2_set
    __swig_getmethods__["wireless_channel2"] = _apdm.apdm_device_info_t_wireless_channel2_get
    if _newclass:wireless_channel2 = _swig_property(_apdm.apdm_device_info_t_wireless_channel2_get, _apdm.apdm_device_info_t_wireless_channel2_set)
    __swig_setmethods__["wireless_block2"] = _apdm.apdm_device_info_t_wireless_block2_set
    __swig_getmethods__["wireless_block2"] = _apdm.apdm_device_info_t_wireless_block2_get
    if _newclass:wireless_block2 = _swig_property(_apdm.apdm_device_info_t_wireless_block2_get, _apdm.apdm_device_info_t_wireless_block2_set)
    __swig_setmethods__["wireless_channel3"] = _apdm.apdm_device_info_t_wireless_channel3_set
    __swig_getmethods__["wireless_channel3"] = _apdm.apdm_device_info_t_wireless_channel3_get
    if _newclass:wireless_channel3 = _swig_property(_apdm.apdm_device_info_t_wireless_channel3_get, _apdm.apdm_device_info_t_wireless_channel3_set)
    __swig_setmethods__["wireless_block3"] = _apdm.apdm_device_info_t_wireless_block3_set
    __swig_getmethods__["wireless_block3"] = _apdm.apdm_device_info_t_wireless_block3_get
    if _newclass:wireless_block3 = _swig_property(_apdm.apdm_device_info_t_wireless_block3_get, _apdm.apdm_device_info_t_wireless_block3_set)
    __swig_setmethods__["dock_id_during_configuration"] = _apdm.apdm_device_info_t_dock_id_during_configuration_set
    __swig_getmethods__["dock_id_during_configuration"] = _apdm.apdm_device_info_t_dock_id_during_configuration_get
    if _newclass:dock_id_during_configuration = _swig_property(_apdm.apdm_device_info_t_dock_id_during_configuration_get, _apdm.apdm_device_info_t_dock_id_during_configuration_set)
    __swig_setmethods__["dock_hardware_version_during_configuration"] = _apdm.apdm_device_info_t_dock_hardware_version_during_configuration_set
    __swig_getmethods__["dock_hardware_version_during_configuration"] = _apdm.apdm_device_info_t_dock_hardware_version_during_configuration_get
    if _newclass:dock_hardware_version_during_configuration = _swig_property(_apdm.apdm_device_info_t_dock_hardware_version_during_configuration_get, _apdm.apdm_device_info_t_dock_hardware_version_during_configuration_set)
    __swig_setmethods__["v2_config"] = _apdm.apdm_device_info_t_v2_config_set
    __swig_getmethods__["v2_config"] = _apdm.apdm_device_info_t_v2_config_get
    if _newclass:v2_config = _swig_property(_apdm.apdm_device_info_t_v2_config_get, _apdm.apdm_device_info_t_v2_config_set)
    __swig_setmethods__["ap_rx_rssi"] = _apdm.apdm_device_info_t_ap_rx_rssi_set
    __swig_getmethods__["ap_rx_rssi"] = _apdm.apdm_device_info_t_ap_rx_rssi_get
    if _newclass:ap_rx_rssi = _swig_property(_apdm.apdm_device_info_t_ap_rx_rssi_get, _apdm.apdm_device_info_t_ap_rx_rssi_set)
    __swig_setmethods__["v2_device_statistics"] = _apdm.apdm_device_info_t_v2_device_statistics_set
    __swig_getmethods__["v2_device_statistics"] = _apdm.apdm_device_info_t_v2_device_statistics_get
    if _newclass:v2_device_statistics = _swig_property(_apdm.apdm_device_info_t_v2_device_statistics_get, _apdm.apdm_device_info_t_v2_device_statistics_set)
    __swig_setmethods__["ap_sensor_status_data"] = _apdm.apdm_device_info_t_ap_sensor_status_data_set
    __swig_getmethods__["ap_sensor_status_data"] = _apdm.apdm_device_info_t_ap_sensor_status_data_get
    if _newclass:ap_sensor_status_data = _swig_property(_apdm.apdm_device_info_t_ap_sensor_status_data_get, _apdm.apdm_device_info_t_ap_sensor_status_data_set)
    __swig_setmethods__["have_ss_data"] = _apdm.apdm_device_info_t_have_ss_data_set
    __swig_getmethods__["have_ss_data"] = _apdm.apdm_device_info_t_have_ss_data_get
    if _newclass:have_ss_data = _swig_property(_apdm.apdm_device_info_t_have_ss_data_get, _apdm.apdm_device_info_t_have_ss_data_set)
    __swig_setmethods__["last_received_compressed_stm32_time_us"] = _apdm.apdm_device_info_t_last_received_compressed_stm32_time_us_set
    __swig_getmethods__["last_received_compressed_stm32_time_us"] = _apdm.apdm_device_info_t_last_received_compressed_stm32_time_us_get
    if _newclass:last_received_compressed_stm32_time_us = _swig_property(_apdm.apdm_device_info_t_last_received_compressed_stm32_time_us_get, _apdm.apdm_device_info_t_last_received_compressed_stm32_time_us_set)
    __swig_setmethods__["v2_device_location"] = _apdm.apdm_device_info_t_v2_device_location_set
    __swig_getmethods__["v2_device_location"] = _apdm.apdm_device_info_t_v2_device_location_get
    if _newclass:v2_device_location = _swig_property(_apdm.apdm_device_info_t_v2_device_location_get, _apdm.apdm_device_info_t_v2_device_location_set)
    def __init__(self): 
        """__init__(self) -> apdm_device_info_t"""
        this = _apdm.new_apdm_device_info_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_device_info_t
    __del__ = lambda self : None;
apdm_device_info_t_swigregister = _apdm.apdm_device_info_t_swigregister
apdm_device_info_t_swigregister(apdm_device_info_t)

class apdm_streaming_status_t(_object):
    """Proxy of C apdm_streaming_status_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_streaming_status_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_streaming_status_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ap_sensor_status_data"] = _apdm.apdm_streaming_status_t_ap_sensor_status_data_set
    __swig_getmethods__["ap_sensor_status_data"] = _apdm.apdm_streaming_status_t_ap_sensor_status_data_get
    if _newclass:ap_sensor_status_data = _swig_property(_apdm.apdm_streaming_status_t_ap_sensor_status_data_get, _apdm.apdm_streaming_status_t_ap_sensor_status_data_set)
    def __init__(self): 
        """__init__(self) -> apdm_streaming_status_t"""
        this = _apdm.new_apdm_streaming_status_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_streaming_status_t
    __del__ = lambda self : None;
apdm_streaming_status_t_swigregister = _apdm.apdm_streaming_status_t_swigregister
apdm_streaming_status_t_swigregister(apdm_streaming_status_t)

class apdm_streaming_config_t(_object):
    """Proxy of C apdm_streaming_config_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_streaming_config_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_streaming_config_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wireless_channel_number"] = _apdm.apdm_streaming_config_t_wireless_channel_number_set
    __swig_getmethods__["wireless_channel_number"] = _apdm.apdm_streaming_config_t_wireless_channel_number_get
    if _newclass:wireless_channel_number = _swig_property(_apdm.apdm_streaming_config_t_wireless_channel_number_get, _apdm.apdm_streaming_config_t_wireless_channel_number_set)
    __swig_setmethods__["enable_sd_card"] = _apdm.apdm_streaming_config_t_enable_sd_card_set
    __swig_getmethods__["enable_sd_card"] = _apdm.apdm_streaming_config_t_enable_sd_card_get
    if _newclass:enable_sd_card = _swig_property(_apdm.apdm_streaming_config_t_enable_sd_card_get, _apdm.apdm_streaming_config_t_enable_sd_card_set)
    __swig_setmethods__["erase_sd_card"] = _apdm.apdm_streaming_config_t_erase_sd_card_set
    __swig_getmethods__["erase_sd_card"] = _apdm.apdm_streaming_config_t_erase_sd_card_get
    if _newclass:erase_sd_card = _swig_property(_apdm.apdm_streaming_config_t_erase_sd_card_get, _apdm.apdm_streaming_config_t_erase_sd_card_set)
    __swig_setmethods__["accel_full_scale_mode"] = _apdm.apdm_streaming_config_t_accel_full_scale_mode_set
    __swig_getmethods__["accel_full_scale_mode"] = _apdm.apdm_streaming_config_t_accel_full_scale_mode_get
    if _newclass:accel_full_scale_mode = _swig_property(_apdm.apdm_streaming_config_t_accel_full_scale_mode_get, _apdm.apdm_streaming_config_t_accel_full_scale_mode_set)
    __swig_setmethods__["enable_accel"] = _apdm.apdm_streaming_config_t_enable_accel_set
    __swig_getmethods__["enable_accel"] = _apdm.apdm_streaming_config_t_enable_accel_get
    if _newclass:enable_accel = _swig_property(_apdm.apdm_streaming_config_t_enable_accel_get, _apdm.apdm_streaming_config_t_enable_accel_set)
    __swig_setmethods__["enable_gyro"] = _apdm.apdm_streaming_config_t_enable_gyro_set
    __swig_getmethods__["enable_gyro"] = _apdm.apdm_streaming_config_t_enable_gyro_get
    if _newclass:enable_gyro = _swig_property(_apdm.apdm_streaming_config_t_enable_gyro_get, _apdm.apdm_streaming_config_t_enable_gyro_set)
    __swig_setmethods__["enable_mag"] = _apdm.apdm_streaming_config_t_enable_mag_set
    __swig_getmethods__["enable_mag"] = _apdm.apdm_streaming_config_t_enable_mag_get
    if _newclass:enable_mag = _swig_property(_apdm.apdm_streaming_config_t_enable_mag_get, _apdm.apdm_streaming_config_t_enable_mag_set)
    __swig_setmethods__["enable_pressure"] = _apdm.apdm_streaming_config_t_enable_pressure_set
    __swig_getmethods__["enable_pressure"] = _apdm.apdm_streaming_config_t_enable_pressure_get
    if _newclass:enable_pressure = _swig_property(_apdm.apdm_streaming_config_t_enable_pressure_get, _apdm.apdm_streaming_config_t_enable_pressure_set)
    __swig_setmethods__["apply_new_sensor_modes"] = _apdm.apdm_streaming_config_t_apply_new_sensor_modes_set
    __swig_getmethods__["apply_new_sensor_modes"] = _apdm.apdm_streaming_config_t_apply_new_sensor_modes_get
    if _newclass:apply_new_sensor_modes = _swig_property(_apdm.apdm_streaming_config_t_apply_new_sensor_modes_get, _apdm.apdm_streaming_config_t_apply_new_sensor_modes_set)
    __swig_setmethods__["set_configuration_on_device"] = _apdm.apdm_streaming_config_t_set_configuration_on_device_set
    __swig_getmethods__["set_configuration_on_device"] = _apdm.apdm_streaming_config_t_set_configuration_on_device_get
    if _newclass:set_configuration_on_device = _swig_property(_apdm.apdm_streaming_config_t_set_configuration_on_device_get, _apdm.apdm_streaming_config_t_set_configuration_on_device_set)
    __swig_setmethods__["decimation_rate"] = _apdm.apdm_streaming_config_t_decimation_rate_set
    __swig_getmethods__["decimation_rate"] = _apdm.apdm_streaming_config_t_decimation_rate_get
    if _newclass:decimation_rate = _swig_property(_apdm.apdm_streaming_config_t_decimation_rate_get, _apdm.apdm_streaming_config_t_decimation_rate_set)
    __swig_setmethods__["output_rate_hz"] = _apdm.apdm_streaming_config_t_output_rate_hz_set
    __swig_getmethods__["output_rate_hz"] = _apdm.apdm_streaming_config_t_output_rate_hz_get
    if _newclass:output_rate_hz = _swig_property(_apdm.apdm_streaming_config_t_output_rate_hz_get, _apdm.apdm_streaming_config_t_output_rate_hz_set)
    __swig_setmethods__["wireless_divider"] = _apdm.apdm_streaming_config_t_wireless_divider_set
    __swig_getmethods__["wireless_divider"] = _apdm.apdm_streaming_config_t_wireless_divider_get
    if _newclass:wireless_divider = _swig_property(_apdm.apdm_streaming_config_t_wireless_divider_get, _apdm.apdm_streaming_config_t_wireless_divider_set)
    __swig_setmethods__["button_enable"] = _apdm.apdm_streaming_config_t_button_enable_set
    __swig_getmethods__["button_enable"] = _apdm.apdm_streaming_config_t_button_enable_get
    if _newclass:button_enable = _swig_property(_apdm.apdm_streaming_config_t_button_enable_get, _apdm.apdm_streaming_config_t_button_enable_set)
    __swig_setmethods__["wireless_max_latency_ms"] = _apdm.apdm_streaming_config_t_wireless_max_latency_ms_set
    __swig_getmethods__["wireless_max_latency_ms"] = _apdm.apdm_streaming_config_t_wireless_max_latency_ms_get
    if _newclass:wireless_max_latency_ms = _swig_property(_apdm.apdm_streaming_config_t_wireless_max_latency_ms_get, _apdm.apdm_streaming_config_t_wireless_max_latency_ms_set)
    __swig_setmethods__["wireless_group_code"] = _apdm.apdm_streaming_config_t_wireless_group_code_set
    __swig_getmethods__["wireless_group_code"] = _apdm.apdm_streaming_config_t_wireless_group_code_get
    if _newclass:wireless_group_code = _swig_property(_apdm.apdm_streaming_config_t_wireless_group_code_get, _apdm.apdm_streaming_config_t_wireless_group_code_set)
    __swig_setmethods__["wireless_rapid_streaming"] = _apdm.apdm_streaming_config_t_wireless_rapid_streaming_set
    __swig_getmethods__["wireless_rapid_streaming"] = _apdm.apdm_streaming_config_t_wireless_rapid_streaming_get
    if _newclass:wireless_rapid_streaming = _swig_property(_apdm.apdm_streaming_config_t_wireless_rapid_streaming_get, _apdm.apdm_streaming_config_t_wireless_rapid_streaming_set)
    __swig_setmethods__["device_info_cache"] = _apdm.apdm_streaming_config_t_device_info_cache_set
    __swig_getmethods__["device_info_cache"] = _apdm.apdm_streaming_config_t_device_info_cache_get
    if _newclass:device_info_cache = _swig_property(_apdm.apdm_streaming_config_t_device_info_cache_get, _apdm.apdm_streaming_config_t_device_info_cache_set)
    def __init__(self): 
        """__init__(self) -> apdm_streaming_config_t"""
        this = _apdm.new_apdm_streaming_config_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_streaming_config_t
    __del__ = lambda self : None;
apdm_streaming_config_t_swigregister = _apdm.apdm_streaming_config_t_swigregister
apdm_streaming_config_t_swigregister(apdm_streaming_config_t)

class apdm_recording_info_t(_object):
    """Proxy of C apdm_recording_info_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_recording_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_recording_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device_info"] = _apdm.apdm_recording_info_t_device_info_set
    __swig_getmethods__["device_info"] = _apdm.apdm_recording_info_t_device_info_get
    if _newclass:device_info = _swig_property(_apdm.apdm_recording_info_t_device_info_get, _apdm.apdm_recording_info_t_device_info_set)
    __swig_setmethods__["start_sync_count"] = _apdm.apdm_recording_info_t_start_sync_count_set
    __swig_getmethods__["start_sync_count"] = _apdm.apdm_recording_info_t_start_sync_count_get
    if _newclass:start_sync_count = _swig_property(_apdm.apdm_recording_info_t_start_sync_count_get, _apdm.apdm_recording_info_t_start_sync_count_set)
    __swig_setmethods__["end_sync_count"] = _apdm.apdm_recording_info_t_end_sync_count_set
    __swig_getmethods__["end_sync_count"] = _apdm.apdm_recording_info_t_end_sync_count_get
    if _newclass:end_sync_count = _swig_property(_apdm.apdm_recording_info_t_end_sync_count_get, _apdm.apdm_recording_info_t_end_sync_count_set)
    __swig_setmethods__["epoch_time_offset_us"] = _apdm.apdm_recording_info_t_epoch_time_offset_us_set
    __swig_getmethods__["epoch_time_offset_us"] = _apdm.apdm_recording_info_t_epoch_time_offset_us_get
    if _newclass:epoch_time_offset_us = _swig_property(_apdm.apdm_recording_info_t_epoch_time_offset_us_get, _apdm.apdm_recording_info_t_epoch_time_offset_us_set)
    __swig_setmethods__["num_samples"] = _apdm.apdm_recording_info_t_num_samples_set
    __swig_getmethods__["num_samples"] = _apdm.apdm_recording_info_t_num_samples_get
    if _newclass:num_samples = _swig_property(_apdm.apdm_recording_info_t_num_samples_get, _apdm.apdm_recording_info_t_num_samples_set)
    def __init__(self): 
        """__init__(self) -> apdm_recording_info_t"""
        this = _apdm.new_apdm_recording_info_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_recording_info_t
    __del__ = lambda self : None;
apdm_recording_info_t_swigregister = _apdm.apdm_recording_info_t_swigregister
apdm_recording_info_t_swigregister(apdm_recording_info_t)

class apdm_annotation_t(_object):
    """Proxy of C apdm_annotation_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_annotation_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_annotation_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _apdm.apdm_annotation_t_time_set
    __swig_getmethods__["time"] = _apdm.apdm_annotation_t_time_get
    if _newclass:time = _swig_property(_apdm.apdm_annotation_t_time_get, _apdm.apdm_annotation_t_time_set)
    __swig_setmethods__["device_id"] = _apdm.apdm_annotation_t_device_id_set
    __swig_getmethods__["device_id"] = _apdm.apdm_annotation_t_device_id_get
    if _newclass:device_id = _swig_property(_apdm.apdm_annotation_t_device_id_get, _apdm.apdm_annotation_t_device_id_set)
    __swig_setmethods__["text"] = _apdm.apdm_annotation_t_text_set
    __swig_getmethods__["text"] = _apdm.apdm_annotation_t_text_get
    if _newclass:text = _swig_property(_apdm.apdm_annotation_t_text_get, _apdm.apdm_annotation_t_text_set)
    def __init__(self): 
        """__init__(self) -> apdm_annotation_t"""
        this = _apdm.new_apdm_annotation_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_annotation_t
    __del__ = lambda self : None;
apdm_annotation_t_swigregister = _apdm.apdm_annotation_t_swigregister
apdm_annotation_t_swigregister(apdm_annotation_t)

class apdm_error_table_t(_object):
    """Proxy of C apdm_error_table_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_error_table_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_error_table_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _apdm.apdm_error_table_t_time_set
    __swig_getmethods__["time"] = _apdm.apdm_error_table_t_time_get
    if _newclass:time = _swig_property(_apdm.apdm_error_table_t_time_get, _apdm.apdm_error_table_t_time_set)
    __swig_setmethods__["error_id"] = _apdm.apdm_error_table_t_error_id_set
    __swig_getmethods__["error_id"] = _apdm.apdm_error_table_t_error_id_get
    if _newclass:error_id = _swig_property(_apdm.apdm_error_table_t_error_id_get, _apdm.apdm_error_table_t_error_id_set)
    __swig_setmethods__["name"] = _apdm.apdm_error_table_t_name_set
    __swig_getmethods__["name"] = _apdm.apdm_error_table_t_name_get
    if _newclass:name = _swig_property(_apdm.apdm_error_table_t_name_get, _apdm.apdm_error_table_t_name_set)
    __swig_setmethods__["value"] = _apdm.apdm_error_table_t_value_set
    __swig_getmethods__["value"] = _apdm.apdm_error_table_t_value_get
    if _newclass:value = _swig_property(_apdm.apdm_error_table_t_value_get, _apdm.apdm_error_table_t_value_set)
    def __init__(self): 
        """__init__(self) -> apdm_error_table_t"""
        this = _apdm.new_apdm_error_table_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_error_table_t
    __del__ = lambda self : None;
apdm_error_table_t_swigregister = _apdm.apdm_error_table_t_swigregister
apdm_error_table_t_swigregister(apdm_error_table_t)

class apdm_v2_config_table_t(_object):
    """Proxy of C apdm_v2_config_table_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_v2_config_table_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_v2_config_table_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["config_id"] = _apdm.apdm_v2_config_table_t_config_id_set
    __swig_getmethods__["config_id"] = _apdm.apdm_v2_config_table_t_config_id_get
    if _newclass:config_id = _swig_property(_apdm.apdm_v2_config_table_t_config_id_get, _apdm.apdm_v2_config_table_t_config_id_set)
    __swig_setmethods__["name"] = _apdm.apdm_v2_config_table_t_name_set
    __swig_getmethods__["name"] = _apdm.apdm_v2_config_table_t_name_get
    if _newclass:name = _swig_property(_apdm.apdm_v2_config_table_t_name_get, _apdm.apdm_v2_config_table_t_name_set)
    __swig_setmethods__["value"] = _apdm.apdm_v2_config_table_t_value_set
    __swig_getmethods__["value"] = _apdm.apdm_v2_config_table_t_value_get
    if _newclass:value = _swig_property(_apdm.apdm_v2_config_table_t_value_get, _apdm.apdm_v2_config_table_t_value_set)
    def __init__(self): 
        """__init__(self) -> apdm_v2_config_table_t"""
        this = _apdm.new_apdm_v2_config_table_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_v2_config_table_t
    __del__ = lambda self : None;
apdm_v2_config_table_t_swigregister = _apdm.apdm_v2_config_table_t_swigregister
apdm_v2_config_table_t_swigregister(apdm_v2_config_table_t)

class apdm_v2_config_string_table_t(_object):
    """Proxy of C apdm_v2_config_string_table_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_v2_config_string_table_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_v2_config_string_table_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["config_string_id"] = _apdm.apdm_v2_config_string_table_t_config_string_id_set
    __swig_getmethods__["config_string_id"] = _apdm.apdm_v2_config_string_table_t_config_string_id_get
    if _newclass:config_string_id = _swig_property(_apdm.apdm_v2_config_string_table_t_config_string_id_get, _apdm.apdm_v2_config_string_table_t_config_string_id_set)
    __swig_setmethods__["name"] = _apdm.apdm_v2_config_string_table_t_name_set
    __swig_getmethods__["name"] = _apdm.apdm_v2_config_string_table_t_name_get
    if _newclass:name = _swig_property(_apdm.apdm_v2_config_string_table_t_name_get, _apdm.apdm_v2_config_string_table_t_name_set)
    __swig_setmethods__["value"] = _apdm.apdm_v2_config_string_table_t_value_set
    __swig_getmethods__["value"] = _apdm.apdm_v2_config_string_table_t_value_get
    if _newclass:value = _swig_property(_apdm.apdm_v2_config_string_table_t_value_get, _apdm.apdm_v2_config_string_table_t_value_set)
    def __init__(self): 
        """__init__(self) -> apdm_v2_config_string_table_t"""
        this = _apdm.new_apdm_v2_config_string_table_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_v2_config_string_table_t
    __del__ = lambda self : None;
apdm_v2_config_string_table_t_swigregister = _apdm.apdm_v2_config_string_table_t_swigregister
apdm_v2_config_string_table_t_swigregister(apdm_v2_config_string_table_t)

class apdm_v2_config_misc_table_t(_object):
    """Proxy of C apdm_v2_config_misc_table_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_v2_config_misc_table_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_v2_config_misc_table_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _apdm.apdm_v2_config_misc_table_t_name_set
    __swig_getmethods__["name"] = _apdm.apdm_v2_config_misc_table_t_name_get
    if _newclass:name = _swig_property(_apdm.apdm_v2_config_misc_table_t_name_get, _apdm.apdm_v2_config_misc_table_t_name_set)
    __swig_setmethods__["value"] = _apdm.apdm_v2_config_misc_table_t_value_set
    __swig_getmethods__["value"] = _apdm.apdm_v2_config_misc_table_t_value_get
    if _newclass:value = _swig_property(_apdm.apdm_v2_config_misc_table_t_value_get, _apdm.apdm_v2_config_misc_table_t_value_set)
    def __init__(self): 
        """__init__(self) -> apdm_v2_config_misc_table_t"""
        this = _apdm.new_apdm_v2_config_misc_table_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_v2_config_misc_table_t
    __del__ = lambda self : None;
apdm_v2_config_misc_table_t_swigregister = _apdm.apdm_v2_config_misc_table_t_swigregister
apdm_v2_config_misc_table_t_swigregister(apdm_v2_config_misc_table_t)

class apdm_progress_t(_object):
    """Proxy of C apdm_progress_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_progress_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_progress_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["task"] = _apdm.apdm_progress_t_task_set
    __swig_getmethods__["task"] = _apdm.apdm_progress_t_task_get
    if _newclass:task = _swig_property(_apdm.apdm_progress_t_task_get, _apdm.apdm_progress_t_task_set)
    __swig_setmethods__["num_tasks"] = _apdm.apdm_progress_t_num_tasks_set
    __swig_getmethods__["num_tasks"] = _apdm.apdm_progress_t_num_tasks_get
    if _newclass:num_tasks = _swig_property(_apdm.apdm_progress_t_num_tasks_get, _apdm.apdm_progress_t_num_tasks_set)
    __swig_setmethods__["task_index"] = _apdm.apdm_progress_t_task_index_set
    __swig_getmethods__["task_index"] = _apdm.apdm_progress_t_task_index_get
    if _newclass:task_index = _swig_property(_apdm.apdm_progress_t_task_index_get, _apdm.apdm_progress_t_task_index_set)
    __swig_setmethods__["percent_complete"] = _apdm.apdm_progress_t_percent_complete_set
    __swig_getmethods__["percent_complete"] = _apdm.apdm_progress_t_percent_complete_get
    if _newclass:percent_complete = _swig_property(_apdm.apdm_progress_t_percent_complete_get, _apdm.apdm_progress_t_percent_complete_set)
    def __init__(self): 
        """__init__(self) -> apdm_progress_t"""
        this = _apdm.new_apdm_progress_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_progress_t
    __del__ = lambda self : None;
apdm_progress_t_swigregister = _apdm.apdm_progress_t_swigregister
apdm_progress_t_swigregister(apdm_progress_t)

class apdm_monitor_label_t(_object):
    """Proxy of C apdm_monitor_label_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_monitor_label_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_monitor_label_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _apdm.apdm_monitor_label_t_label_set
    __swig_getmethods__["label"] = _apdm.apdm_monitor_label_t_label_get
    if _newclass:label = _swig_property(_apdm.apdm_monitor_label_t_label_get, _apdm.apdm_monitor_label_t_label_set)
    def __init__(self): 
        """__init__(self) -> apdm_monitor_label_t"""
        this = _apdm.new_apdm_monitor_label_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_monitor_label_t
    __del__ = lambda self : None;
apdm_monitor_label_t_swigregister = _apdm.apdm_monitor_label_t_swigregister
apdm_monitor_label_t_swigregister(apdm_monitor_label_t)

class apdm_case_id_t(_object):
    """Proxy of C apdm_case_id_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_case_id_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_case_id_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _apdm.apdm_case_id_t_id_set
    __swig_getmethods__["id"] = _apdm.apdm_case_id_t_id_get
    if _newclass:id = _swig_property(_apdm.apdm_case_id_t_id_get, _apdm.apdm_case_id_t_id_set)
    def __init__(self): 
        """__init__(self) -> apdm_case_id_t"""
        this = _apdm.new_apdm_case_id_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_case_id_t
    __del__ = lambda self : None;
apdm_case_id_t_swigregister = _apdm.apdm_case_id_t_swigregister
apdm_case_id_t_swigregister(apdm_case_id_t)

class apdm_magnetometer_recalibration_t(_object):
    """Proxy of C apdm_magnetometer_recalibration_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_magnetometer_recalibration_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_magnetometer_recalibration_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file"] = _apdm.apdm_magnetometer_recalibration_t_file_set
    __swig_getmethods__["file"] = _apdm.apdm_magnetometer_recalibration_t_file_get
    if _newclass:file = _swig_property(_apdm.apdm_magnetometer_recalibration_t_file_get, _apdm.apdm_magnetometer_recalibration_t_file_set)
    __swig_setmethods__["local_field_magnitude"] = _apdm.apdm_magnetometer_recalibration_t_local_field_magnitude_set
    __swig_getmethods__["local_field_magnitude"] = _apdm.apdm_magnetometer_recalibration_t_local_field_magnitude_get
    if _newclass:local_field_magnitude = _swig_property(_apdm.apdm_magnetometer_recalibration_t_local_field_magnitude_get, _apdm.apdm_magnetometer_recalibration_t_local_field_magnitude_set)
    __swig_setmethods__["calibration_block"] = _apdm.apdm_magnetometer_recalibration_t_calibration_block_set
    __swig_getmethods__["calibration_block"] = _apdm.apdm_magnetometer_recalibration_t_calibration_block_get
    if _newclass:calibration_block = _swig_property(_apdm.apdm_magnetometer_recalibration_t_calibration_block_get, _apdm.apdm_magnetometer_recalibration_t_calibration_block_set)
    __swig_setmethods__["original_calibrated_data"] = _apdm.apdm_magnetometer_recalibration_t_original_calibrated_data_set
    __swig_getmethods__["original_calibrated_data"] = _apdm.apdm_magnetometer_recalibration_t_original_calibrated_data_get
    if _newclass:original_calibrated_data = _swig_property(_apdm.apdm_magnetometer_recalibration_t_original_calibrated_data_get, _apdm.apdm_magnetometer_recalibration_t_original_calibrated_data_set)
    __swig_setmethods__["updated_calibrated_data"] = _apdm.apdm_magnetometer_recalibration_t_updated_calibrated_data_set
    __swig_getmethods__["updated_calibrated_data"] = _apdm.apdm_magnetometer_recalibration_t_updated_calibrated_data_get
    if _newclass:updated_calibrated_data = _swig_property(_apdm.apdm_magnetometer_recalibration_t_updated_calibrated_data_get, _apdm.apdm_magnetometer_recalibration_t_updated_calibrated_data_set)
    __swig_setmethods__["num_samples"] = _apdm.apdm_magnetometer_recalibration_t_num_samples_set
    __swig_getmethods__["num_samples"] = _apdm.apdm_magnetometer_recalibration_t_num_samples_get
    if _newclass:num_samples = _swig_property(_apdm.apdm_magnetometer_recalibration_t_num_samples_get, _apdm.apdm_magnetometer_recalibration_t_num_samples_set)
    def __init__(self): 
        """__init__(self) -> apdm_magnetometer_recalibration_t"""
        this = _apdm.new_apdm_magnetometer_recalibration_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_magnetometer_recalibration_t
    __del__ = lambda self : None;
apdm_magnetometer_recalibration_t_swigregister = _apdm.apdm_magnetometer_recalibration_t_swigregister
apdm_magnetometer_recalibration_t_swigregister(apdm_magnetometer_recalibration_t)

class apdm_file_conversion_parameter_t(_object):
    """Proxy of C apdm_file_conversion_parameter_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_file_conversion_parameter_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_file_conversion_parameter_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["files_to_convert"] = _apdm.apdm_file_conversion_parameter_t_files_to_convert_set
    __swig_getmethods__["files_to_convert"] = _apdm.apdm_file_conversion_parameter_t_files_to_convert_get
    if _newclass:files_to_convert = _swig_property(_apdm.apdm_file_conversion_parameter_t_files_to_convert_get, _apdm.apdm_file_conversion_parameter_t_files_to_convert_set)
    __swig_setmethods__["nFiles"] = _apdm.apdm_file_conversion_parameter_t_nFiles_set
    __swig_getmethods__["nFiles"] = _apdm.apdm_file_conversion_parameter_t_nFiles_get
    if _newclass:nFiles = _swig_property(_apdm.apdm_file_conversion_parameter_t_nFiles_get, _apdm.apdm_file_conversion_parameter_t_nFiles_set)
    __swig_setmethods__["file_out"] = _apdm.apdm_file_conversion_parameter_t_file_out_set
    __swig_getmethods__["file_out"] = _apdm.apdm_file_conversion_parameter_t_file_out_get
    if _newclass:file_out = _swig_property(_apdm.apdm_file_conversion_parameter_t_file_out_get, _apdm.apdm_file_conversion_parameter_t_file_out_set)
    __swig_setmethods__["store_raw"] = _apdm.apdm_file_conversion_parameter_t_store_raw_set
    __swig_getmethods__["store_raw"] = _apdm.apdm_file_conversion_parameter_t_store_raw_get
    if _newclass:store_raw = _swig_property(_apdm.apdm_file_conversion_parameter_t_store_raw_get, _apdm.apdm_file_conversion_parameter_t_store_raw_set)
    __swig_setmethods__["store_si"] = _apdm.apdm_file_conversion_parameter_t_store_si_set
    __swig_getmethods__["store_si"] = _apdm.apdm_file_conversion_parameter_t_store_si_get
    if _newclass:store_si = _swig_property(_apdm.apdm_file_conversion_parameter_t_store_si_get, _apdm.apdm_file_conversion_parameter_t_store_si_set)
    __swig_setmethods__["store_filtered"] = _apdm.apdm_file_conversion_parameter_t_store_filtered_set
    __swig_getmethods__["store_filtered"] = _apdm.apdm_file_conversion_parameter_t_store_filtered_get
    if _newclass:store_filtered = _swig_property(_apdm.apdm_file_conversion_parameter_t_store_filtered_get, _apdm.apdm_file_conversion_parameter_t_store_filtered_set)
    __swig_setmethods__["format_hdf"] = _apdm.apdm_file_conversion_parameter_t_format_hdf_set
    __swig_getmethods__["format_hdf"] = _apdm.apdm_file_conversion_parameter_t_format_hdf_get
    if _newclass:format_hdf = _swig_property(_apdm.apdm_file_conversion_parameter_t_format_hdf_get, _apdm.apdm_file_conversion_parameter_t_format_hdf_set)
    __swig_setmethods__["compress"] = _apdm.apdm_file_conversion_parameter_t_compress_set
    __swig_getmethods__["compress"] = _apdm.apdm_file_conversion_parameter_t_compress_get
    if _newclass:compress = _swig_property(_apdm.apdm_file_conversion_parameter_t_compress_get, _apdm.apdm_file_conversion_parameter_t_compress_set)
    __swig_setmethods__["csv_delimiter"] = _apdm.apdm_file_conversion_parameter_t_csv_delimiter_set
    __swig_getmethods__["csv_delimiter"] = _apdm.apdm_file_conversion_parameter_t_csv_delimiter_get
    if _newclass:csv_delimiter = _swig_property(_apdm.apdm_file_conversion_parameter_t_csv_delimiter_get, _apdm.apdm_file_conversion_parameter_t_csv_delimiter_set)
    __swig_setmethods__["progress"] = _apdm.apdm_file_conversion_parameter_t_progress_set
    __swig_getmethods__["progress"] = _apdm.apdm_file_conversion_parameter_t_progress_get
    if _newclass:progress = _swig_property(_apdm.apdm_file_conversion_parameter_t_progress_get, _apdm.apdm_file_conversion_parameter_t_progress_set)
    __swig_setmethods__["sync_start"] = _apdm.apdm_file_conversion_parameter_t_sync_start_set
    __swig_getmethods__["sync_start"] = _apdm.apdm_file_conversion_parameter_t_sync_start_get
    if _newclass:sync_start = _swig_property(_apdm.apdm_file_conversion_parameter_t_sync_start_get, _apdm.apdm_file_conversion_parameter_t_sync_start_set)
    __swig_setmethods__["sync_end"] = _apdm.apdm_file_conversion_parameter_t_sync_end_set
    __swig_getmethods__["sync_end"] = _apdm.apdm_file_conversion_parameter_t_sync_end_get
    if _newclass:sync_end = _swig_property(_apdm.apdm_file_conversion_parameter_t_sync_end_get, _apdm.apdm_file_conversion_parameter_t_sync_end_set)
    __swig_setmethods__["epoch_time_offset_us"] = _apdm.apdm_file_conversion_parameter_t_epoch_time_offset_us_set
    __swig_getmethods__["epoch_time_offset_us"] = _apdm.apdm_file_conversion_parameter_t_epoch_time_offset_us_get
    if _newclass:epoch_time_offset_us = _swig_property(_apdm.apdm_file_conversion_parameter_t_epoch_time_offset_us_get, _apdm.apdm_file_conversion_parameter_t_epoch_time_offset_us_set)
    __swig_setmethods__["timezone_string"] = _apdm.apdm_file_conversion_parameter_t_timezone_string_set
    __swig_getmethods__["timezone_string"] = _apdm.apdm_file_conversion_parameter_t_timezone_string_get
    if _newclass:timezone_string = _swig_property(_apdm.apdm_file_conversion_parameter_t_timezone_string_get, _apdm.apdm_file_conversion_parameter_t_timezone_string_set)
    __swig_setmethods__["dechop_raw_magnetometer"] = _apdm.apdm_file_conversion_parameter_t_dechop_raw_magnetometer_set
    __swig_getmethods__["dechop_raw_magnetometer"] = _apdm.apdm_file_conversion_parameter_t_dechop_raw_magnetometer_get
    if _newclass:dechop_raw_magnetometer = _swig_property(_apdm.apdm_file_conversion_parameter_t_dechop_raw_magnetometer_get, _apdm.apdm_file_conversion_parameter_t_dechop_raw_magnetometer_set)
    __swig_setmethods__["calibration_files"] = _apdm.apdm_file_conversion_parameter_t_calibration_files_set
    __swig_getmethods__["calibration_files"] = _apdm.apdm_file_conversion_parameter_t_calibration_files_get
    if _newclass:calibration_files = _swig_property(_apdm.apdm_file_conversion_parameter_t_calibration_files_get, _apdm.apdm_file_conversion_parameter_t_calibration_files_set)
    __swig_setmethods__["orientation_model"] = _apdm.apdm_file_conversion_parameter_t_orientation_model_set
    __swig_getmethods__["orientation_model"] = _apdm.apdm_file_conversion_parameter_t_orientation_model_get
    if _newclass:orientation_model = _swig_property(_apdm.apdm_file_conversion_parameter_t_orientation_model_get, _apdm.apdm_file_conversion_parameter_t_orientation_model_set)
    __swig_setmethods__["store_unsynchronized"] = _apdm.apdm_file_conversion_parameter_t_store_unsynchronized_set
    __swig_getmethods__["store_unsynchronized"] = _apdm.apdm_file_conversion_parameter_t_store_unsynchronized_get
    if _newclass:store_unsynchronized = _swig_property(_apdm.apdm_file_conversion_parameter_t_store_unsynchronized_get, _apdm.apdm_file_conversion_parameter_t_store_unsynchronized_set)
    __swig_setmethods__["store_all_sensors"] = _apdm.apdm_file_conversion_parameter_t_store_all_sensors_set
    __swig_getmethods__["store_all_sensors"] = _apdm.apdm_file_conversion_parameter_t_store_all_sensors_get
    if _newclass:store_all_sensors = _swig_property(_apdm.apdm_file_conversion_parameter_t_store_all_sensors_get, _apdm.apdm_file_conversion_parameter_t_store_all_sensors_set)
    def __init__(self): 
        """__init__(self) -> apdm_file_conversion_parameter_t"""
        this = _apdm.new_apdm_file_conversion_parameter_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_file_conversion_parameter_t
    __del__ = lambda self : None;
apdm_file_conversion_parameter_t_swigregister = _apdm.apdm_file_conversion_parameter_t_swigregister
apdm_file_conversion_parameter_t_swigregister(apdm_file_conversion_parameter_t)

class apdm_button_data_t(_object):
    """Proxy of C apdm_button_data_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apdm_button_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apdm_button_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device_button_data"] = _apdm.apdm_button_data_t_device_button_data_set
    __swig_getmethods__["device_button_data"] = _apdm.apdm_button_data_t_device_button_data_get
    if _newclass:device_button_data = _swig_property(_apdm.apdm_button_data_t_device_button_data_get, _apdm.apdm_button_data_t_device_button_data_set)
    __swig_setmethods__["unix_epoch_second"] = _apdm.apdm_button_data_t_unix_epoch_second_set
    __swig_getmethods__["unix_epoch_second"] = _apdm.apdm_button_data_t_unix_epoch_second_get
    if _newclass:unix_epoch_second = _swig_property(_apdm.apdm_button_data_t_unix_epoch_second_get, _apdm.apdm_button_data_t_unix_epoch_second_set)
    __swig_setmethods__["sync_val64"] = _apdm.apdm_button_data_t_sync_val64_set
    __swig_getmethods__["sync_val64"] = _apdm.apdm_button_data_t_sync_val64_get
    if _newclass:sync_val64 = _swig_property(_apdm.apdm_button_data_t_sync_val64_get, _apdm.apdm_button_data_t_sync_val64_set)
    def __init__(self): 
        """__init__(self) -> apdm_button_data_t"""
        this = _apdm.new_apdm_button_data_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_apdm_button_data_t
    __del__ = lambda self : None;
apdm_button_data_t_swigregister = _apdm.apdm_button_data_t_swigregister
apdm_button_data_t_swigregister(apdm_button_data_t)


def apdm_ap_get_num_access_points_on_host1(*args):
  """apdm_ap_get_num_access_points_on_host1(dest) -> int"""
  return _apdm.apdm_ap_get_num_access_points_on_host1(*args)

def apdm_v1_ap_get_num_accesspoints_on_host(*args):
  """apdm_v1_ap_get_num_accesspoints_on_host(dest) -> int"""
  return _apdm.apdm_v1_ap_get_num_accesspoints_on_host(*args)

def apdm_v2_get_num_dockingstations_on_host(*args):
  """apdm_v2_get_num_dockingstations_on_host(num_devices) -> int"""
  return _apdm.apdm_v2_get_num_dockingstations_on_host(*args)

def apdm_v2_ap_get_num_accesspoints_on_host(*args):
  """apdm_v2_ap_get_num_accesspoints_on_host(dest) -> int"""
  return _apdm.apdm_v2_ap_get_num_accesspoints_on_host(*args)

def apdm_ap_connect(*args):
  """apdm_ap_connect(ap_handle, indexNumber) -> int"""
  return _apdm.apdm_ap_connect(*args)

def apdm_ap_disconnect(*args):
  """apdm_ap_disconnect(ap_handle) -> int"""
  return _apdm.apdm_ap_disconnect(*args)

def apdm_ap_init_handle(*args):
  """apdm_ap_init_handle(ap_handle) -> int"""
  return _apdm.apdm_ap_init_handle(*args)

def apdm_sensor_close_and_free(*args):
  """apdm_sensor_close_and_free(device_handle) -> int"""
  return _apdm.apdm_sensor_close_and_free(*args)

def apdm_sensor_allocate_and_open(*args):
  """apdm_sensor_allocate_and_open(sensor_index) -> apdm_device_handle_t"""
  return _apdm.apdm_sensor_allocate_and_open(*args)

def apdm_sensor_free_handle(*args):
  """apdm_sensor_free_handle(device_handle)"""
  return _apdm.apdm_sensor_free_handle(*args)

def apdm_sensor_allocate_handle():
  """apdm_sensor_allocate_handle() -> apdm_device_handle_t"""
  return _apdm.apdm_sensor_allocate_handle()

def apdm_sensor_open(*args):
  """apdm_sensor_open(device_handle, device_index) -> int"""
  return _apdm.apdm_sensor_open(*args)

def apdm_sensor_list_attached_sensors3(*args):
  """apdm_sensor_list_attached_sensors3(serial_number_buffer, buffer_length) -> int"""
  return _apdm.apdm_sensor_list_attached_sensors3(*args)

def apdm_sensor_get_num_attached_dockingstations1():
  """apdm_sensor_get_num_attached_dockingstations1() -> int"""
  return _apdm.apdm_sensor_get_num_attached_dockingstations1()

def apdm_ds_sensor_get_num_attached_dockingstations2():
  """apdm_ds_sensor_get_num_attached_dockingstations2() -> int"""
  return _apdm.apdm_ds_sensor_get_num_attached_dockingstations2()

def apdm_v2_get_num_monitors_on_host(*args):
  """apdm_v2_get_num_monitors_on_host(dest) -> int"""
  return _apdm.apdm_v2_get_num_monitors_on_host(*args)

def apdm_v2_data_error_mode(*args):
  """apdm_v2_data_error_mode(h, enable_flag) -> int"""
  return _apdm.apdm_v2_data_error_mode(*args)

def apdm_v2_clear_all_errors(*args):
  """apdm_v2_clear_all_errors(h) -> int"""
  return _apdm.apdm_v2_clear_all_errors(*args)

def apdm_sensor_close(*args):
  """apdm_sensor_close(device_handle) -> int"""
  return _apdm.apdm_sensor_close(*args)

def apdm_sensor_verify_supported_calibration_version(*args):
  """apdm_sensor_verify_supported_calibration_version(device_handle) -> int"""
  return _apdm.apdm_sensor_verify_supported_calibration_version(*args)

def apdm_ctx_set_correlation_fifo_temp_directory(*args):
  """apdm_ctx_set_correlation_fifo_temp_directory(directory) -> int"""
  return _apdm.apdm_ctx_set_correlation_fifo_temp_directory(*args)

def apdm_calibration_override_minimum_supported_version(*args):
  """apdm_calibration_override_minimum_supported_version(new_version) -> int"""
  return _apdm.apdm_calibration_override_minimum_supported_version(*args)

def apdm_sensor_verify_supported_version(*args):
  """apdm_sensor_verify_supported_version(device_handle) -> int"""
  return _apdm.apdm_sensor_verify_supported_version(*args)

def apdm_sensor_override_minimum_supported_version(*args):
  """apdm_sensor_override_minimum_supported_version(new_version) -> int"""
  return _apdm.apdm_sensor_override_minimum_supported_version(*args)

def apdm_sensor_comm_channel_verify_supported_version(*args):
  """apdm_sensor_comm_channel_verify_supported_version(device_handle) -> int"""
  return _apdm.apdm_sensor_comm_channel_verify_supported_version(*args)

def apdm_ds_override_minimum_supported_version(*args):
  """apdm_ds_override_minimum_supported_version(new_version) -> int"""
  return _apdm.apdm_ds_override_minimum_supported_version(*args)

def apdm_ap_get_monitor_latency(*args):
  """apdm_ap_get_monitor_latency(ap_handle, monitor_id, dest) -> int"""
  return _apdm.apdm_ap_get_monitor_latency(*args)

def apdm_ap_set_warning_blink_threshold(*args):
  """apdm_ap_set_warning_blink_threshold(ap_handle, delta_threshold) -> int"""
  return _apdm.apdm_ap_set_warning_blink_threshold(*args)

def apdm_ap_set_error_blink_threshold(*args):
  """apdm_ap_set_error_blink_threshold(ap_handle, delta_threshold) -> int"""
  return _apdm.apdm_ap_set_error_blink_threshold(*args)

def apdm_ap_get_wireless_streaming_led_status(*args):
  """apdm_ap_get_wireless_streaming_led_status(ap_handle, dest) -> int"""
  return _apdm.apdm_ap_get_wireless_streaming_led_status(*args)

def apdm_ap_wireless_streaming_status_t_str(*args):
  """apdm_ap_wireless_streaming_status_t_str(streaming_status) -> char const *"""
  return _apdm.apdm_ap_wireless_streaming_status_t_str(*args)

def adpm_ap_set_max_latency_value_seconds(*args):
  """adpm_ap_set_max_latency_value_seconds(ap_handle, max_latency_seconds) -> int"""
  return _apdm.adpm_ap_set_max_latency_value_seconds(*args)

def adpm_ap_set_minimum_sync_value(*args):
  """adpm_ap_set_minimum_sync_value(ap_handle, minimum_sync_value) -> int"""
  return _apdm.adpm_ap_set_minimum_sync_value(*args)

def adpm_ap_get_minimum_sync_value(*args):
  """adpm_ap_get_minimum_sync_value(ap_handle, minimum_sync_value) -> int"""
  return _apdm.adpm_ap_get_minimum_sync_value(*args)

def apdm_ap_get_io_value(*args):
  """apdm_ap_get_io_value(ap_handle, gpio_pin) -> int"""
  return _apdm.apdm_ap_get_io_value(*args)

def apdm_ap_set_io_value(*args):
  """apdm_ap_set_io_value(ap_handle, gpio_pin, output_value) -> int"""
  return _apdm.apdm_ap_set_io_value(*args)

def apdm_ctx_ap_get_io_value(*args):
  """apdm_ctx_ap_get_io_value(context, ap_id, gpio_pin) -> int"""
  return _apdm.apdm_ctx_ap_get_io_value(*args)

def apdm_ctx_ap_sync_box_query(*args):
  """apdm_ctx_ap_sync_box_query(context, ap_id, cmd) -> int"""
  return _apdm.apdm_ctx_ap_sync_box_query(*args)

def apdm_ctx_ap_set_io_value(*args):
  """apdm_ctx_ap_set_io_value(context, ap_id, gpio_pin, output_value) -> int"""
  return _apdm.apdm_ctx_ap_set_io_value(*args)

def apdm_ctx_ap_sync_box_attached(*args):
  """apdm_ctx_ap_sync_box_attached(context, ap_id, dest) -> int"""
  return _apdm.apdm_ctx_ap_sync_box_attached(*args)

def apdm_ctx_set_minimum_sync_value(*args):
  """apdm_ctx_set_minimum_sync_value(context, minimum_sync_value) -> int"""
  return _apdm.apdm_ctx_set_minimum_sync_value(*args)

def apdm_ctx_get_expected_number_of_sensors2(*args):
  """apdm_ctx_get_expected_number_of_sensors2(context, dest) -> int"""
  return _apdm.apdm_ctx_get_expected_number_of_sensors2(*args)

def apdm_send_accesspoint_cmd(*args):
  """apdm_send_accesspoint_cmd(ap_handle, cmdToSend, BYTE_ARRAY, outputBufferLength, numLinesToRead, timeoutMilliseconds) -> int"""
  return _apdm.apdm_send_accesspoint_cmd(*args)

def apdm_ap_get_version_string(*args):
  """apdm_ap_get_version_string(ap_handle, BYTE_ARRAY, destLength) -> int"""
  return _apdm.apdm_ap_get_version_string(*args)

def apdm_ap_get_version(*args):
  """apdm_ap_get_version(ap_handle) -> int"""
  return _apdm.apdm_ap_get_version(*args)

def apdm_ap_get_board_version_string(*args):
  """apdm_ap_get_board_version_string(ap_handle, BYTE_ARRAY, destLength) -> int"""
  return _apdm.apdm_ap_get_board_version_string(*args)

def apdm_ap_get_id_and_board_version(*args):
  """apdm_ap_get_id_and_board_version(ap_handle) -> int"""
  return _apdm.apdm_ap_get_id_and_board_version(*args)

def apdm_ap_verify_supported_version(*args):
  """apdm_ap_verify_supported_version(ap_handle) -> int"""
  return _apdm.apdm_ap_verify_supported_version(*args)

def apdm_ap_override_minimum_supported_version(*args):
  """apdm_ap_override_minimum_supported_version(new_version) -> int"""
  return _apdm.apdm_ap_override_minimum_supported_version(*args)

def apdm_ap_get_id(*args):
  """apdm_ap_get_id(ap_handle, dest) -> int"""
  return _apdm.apdm_ap_get_id(*args)

def apdm_ap_get_case_id(*args):
  """apdm_ap_get_case_id(ap_handle, BYTE_ARRAY, dest_buffer_length) -> int"""
  return _apdm.apdm_ap_get_case_id(*args)

def apdm_ap_get_new_firmware_version_ok_flag(*args):
  """apdm_ap_get_new_firmware_version_ok_flag(ap_handle, dest) -> int"""
  return _apdm.apdm_ap_get_new_firmware_version_ok_flag(*args)

def apdm_ap_check_new_firmware_version(*args):
  """apdm_ap_check_new_firmware_version(ap_handle, new_firmware_version) -> int"""
  return _apdm.apdm_ap_check_new_firmware_version(*args)

def apdm_ap_reset_into_bootloader(*args):
  """apdm_ap_reset_into_bootloader(ap_handle) -> int"""
  return _apdm.apdm_ap_reset_into_bootloader(*args)

def apdm_ap_reset_into_firmware(*args):
  """apdm_ap_reset_into_firmware(ap_handle) -> int"""
  return _apdm.apdm_ap_reset_into_firmware(*args)

def apdm_ap_free_handle(*args):
  """apdm_ap_free_handle(ap_handle) -> int"""
  return _apdm.apdm_ap_free_handle(*args)

def apdm_ap_allocate_handle():
  """apdm_ap_allocate_handle() -> apdm_ap_handle_t"""
  return _apdm.apdm_ap_allocate_handle()

def apdm_ap_get_mode(*args):
  """apdm_ap_get_mode(ap_handle) -> int"""
  return _apdm.apdm_ap_get_mode(*args)

def apdm_ap_get_protocol_subversion(*args):
  """apdm_ap_get_protocol_subversion(ap_handle) -> int"""
  return _apdm.apdm_ap_get_protocol_subversion(*args)

def apdm_ctx_open_all_access_points(*args):
  """apdm_ctx_open_all_access_points(context) -> int"""
  return _apdm.apdm_ctx_open_all_access_points(*args)

def apdm_ctx_set_error_handling_mode(*args):
  """apdm_ctx_set_error_handling_mode(context, new_mode) -> enum APDM_Status"""
  return _apdm.apdm_ctx_set_error_handling_mode(*args)

def apdm_ctx_get_sensor_compensation_data(*args):
  """apdm_ctx_get_sensor_compensation_data(context, dest_comp_data, sensor_index) -> int"""
  return _apdm.apdm_ctx_get_sensor_compensation_data(*args)

def apdm_ctx_set_sensor_compensation_data(*args):
  """apdm_ctx_set_sensor_compensation_data(context, src_comp_data, sensor_index) -> int"""
  return _apdm.apdm_ctx_set_sensor_compensation_data(*args)

def apdm_ctx_get_expected_sync_delta(*args):
  """apdm_ctx_get_expected_sync_delta(context) -> int"""
  return _apdm.apdm_ctx_get_expected_sync_delta(*args)

def apdm_ctx_set_metadeta_uint32(*args):
  """apdm_ctx_set_metadeta_uint32(context, device_id, value) -> int"""
  return _apdm.apdm_ctx_set_metadeta_uint32(*args)

def apdm_ctx_set_metadata_string(*args):
  """apdm_ctx_set_metadata_string(context, device_id, str) -> int"""
  return _apdm.apdm_ctx_set_metadata_string(*args)

def apdm_ctx_get_metadata_string(*args):
  """apdm_ctx_get_metadata_string(context, device_id) -> char *"""
  return _apdm.apdm_ctx_get_metadata_string(*args)

def apdm_ctx_get_metadata_uint32(*args):
  """apdm_ctx_get_metadata_uint32(context, device_id) -> unsigned int"""
  return _apdm.apdm_ctx_get_metadata_uint32(*args)

def apdm_ctx_get_wireless_configuration_mode(*args):
  """apdm_ctx_get_wireless_configuration_mode(context) -> int"""
  return _apdm.apdm_ctx_get_wireless_configuration_mode(*args)

def apdm_ctx_get_device_info(*args):
  """apdm_ctx_get_device_info(context, device_id, dest) -> int"""
  return _apdm.apdm_ctx_get_device_info(*args)

def apdm_ctx_get_num_access_points_found(*args):
  """apdm_ctx_get_num_access_points_found(context) -> int"""
  return _apdm.apdm_ctx_get_num_access_points_found(*args)

def apdm_ctx_get_ap_id_for_ap_index(*args):
  """apdm_ctx_get_ap_id_for_ap_index(context, ap_index, dest) -> int"""
  return _apdm.apdm_ctx_get_ap_id_for_ap_index(*args)

def apdm_ctx_get_num_sample_lists_collected(*args):
  """apdm_ctx_get_num_sample_lists_collected(context) -> unsigned int"""
  return _apdm.apdm_ctx_get_num_sample_lists_collected(*args)

def apdm_ctx_get_num_samples_collected(*args):
  """apdm_ctx_get_num_samples_collected(context) -> unsigned int"""
  return _apdm.apdm_ctx_get_num_samples_collected(*args)

def apdm_ctx_get_num_samples_collected_from_device(*args):
  """apdm_ctx_get_num_samples_collected_from_device(context, device_id) -> unsigned int"""
  return _apdm.apdm_ctx_get_num_samples_collected_from_device(*args)

def apdm_ctx_get_total_omitted_sample_sets(*args):
  """apdm_ctx_get_total_omitted_sample_sets(context) -> unsigned int"""
  return _apdm.apdm_ctx_get_total_omitted_sample_sets(*args)

def apdm_ctx_get_num_omitted_sample_sets(*args):
  """apdm_ctx_get_num_omitted_sample_sets(context) -> unsigned int"""
  return _apdm.apdm_ctx_get_num_omitted_sample_sets(*args)

def apdm_ctx_get_num_omitted_samples(*args):
  """apdm_ctx_get_num_omitted_samples(context) -> unsigned int"""
  return _apdm.apdm_ctx_get_num_omitted_samples(*args)

def apdm_ctx_get_total_omitted_samples(*args):
  """apdm_ctx_get_total_omitted_samples(context) -> unsigned int"""
  return _apdm.apdm_ctx_get_total_omitted_samples(*args)

def apdm_ctx_get_sampling_frequency(*args):
  """apdm_ctx_get_sampling_frequency(context, dest) -> int"""
  return _apdm.apdm_ctx_get_sampling_frequency(*args)

def apdm_ctx_extract_data_by_device_id(*args):
  """apdm_ctx_extract_data_by_device_id(context, device_id, dest) -> int"""
  return _apdm.apdm_ctx_extract_data_by_device_id(*args)

def apdm_ctx_get_next_access_point_record(*args):
  """apdm_ctx_get_next_access_point_record(context, data, ap_index_number, allow_ap_transfer_flag) -> int"""
  return _apdm.apdm_ctx_get_next_access_point_record(*args)

def apdm_ctx_get_next_ranging_record(*args):
  """apdm_ctx_get_next_ranging_record(context, dest) -> int"""
  return _apdm.apdm_ctx_get_next_ranging_record(*args)

def apdm_ctx_sync_record_list_head(*args):
  """apdm_ctx_sync_record_list_head(context) -> int"""
  return _apdm.apdm_ctx_sync_record_list_head(*args)

def apdm_ctx_v2_mesh_data_ready(*args):
  """apdm_ctx_v2_mesh_data_ready(the_context) -> int"""
  return _apdm.apdm_ctx_v2_mesh_data_ready(*args)

def apdm_ctx_get_next_access_point_record_list(*args):
  """apdm_ctx_get_next_access_point_record_list(context) -> int"""
  return _apdm.apdm_ctx_get_next_access_point_record_list(*args)

def apdm_ctx_purge_older_samples(*args):
  """apdm_ctx_purge_older_samples(context) -> int"""
  return _apdm.apdm_ctx_purge_older_samples(*args)

def apdm_ctx_flush_ap_fifos(*args):
  """apdm_ctx_flush_ap_fifos(context) -> int"""
  return _apdm.apdm_ctx_flush_ap_fifos(*args)

def apdm_ctx_extract_next_sample(*args):
  """apdm_ctx_extract_next_sample(context, dest_record) -> int"""
  return _apdm.apdm_ctx_extract_next_sample(*args)

def apdm_ctx_get_next_synchronization_event(*args):
  """apdm_ctx_get_next_synchronization_event(context, dest) -> int"""
  return _apdm.apdm_ctx_get_next_synchronization_event(*args)

def apdm_ctx_get_next_button_event(*args):
  """apdm_ctx_get_next_button_event(context, dest) -> int"""
  return _apdm.apdm_ctx_get_next_button_event(*args)

def apdm_ctx_populate_buffers(*args):
  """apdm_ctx_populate_buffers(context) -> int"""
  return _apdm.apdm_ctx_populate_buffers(*args)

def apdm_ctx_get_next_record(*args):
  """apdm_ctx_get_next_record(context, dest) -> int"""
  return _apdm.apdm_ctx_get_next_record(*args)

def apdm_ctx_get_next_record2(*args):
  """apdm_ctx_get_next_record2(context, dest, allow_ap_transfer_flag) -> int"""
  return _apdm.apdm_ctx_get_next_record2(*args)

def apdm_ctx_get_device_id_by_index(*args):
  """apdm_ctx_get_device_id_by_index(context, sensor_index) -> int"""
  return _apdm.apdm_ctx_get_device_id_by_index(*args)

def apdm_ctx_set_requested_device_states(*args):
  """apdm_ctx_set_requested_device_states(context, state) -> int"""
  return _apdm.apdm_ctx_set_requested_device_states(*args)

def apdm_ctx_set_requested_device_state(*args):
  """apdm_ctx_set_requested_device_state(context, state, ap_index_number) -> int"""
  return _apdm.apdm_ctx_set_requested_device_state(*args)

def apdm_init_access_point_wireless(*args):
  """
    apdm_init_access_point_wireless(ap_handle, wireless_channel_1, wireless_channel_2, device_rx_address_high_order_bytes_A, 
        device_rx_address_high_order_bytes_B, radio1_pipe_count, radio2_pipe_count) -> int
    """
  return _apdm.apdm_init_access_point_wireless(*args)

def apdm_ctx_get_device_index_by_id3(*args):
  """apdm_ctx_get_device_index_by_id3(context, id, dest_index) -> int"""
  return _apdm.apdm_ctx_get_device_index_by_id3(*args)

def apdm_ctx_get_device_id_list(*args):
  """apdm_ctx_get_device_id_list(context, dest, destSize) -> int"""
  return _apdm.apdm_ctx_get_device_id_list(*args)

def apdm_configure_accesspoint(*args):
  """apdm_configure_accesspoint(ap_handle, radio1_pipe_count, radio2_pipe_count) -> int"""
  return _apdm.apdm_configure_accesspoint(*args)

def apdm_ctx_get_all_ap_debug_info(*args):
  """apdm_ctx_get_all_ap_debug_info(context) -> int"""
  return _apdm.apdm_ctx_get_all_ap_debug_info(*args)

def apdm_ds_get_docked_module_id(*args):
  """apdm_ds_get_docked_module_id(device_handle, dest) -> int"""
  return _apdm.apdm_ds_get_docked_module_id(*args)

def apdm_ds_get_protocol_subversion(*args):
  """apdm_ds_get_protocol_subversion(device_handle) -> int"""
  return _apdm.apdm_ds_get_protocol_subversion(*args)

def apdm_ds_get_hardware_version(*args):
  """apdm_ds_get_hardware_version(device_handle, dest) -> int"""
  return _apdm.apdm_ds_get_hardware_version(*args)

def apdm_ds_get_firmware_version(*args):
  """apdm_ds_get_firmware_version(device_handle) -> int"""
  return _apdm.apdm_ds_get_firmware_version(*args)

def apdm_ds_get_case_id(*args):
  """apdm_ds_get_case_id(device_handle, BYTE_ARRAY, dest_buffer_length) -> int"""
  return _apdm.apdm_ds_get_case_id(*args)

def apdm_ds_get_serial_number_by_index(*args):
  """apdm_ds_get_serial_number_by_index(docking_station_index) -> int"""
  return _apdm.apdm_ds_get_serial_number_by_index(*args)

def apdm_ds_is_monitor_present(*args):
  """apdm_ds_is_monitor_present(device_handle) -> int"""
  return _apdm.apdm_ds_is_monitor_present(*args)

def apdm_ds_is_monitor_data_forwarding_enabled(*args):
  """apdm_ds_is_monitor_data_forwarding_enabled(device_handle) -> int"""
  return _apdm.apdm_ds_is_monitor_data_forwarding_enabled(*args)

def apdm_ds_get_serial(*args):
  """apdm_ds_get_serial(device_handle) -> int"""
  return _apdm.apdm_ds_get_serial(*args)

def apdm_ds_get_index_by_serial_number(*args):
  """apdm_ds_get_index_by_serial_number(serial_number) -> int"""
  return _apdm.apdm_ds_get_index_by_serial_number(*args)

def apdm_ds_set_monitor_baud_rate(*args):
  """apdm_ds_set_monitor_baud_rate(ds_handle, baud_mode) -> int"""
  return _apdm.apdm_ds_set_monitor_baud_rate(*args)

def apdm_initialize_device_info(*args):
  """apdm_initialize_device_info(device_info) -> int"""
  return _apdm.apdm_initialize_device_info(*args)

def apdm_initialize_offset_test_results(*args):
  """apdm_initialize_offset_test_results(results) -> int"""
  return _apdm.apdm_initialize_offset_test_results(*args)

def apdm_sensor_test_offsets(*args):
  """apdm_sensor_test_offsets(device_handle, device_info, results) -> int"""
  return _apdm.apdm_sensor_test_offsets(*args)

def apdm_sensor_apply_configuration(*args):
  """apdm_sensor_apply_configuration(device_handle, device_info) -> int"""
  return _apdm.apdm_sensor_apply_configuration(*args)

def apdm_device_extract_module_id_from_case_id_string(*args):
  """apdm_device_extract_module_id_from_case_id_string(case_id, dest_module_id) -> int"""
  return _apdm.apdm_device_extract_module_id_from_case_id_string(*args)

def apdm_sensor_get_device_id_list(*args):
  """apdm_sensor_get_device_id_list(serial_number_buffer, buffer_length) -> int"""
  return _apdm.apdm_sensor_get_device_id_list(*args)

def apdm_sensor_get_monitor_type(*args):
  """apdm_sensor_get_monitor_type(case_id_string, dest) -> int"""
  return _apdm.apdm_sensor_get_monitor_type(*args)

def apdm_halt_all_attached_sensors():
  """apdm_halt_all_attached_sensors() -> int"""
  return _apdm.apdm_halt_all_attached_sensors()

def apdm_sensor_configure_wireless(*args):
  """apdm_sensor_configure_wireless(device_handle, wirelessConfigType, value) -> int"""
  return _apdm.apdm_sensor_configure_wireless(*args)

def apdm_sensor_cmd_halt(*args):
  """apdm_sensor_cmd_halt(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_halt(*args)

def apdm_sensor_cmd_resume(*args):
  """apdm_sensor_cmd_resume(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_resume(*args)

def apdm_sensor_populate_device_info(*args):
  """apdm_sensor_populate_device_info(device_handle, dest) -> int"""
  return _apdm.apdm_sensor_populate_device_info(*args)

def apdm_sensor_get_megabytes_total(*args):
  """apdm_sensor_get_megabytes_total(sensor_handle, dest) -> int"""
  return _apdm.apdm_sensor_get_megabytes_total(*args)

def apdm_sensor_get_megabytes_used(*args):
  """apdm_sensor_get_megabytes_used(sensor_handle, dest) -> int"""
  return _apdm.apdm_sensor_get_megabytes_used(*args)

def apdm_sensor_cmd_reset(*args):
  """apdm_sensor_cmd_reset(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_reset(*args)

def apdm_sensor_cmd_run(*args):
  """apdm_sensor_cmd_run(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_run(*args)

def apdm_sensor_cmd_memory_crc16(*args):
  """apdm_sensor_cmd_memory_crc16(device_handle, address, length) -> int"""
  return _apdm.apdm_sensor_cmd_memory_crc16(*args)

def apdm_sensor_cmd_write_flash_block(*args):
  """apdm_sensor_cmd_write_flash_block(device_handle, address, data, length) -> int"""
  return _apdm.apdm_sensor_cmd_write_flash_block(*args)

def apdm_sensor_cmd_time_set(*args):
  """apdm_sensor_cmd_time_set(device_handle, year, month, day, hour, minute, second) -> int"""
  return _apdm.apdm_sensor_cmd_time_set(*args)

def apdm_set_time_now(*args):
  """apdm_set_time_now(device_handle) -> int"""
  return _apdm.apdm_set_time_now(*args)

def apdm_sensor_cmd_timezone_set(*args):
  """apdm_sensor_cmd_timezone_set(device_handle, timezone_offset) -> int"""
  return _apdm.apdm_sensor_cmd_timezone_set(*args)

def apdm_sensor_cmd_time_set2(*args):
  """apdm_sensor_cmd_time_set2(device_handle, epoch_time) -> int"""
  return _apdm.apdm_sensor_cmd_time_set2(*args)

def apdm_sensor_cmd_time_get(*args):
  """apdm_sensor_cmd_time_get(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_time_get(*args)

def apdm_sensor_cmd_flash_block_set(*args):
  """apdm_sensor_cmd_flash_block_set(device_handle, block) -> int"""
  return _apdm.apdm_sensor_cmd_flash_block_set(*args)

def apdm_sensor_cmd_flash_block_get(*args):
  """apdm_sensor_cmd_flash_block_get(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_flash_block_get(*args)

def apdm_sensor_cmd_battery_voltage(*args):
  """apdm_sensor_cmd_battery_voltage(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_battery_voltage(*args)

def apdm_sensor_cmd_battery_charge_rate(*args):
  """apdm_sensor_cmd_battery_charge_rate(device_handle, rate) -> int"""
  return _apdm.apdm_sensor_cmd_battery_charge_rate(*args)

def apdm_sensor_cmd_calibration_version(*args):
  """apdm_sensor_cmd_calibration_version(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_calibration_version(*args)

def apdm_sensor_cmd_use_calibration(*args):
  """apdm_sensor_cmd_use_calibration(device_handle, useCalibration) -> int"""
  return _apdm.apdm_sensor_cmd_use_calibration(*args)

def apdm_sensor_cmd_memory_dump(*args):
  """apdm_sensor_cmd_memory_dump(device_handle, monitor_memory_address, num_bytes_to_read, BYTE_ARRAY, dest_buffer_length) -> int"""
  return _apdm.apdm_sensor_cmd_memory_dump(*args)

def apdm_sensor_cmd_peek(*args):
  """apdm_sensor_cmd_peek(device_handle, address) -> int"""
  return _apdm.apdm_sensor_cmd_peek(*args)

def apdm_sensor_cmd_peek2(*args):
  """apdm_sensor_cmd_peek2(device_handle, address) -> int"""
  return _apdm.apdm_sensor_cmd_peek2(*args)

def apdm_sensor_cmd_poke(*args):
  """apdm_sensor_cmd_poke(device_handle, address, new_value) -> int"""
  return _apdm.apdm_sensor_cmd_poke(*args)

def apdm_sensor_cmd_poke2(*args):
  """apdm_sensor_cmd_poke2(device_handle, address, new_value) -> int"""
  return _apdm.apdm_sensor_cmd_poke2(*args)

def apdm_sensor_cmd_sync_get(*args):
  """apdm_sensor_cmd_sync_get(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_sync_get(*args)

def apdm_sensor_cmd_sync_dock_wait(*args):
  """apdm_sensor_cmd_sync_dock_wait(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_sync_dock_wait(*args)

def apdm_sensor_cmd_led_pattern(*args):
  """apdm_sensor_cmd_led_pattern(device_handle, interval, pattern, length) -> int"""
  return _apdm.apdm_sensor_cmd_led_pattern(*args)

def apdm_sensor_cmd_led_reset(*args):
  """apdm_sensor_cmd_led_reset(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_led_reset(*args)

def apdm_sensor_cmd_off_reason(*args):
  """apdm_sensor_cmd_off_reason(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_off_reason(*args)

def apdm_sensor_cmd_uptime_get(*args):
  """apdm_sensor_cmd_uptime_get(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_uptime_get(*args)

def apdm_sensor_cmd_uptime_reset(*args):
  """apdm_sensor_cmd_uptime_reset(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_uptime_reset(*args)

def apdm_sensor_cmd_last_uptime(*args):
  """apdm_sensor_cmd_last_uptime(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_last_uptime(*args)

def apdm_sensor_cmd_last_standby_uptime(*args):
  """apdm_sensor_cmd_last_standby_uptime(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_last_standby_uptime(*args)

def apdm_sensor_cmd_unlock_bootloader_flash(*args):
  """apdm_sensor_cmd_unlock_bootloader_flash(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_unlock_bootloader_flash(*args)

def apdm_sensor_cmd_enter_bootloader(*args):
  """apdm_sensor_cmd_enter_bootloader(device_handle, password, password_length) -> int"""
  return _apdm.apdm_sensor_cmd_enter_bootloader(*args)

def apdm_sensor_cmd_bootloader_version(*args):
  """apdm_sensor_cmd_bootloader_version(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_bootloader_version(*args)

def apdm_sensor_cmd_sample_start(*args):
  """apdm_sensor_cmd_sample_start(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_sample_start(*args)

def apdm_sensor_cmd_sample_get(*args):
  """apdm_sensor_cmd_sample_get(device_handle, dest_buffer, buff_length) -> int"""
  return _apdm.apdm_sensor_cmd_sample_get(*args)

def apdm_sensor_cmd_sync_set(*args):
  """apdm_sensor_cmd_sync_set(device_handle, new_value) -> int"""
  return _apdm.apdm_sensor_cmd_sync_set(*args)

def apdm_sensor_cmd_sync_commit(*args):
  """apdm_sensor_cmd_sync_commit(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_sync_commit(*args)

def apdm_sensor_cmd_config_commit(*args):
  """apdm_sensor_cmd_config_commit(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_config_commit(*args)

def apdm_sensor_cmd_ping(*args):
  """apdm_sensor_cmd_ping(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_ping(*args)

def apdm_sensor_cmd_device_id(*args):
  """apdm_sensor_cmd_device_id(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_device_id(*args)

def apdm_sensor_cmd_error_count(*args):
  """apdm_sensor_cmd_error_count(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_error_count(*args)

def apdm_sensor_cmd_error_name(*args):
  """apdm_sensor_cmd_error_name(device_handle, BYTE_ARRAY, length, error_id) -> int"""
  return _apdm.apdm_sensor_cmd_error_name(*args)

def apdm_sensor_cmd_error_log_size(*args):
  """apdm_sensor_cmd_error_log_size(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_error_log_size(*args)

def apdm_sensor_cmd_error_log_get(*args):
  """apdm_sensor_cmd_error_log_get(device_handle, offset) -> int"""
  return _apdm.apdm_sensor_cmd_error_log_get(*args)

def apdm_sensor_cmd_state_status(*args):
  """apdm_sensor_cmd_state_status(device_handle, v2_state_id, dest) -> int"""
  return _apdm.apdm_sensor_cmd_state_status(*args)

def apdm_sensor_cmd_error_stats_size(*args):
  """apdm_sensor_cmd_error_stats_size(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_error_stats_size(*args)

def apdm_sensor_cmd_error_stats_get(*args):
  """apdm_sensor_cmd_error_stats_get(device_handle, id) -> int"""
  return _apdm.apdm_sensor_cmd_error_stats_get(*args)

def apdm_sensor_cmd_stats_size(*args):
  """apdm_sensor_cmd_stats_size(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_stats_size(*args)

def apdm_sensor_cmd_stats_max_get(*args):
  """apdm_sensor_cmd_stats_max_get(device_handle, id) -> int"""
  return _apdm.apdm_sensor_cmd_stats_max_get(*args)

def apdm_sensor_cmd_stats_min_get(*args):
  """apdm_sensor_cmd_stats_min_get(device_handle, id) -> int"""
  return _apdm.apdm_sensor_cmd_stats_min_get(*args)

def apdm_sensor_cmd_stats_count_get(*args):
  """apdm_sensor_cmd_stats_count_get(device_handle, id) -> int"""
  return _apdm.apdm_sensor_cmd_stats_count_get(*args)

def apdm_sensor_cmd_stats_sum_get(*args):
  """apdm_sensor_cmd_stats_sum_get(device_handle, id, sum_val) -> int"""
  return _apdm.apdm_sensor_cmd_stats_sum_get(*args)

def apdm_sensor_cmd_stats_clear(*args):
  """apdm_sensor_cmd_stats_clear(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_stats_clear(*args)

def apdm_sensor_cmd_error_clear(*args):
  """apdm_sensor_cmd_error_clear(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_error_clear(*args)

def apdm_sensor_cmd_battery_charge_status(*args):
  """apdm_sensor_cmd_battery_charge_status(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_battery_charge_status(*args)

def apdm_sensor_cmd_calibration_data_blob(*args):
  """apdm_sensor_cmd_calibration_data_blob(device_handle, dest, dest_length) -> int"""
  return _apdm.apdm_sensor_cmd_calibration_data_blob(*args)

def apdm_sensor_cmd_user_calibration_data_blob(*args):
  """apdm_sensor_cmd_user_calibration_data_blob(dev_handle, dest, dest_length) -> int"""
  return _apdm.apdm_sensor_cmd_user_calibration_data_blob(*args)

def apdm_sensor_cmd_calibration_data(*args):
  """apdm_sensor_cmd_calibration_data(device_handle, sensor_comp) -> int"""
  return _apdm.apdm_sensor_cmd_calibration_data(*args)

def apdm_sensor_cmd_user_calibration_data(*args):
  """apdm_sensor_cmd_user_calibration_data(dev_handle, sensor_comp) -> int"""
  return _apdm.apdm_sensor_cmd_user_calibration_data(*args)

def apdm_sensor_cmd_version_string_1(*args):
  """apdm_sensor_cmd_version_string_1(device_handle, BYTE_ARRAY, dest_buff_length) -> int"""
  return _apdm.apdm_sensor_cmd_version_string_1(*args)

def apdm_sensor_cmd_version_string_2(*args):
  """apdm_sensor_cmd_version_string_2(device_handle, BYTE_ARRAY, dest_buff_length) -> int"""
  return _apdm.apdm_sensor_cmd_version_string_2(*args)

def apdm_sensor_cmd_version_string_3(*args):
  """apdm_sensor_cmd_version_string_3(device_handle, BYTE_ARRAY, dest_buff_length) -> int"""
  return _apdm.apdm_sensor_cmd_version_string_3(*args)

def apdm_sensor_cmd_dock_status(*args):
  """apdm_sensor_cmd_dock_status(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_dock_status(*args)

def apdm_sensor_cmd_config_get(*args):
  """apdm_sensor_cmd_config_get(device_handle, config_type) -> int"""
  return _apdm.apdm_sensor_cmd_config_get(*args)

def apdm_sensor_cmd_config_set(*args):
  """apdm_sensor_cmd_config_set(device_handle, config_type, value) -> int"""
  return _apdm.apdm_sensor_cmd_config_set(*args)

def apdm_sensor_clear_logged_data(*args):
  """apdm_sensor_clear_logged_data(device_handle) -> int"""
  return _apdm.apdm_sensor_clear_logged_data(*args)

def apdm_sensor_config_set_label(*args):
  """apdm_sensor_config_set_label(device_handle, label_str, str_length) -> int"""
  return _apdm.apdm_sensor_config_set_label(*args)

def apdm_sensor_config_set_v2(*args):
  """apdm_sensor_config_set_v2(h, setting, value) -> int"""
  return _apdm.apdm_sensor_config_set_v2(*args)

def apdm_sensor_config_get_v2(*args):
  """apdm_sensor_config_get_v2(h, setting, dest) -> int"""
  return _apdm.apdm_sensor_config_get_v2(*args)

def apdm_sensor_config_set_label_v2(*args):
  """apdm_sensor_config_set_label_v2(h, label_string, label_str, str_length) -> int"""
  return _apdm.apdm_sensor_config_set_label_v2(*args)

def apdm_sensor_config_get_label(*args):
  """apdm_sensor_config_get_label(device_handle, BYTE_ARRAY, buff_size) -> int"""
  return _apdm.apdm_sensor_config_get_label(*args)

def apdm_sensor_config_get_label_v2(*args):
  """apdm_sensor_config_get_label_v2(device_handle, label_string, BYTE_ARRAY, buff_size) -> int"""
  return _apdm.apdm_sensor_config_get_label_v2(*args)

def apdm_sensor_cmd_config_status(*args):
  """apdm_sensor_cmd_config_status(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_config_status(*args)

def apdm_sensor_cmd_timer_adjust_get(*args):
  """apdm_sensor_cmd_timer_adjust_get(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_timer_adjust_get(*args)

def apdm_sensor_cmd_debug_set(*args):
  """apdm_sensor_cmd_debug_set(device_handle, id, data) -> int"""
  return _apdm.apdm_sensor_cmd_debug_set(*args)

def apdm_sensor_cmd_debug_get(*args):
  """apdm_sensor_cmd_debug_get(device_handle, id) -> int"""
  return _apdm.apdm_sensor_cmd_debug_get(*args)

def apdm_sensor_cmd_dock(*args):
  """apdm_sensor_cmd_dock(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_dock(*args)

def apdm_sensor_cmd_undock(*args):
  """apdm_sensor_cmd_undock(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_undock(*args)

def apdm_sensor_cmd_config_check(*args):
  """apdm_sensor_cmd_config_check(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_config_check(*args)

def apdm_sensor_cmd_flash_format(*args):
  """apdm_sensor_cmd_flash_format(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_flash_format(*args)

def apdm_sensor_cmd_standby(*args):
  """apdm_sensor_cmd_standby(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_standby(*args)

def apdm_sensor_cmd_case_id(*args):
  """apdm_sensor_cmd_case_id(device_handle, BYTE_ARRAY, dest_buff_length) -> int"""
  return _apdm.apdm_sensor_cmd_case_id(*args)

def apdm_sensor_cmd_hw_id(*args):
  """apdm_sensor_cmd_hw_id(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_hw_id(*args)

def apdm_ctx_initialize_context(*args):
  """apdm_ctx_initialize_context(context) -> int"""
  return _apdm.apdm_ctx_initialize_context(*args)

def apdm_ctx_disconnect(*args):
  """apdm_ctx_disconnect(context) -> int"""
  return _apdm.apdm_ctx_disconnect(*args)

def apdm_exit():
  """apdm_exit() -> int"""
  return _apdm.apdm_exit()

def apdm_ctx_allocate_new_context():
  """apdm_ctx_allocate_new_context() -> apdm_ctx_t"""
  return _apdm.apdm_ctx_allocate_new_context()

def apdm_ctx_free_context(*args):
  """apdm_ctx_free_context(context) -> int"""
  return _apdm.apdm_ctx_free_context(*args)

def apdm_ctx_persist_context_to_disk(*args):
  """apdm_ctx_persist_context_to_disk(context, filepath) -> int"""
  return _apdm.apdm_ctx_persist_context_to_disk(*args)

def apdm_ctx_restore_context_from_disk(*args):
  """apdm_ctx_restore_context_from_disk(context, filepath) -> int"""
  return _apdm.apdm_ctx_restore_context_from_disk(*args)

def apdm_ctx_autoconfigure_devices_and_accesspoint5(*args):
  """
    apdm_ctx_autoconfigure_devices_and_accesspoint5(context, wireless_channel_number, enable_sd_card, erase_sd_card, accel_full_scale_mode, 
        enable_accel, enable_gyro, enable_mag, decimation_rate) -> int
    """
  return _apdm.apdm_ctx_autoconfigure_devices_and_accesspoint5(*args)

def apdm_init_streaming_config(*args):
  """apdm_init_streaming_config(streaming_config) -> int"""
  return _apdm.apdm_init_streaming_config(*args)

def apdm_streaming_config_get_device_info(*args):
  """apdm_streaming_config_get_device_info(streaming_config, sensor_index) -> apdm_device_info_t"""
  return _apdm.apdm_streaming_config_get_device_info(*args)

def apdm_ctx_autoconfigure_devices_and_accesspoint_streaming(*args):
  """apdm_ctx_autoconfigure_devices_and_accesspoint_streaming(context, streaming_config) -> int"""
  return _apdm.apdm_ctx_autoconfigure_devices_and_accesspoint_streaming(*args)

def apdm_apply_autoconfigure_sensor_config(*args):
  """apdm_apply_autoconfigure_sensor_config(context, ds_handle) -> int"""
  return _apdm.apdm_apply_autoconfigure_sensor_config(*args)

def apdm_autoconfigure_devices_and_accesspoint_wireless(*args):
  """apdm_autoconfigure_devices_and_accesspoint_wireless(context, wireless_channel_number) -> int"""
  return _apdm.apdm_autoconfigure_devices_and_accesspoint_wireless(*args)

def apdm_autoconfigure_mesh_sync(*args):
  """
    apdm_autoconfigure_mesh_sync(context, wireless_channel_number, enable_sd_card, erase_sd_card, accel_full_scale_mode, 
        enable_accel, enable_gyro, enable_mag) -> int
    """
  return _apdm.apdm_autoconfigure_mesh_sync(*args)

def apdm_ctx_autoconfigure_devices_mesh(*args):
  """apdm_ctx_autoconfigure_devices_mesh(context, streaming_config) -> int"""
  return _apdm.apdm_ctx_autoconfigure_devices_mesh(*args)

def apdm_autoconfigure_mesh_sync2(*args):
  """apdm_autoconfigure_mesh_sync2(context, wireless_channel_number) -> int"""
  return _apdm.apdm_autoconfigure_mesh_sync2(*args)

def apdm_ctx_disable_accesspoint_wireless(*args):
  """apdm_ctx_disable_accesspoint_wireless(context) -> int"""
  return _apdm.apdm_ctx_disable_accesspoint_wireless(*args)

def apdm_ctx_re_enable_accesspoint_wireless(*args):
  """apdm_ctx_re_enable_accesspoint_wireless(context) -> int"""
  return _apdm.apdm_ctx_re_enable_accesspoint_wireless(*args)

def apdm_configure_all_attached_sensors(*args):
  """
    apdm_configure_all_attached_sensors(context, enable_sd_card, erase_sd_card, accel_full_scale_mode, enable_accel, enable_gyro, 
        enable_mag) -> int
    """
  return _apdm.apdm_configure_all_attached_sensors(*args)

def apdm_ctx_is_more_data_immediately_available(*args):
  """apdm_ctx_is_more_data_immediately_available(context) -> int"""
  return _apdm.apdm_ctx_is_more_data_immediately_available(*args)

def apdm_ctx_avg_retry_count_for_device(*args):
  """apdm_ctx_avg_retry_count_for_device(context, device_id) -> int"""
  return _apdm.apdm_ctx_avg_retry_count_for_device(*args)

def apdm_ctx_get_error_stats(*args):
  """apdm_ctx_get_error_stats(context, sensor_index, error_id, dest) -> int"""
  return _apdm.apdm_ctx_get_error_stats(*args)

def apdm_monitor_error_id_str(*args):
  """apdm_monitor_error_id_str(error_id) -> char const *"""
  return _apdm.apdm_monitor_error_id_str(*args)

def apdm_ctx_get_wireless_reliability_value(*args):
  """apdm_ctx_get_wireless_reliability_value(context, device_id) -> int"""
  return _apdm.apdm_ctx_get_wireless_reliability_value(*args)

def apdm_ctx_get_rssi_value(*args):
  """apdm_ctx_get_rssi_value(context, device_id, dest) -> int"""
  return _apdm.apdm_ctx_get_rssi_value(*args)

def apdm_ctx_get_wireless_streaming_status(*args):
  """apdm_ctx_get_wireless_streaming_status(context, dest) -> int"""
  return _apdm.apdm_ctx_get_wireless_streaming_status(*args)

def apdm_ctx_get_streaming_status(*args):
  """apdm_ctx_get_streaming_status(context, device_id, dest) -> int"""
  return _apdm.apdm_ctx_get_streaming_status(*args)

def apdm_ctx_get_last_received_timestamp_for_device(*args):
  """apdm_ctx_get_last_received_timestamp_for_device(context, device_id) -> time_t"""
  return _apdm.apdm_ctx_get_last_received_timestamp_for_device(*args)

def apdm_ctx_set_max_sample_delay_seconds(*args):
  """apdm_ctx_set_max_sample_delay_seconds(context, max_data_delay_seconds) -> int"""
  return _apdm.apdm_ctx_set_max_sample_delay_seconds(*args)

def apdm_ctx_set_orientation_model(*args):
  """apdm_ctx_set_orientation_model(context, orientation_model) -> int"""
  return _apdm.apdm_ctx_set_orientation_model(*args)

def apdm_ctx_get_monitor_latency(*args):
  """apdm_ctx_get_monitor_latency(context, monitor_id, dest) -> int"""
  return _apdm.apdm_ctx_get_monitor_latency(*args)

def apdm_ctx_get_max_sample_delay_seconds(*args):
  """apdm_ctx_get_max_sample_delay_seconds(context, dest) -> int"""
  return _apdm.apdm_ctx_get_max_sample_delay_seconds(*args)

def apdm_ctx_reset_num_samples_from_ap(*args):
  """apdm_ctx_reset_num_samples_from_ap(context) -> int"""
  return _apdm.apdm_ctx_reset_num_samples_from_ap(*args)

def apdm_ctx_get_num_samples_from_ap(*args):
  """apdm_ctx_get_num_samples_from_ap(context) -> int"""
  return _apdm.apdm_ctx_get_num_samples_from_ap(*args)

def apdm_get_library_version():
  """apdm_get_library_version() -> char const *"""
  return _apdm.apdm_get_library_version()

def apdm_get_library_build_datetime():
  """apdm_get_library_build_datetime() -> char const *"""
  return _apdm.apdm_get_library_build_datetime()

def apdm_usb_get_libusb_version_string(*args):
  """apdm_usb_get_libusb_version_string(dest, dest_buffer_length) -> int"""
  return _apdm.apdm_usb_get_libusb_version_string(*args)

def apdm_calculate_sync_value_age(*args):
  """apdm_calculate_sync_value_age(sync_newer, sync_older) -> unsigned long long"""
  return _apdm.apdm_calculate_sync_value_age(*args)

def apdm_get_time_ms_64(*args):
  """apdm_get_time_ms_64(dest) -> unsigned long long"""
  return _apdm.apdm_get_time_ms_64(*args)

def apdm_epoch_access_point_to_epoch_second(*args):
  """apdm_epoch_access_point_to_epoch_second(sync_value) -> unsigned long long"""
  return _apdm.apdm_epoch_access_point_to_epoch_second(*args)

def apdm_epoch_access_point_to_epoch_millisecond(*args):
  """apdm_epoch_access_point_to_epoch_millisecond(sync_value) -> unsigned long long"""
  return _apdm.apdm_epoch_access_point_to_epoch_millisecond(*args)

def apdm_epoch_access_point_to_epoch_microsecond(*args):
  """apdm_epoch_access_point_to_epoch_microsecond(sync_value, dest) -> int"""
  return _apdm.apdm_epoch_access_point_to_epoch_microsecond(*args)

def apdm_epoch_access_point_to_epoch_microsecond2(*args):
  """apdm_epoch_access_point_to_epoch_microsecond2(sync_value) -> unsigned long long"""
  return _apdm.apdm_epoch_access_point_to_epoch_microsecond2(*args)

def apdm_epoch_second_to_epoch_access_point(*args):
  """apdm_epoch_second_to_epoch_access_point(epoch_second) -> unsigned long long"""
  return _apdm.apdm_epoch_second_to_epoch_access_point(*args)

def apdm_epoch_millisecond_to_epoch_access_point(*args):
  """apdm_epoch_millisecond_to_epoch_access_point(epoch_millisecond) -> unsigned long long"""
  return _apdm.apdm_epoch_millisecond_to_epoch_access_point(*args)

def apdm_epoch_microsecond_to_epoch_access_point(*args):
  """apdm_epoch_microsecond_to_epoch_access_point(epoch_micro_second) -> unsigned long long"""
  return _apdm.apdm_epoch_microsecond_to_epoch_access_point(*args)

def apdm_strerror(*args):
  """apdm_strerror(status_code) -> char const *"""
  return _apdm.apdm_strerror(*args)

def apdm_output_select_rate_t_str(*args):
  """apdm_output_select_rate_t_str(rate) -> char const *"""
  return _apdm.apdm_output_select_rate_t_str(*args)

def apdm_monitor_decimation_rate_t_str(*args):
  """apdm_monitor_decimation_rate_t_str(rate) -> char const *"""
  return _apdm.apdm_monitor_decimation_rate_t_str(*args)

def apdm_monitor_output_select_rate_t_to_int(*args):
  """apdm_monitor_output_select_rate_t_to_int(rate) -> unsigned int"""
  return _apdm.apdm_monitor_output_select_rate_t_to_int(*args)

def apdm_monitor_get_expected_sync_delta(*args):
  """apdm_monitor_get_expected_sync_delta(rate) -> unsigned int"""
  return _apdm.apdm_monitor_get_expected_sync_delta(*args)

def apdm_monitor_get_expected_sync_delta_raw(*args):
  """apdm_monitor_get_expected_sync_delta_raw(output_rate_hz) -> unsigned int"""
  return _apdm.apdm_monitor_get_expected_sync_delta_raw(*args)

def apdm_monitor_decimation_rate_t_to_int(*args):
  """apdm_monitor_decimation_rate_t_to_int(rate) -> unsigned int"""
  return _apdm.apdm_monitor_decimation_rate_t_to_int(*args)

def apdm_wireless_mode_t_str(*args):
  """apdm_wireless_mode_t_str(mode) -> char const *"""
  return _apdm.apdm_wireless_mode_t_str(*args)

def apdm_error_severity(*args):
  """apdm_error_severity(status) -> enum APDM_Status_Severity"""
  return _apdm.apdm_error_severity(*args)

def apdm_ctx_estimate_now_sync_value(*args):
  """apdm_ctx_estimate_now_sync_value(context) -> unsigned long long"""
  return _apdm.apdm_ctx_estimate_now_sync_value(*args)

def apdm_ctx_estimate_now_sync_value_v2(*args):
  """apdm_ctx_estimate_now_sync_value_v2(context) -> unsigned long long"""
  return _apdm.apdm_ctx_estimate_now_sync_value_v2(*args)

def apdm_recalibrate_magnetometers_from_h5(*args):
  """apdm_recalibrate_magnetometers_from_h5(file, local_field_magnitude, calibration_block, uncalibrated_data, calibrated_data) -> int"""
  return _apdm.apdm_recalibrate_magnetometers_from_h5(*args)

def apdm_recalibrate_gyroscopes_from_h5(*args):
  """apdm_recalibrate_gyroscopes_from_h5(file, calibration_block) -> int"""
  return _apdm.apdm_recalibrate_gyroscopes_from_h5(*args)

def apdm_read_raw_file_info(*args):
  """apdm_read_raw_file_info(filename, recording_info) -> int"""
  return _apdm.apdm_read_raw_file_info(*args)

def apdm_read_raw_file_info_num_samples(*args):
  """apdm_read_raw_file_info_num_samples(file, dest) -> int"""
  return _apdm.apdm_read_raw_file_info_num_samples(*args)

def apdm_read_raw_file_info_sample_rate(*args):
  """apdm_read_raw_file_info_sample_rate(file, dest) -> int"""
  return _apdm.apdm_read_raw_file_info_sample_rate(*args)

def apdm_get_apdm_file_version(*args):
  """apdm_get_apdm_file_version(filepath, version) -> int"""
  return _apdm.apdm_get_apdm_file_version(*args)

def apdm_process_raw(*args):
  """
    apdm_process_raw(file_in, calibration_file, nFiles, file_out, store_raw, store_si, format_hdf, compress, 
        csv_delimiter, progress) -> int
    """
  return _apdm.apdm_process_raw(*args)

def apdm_process_raw2(*args):
  """
    apdm_process_raw2(file_in, calibration_file, nFiles, file_out, store_raw, store_si, store_filtered, 
        format_hdf, compress, csv_delimiter, progress) -> int
    """
  return _apdm.apdm_process_raw2(*args)

def apdm_process_raw3(*args):
  """apdm_process_raw3(params) -> int"""
  return _apdm.apdm_process_raw3(*args)

def apdm_convert_h5_to_csv(*args):
  """apdm_convert_h5_to_csv(h5file, csvfile, delimiter) -> int"""
  return _apdm.apdm_convert_h5_to_csv(*args)

def apdm_release_conversion_parameters(*args):
  """apdm_release_conversion_parameters(params) -> int"""
  return _apdm.apdm_release_conversion_parameters(*args)

def apdm_find_first_and_last_common_samples(*args):
  """apdm_find_first_and_last_common_samples(files_in, nFiles, first_sample, last_sample, use_sync_lock) -> int"""
  return _apdm.apdm_find_first_and_last_common_samples(*args)

def apdm_find_button_transition(*args):
  """
    apdm_find_button_transition(file, recording_info, time_of_button_transition, start_position, mode, BYTE_ARRAY, 
        description_size) -> int
    """
  return _apdm.apdm_find_button_transition(*args)

def apdm_initialize_file_conversion_parameters(*args):
  """apdm_initialize_file_conversion_parameters(params) -> int"""
  return _apdm.apdm_initialize_file_conversion_parameters(*args)

def apdm_create_file_hdf(*args):
  """apdm_create_file_hdf(filename, device_info, nMonitors) -> hid_t"""
  return _apdm.apdm_create_file_hdf(*args)

def apdm_ctx_create_file_hdf(*args):
  """apdm_ctx_create_file_hdf(filename, context) -> hid_t"""
  return _apdm.apdm_ctx_create_file_hdf(*args)

def apdm_create_file_hdf2(*args):
  """apdm_create_file_hdf2(filename, device_info, nMonitors, compress_data) -> hid_t"""
  return _apdm.apdm_create_file_hdf2(*args)

def apdm_create_file_hdf3(*args):
  """apdm_create_file_hdf3(filename, device_info, nMonitors, compress_data, store_all_sensors) -> hid_t"""
  return _apdm.apdm_create_file_hdf3(*args)

def apdm_close_file_hdf(*args):
  """apdm_close_file_hdf(file) -> int"""
  return _apdm.apdm_close_file_hdf(*args)

def apdm_create_file_csv(*args):
  """apdm_create_file_csv(filename) -> apdm_csv_t"""
  return _apdm.apdm_create_file_csv(*args)

def apdm_close_file_csv(*args):
  """apdm_close_file_csv(file_handle) -> int"""
  return _apdm.apdm_close_file_csv(*args)

def apdm_write_ranging_sample_hdf(*args):
  """apdm_write_ranging_sample_hdf(file_handle, sensor, anchor, epoch_time, anchor_timestamp) -> int"""
  return _apdm.apdm_write_ranging_sample_hdf(*args)

def apdm_write_record_hdf(*args):
  """apdm_write_record_hdf(file, info, records, sampleNumber, nDevices, store_raw, store_si, compress) -> int"""
  return _apdm.apdm_write_record_hdf(*args)

def apdm_write_record_hdf2(*args):
  """
    apdm_write_record_hdf2(file, info, records, sampleNumber, nDevices, store_raw, store_si, store_filtered, 
        compress) -> int
    """
  return _apdm.apdm_write_record_hdf2(*args)

def apdm_write_record_list_hdf(*args):
  """
    apdm_write_record_list_hdf(file_handle, info, records, sampleNumber, nDevices, nSamples, store_raw, store_si, 
        compress) -> int
    """
  return _apdm.apdm_write_record_list_hdf(*args)

def apdm_ctx_write_record_hdf(*args):
  """apdm_ctx_write_record_hdf(file_handle, context, sampleNumber, store_raw, store_si, store_filtered, compress) -> int"""
  return _apdm.apdm_ctx_write_record_hdf(*args)

def apdm_write_record_csv(*args):
  """apdm_write_record_csv(file, info, records, sampleNumber, nDevices, store_raw, store_si, delimiter) -> int"""
  return _apdm.apdm_write_record_csv(*args)

def apdm_write_annotation(*args):
  """apdm_write_annotation(file, annotation) -> int"""
  return _apdm.apdm_write_annotation(*args)

def apdm_read_hdf_dataset(*args):
  """apdm_read_hdf_dataset(file, monitor_id, datasetName, data, ndims, start_index, shape, strideLength) -> int"""
  return _apdm.apdm_read_hdf_dataset(*args)

def apdm_read_hdf_timestamps(*args):
  """apdm_read_hdf_timestamps(file, monitor_id, datasetName, data, start_index, nSamples, strideLength) -> int"""
  return _apdm.apdm_read_hdf_timestamps(*args)

def apdm_get_hdf_dataset_shape(*args):
  """apdm_get_hdf_dataset_shape(file, monitor_id, datasetName, shape) -> int"""
  return _apdm.apdm_get_hdf_dataset_shape(*args)

def apdm_read_hdf_calibration_data(*args):
  """apdm_read_hdf_calibration_data(file, case_id, sensor_comp) -> int"""
  return _apdm.apdm_read_hdf_calibration_data(*args)

def apdm_get_hdf_device_list(*args):
  """apdm_get_hdf_device_list(file, monitor_ids) -> int"""
  return _apdm.apdm_get_hdf_device_list(*args)

def apdm_get_hdf_device_list_swig(*args):
  """apdm_get_hdf_device_list_swig(file, monitor_ids) -> int"""
  return _apdm.apdm_get_hdf_device_list_swig(*args)

def apdm_get_hdf_label_list(*args):
  """apdm_get_hdf_label_list(file, monitor_labels) -> int"""
  return _apdm.apdm_get_hdf_label_list(*args)

def apdm_get_hdf_label_list_swig(*args):
  """apdm_get_hdf_label_list_swig(file, monitor_labels) -> int"""
  return _apdm.apdm_get_hdf_label_list_swig(*args)

def apdm_usleep(*args):
  """apdm_usleep(microseconds)"""
  return _apdm.apdm_usleep(*args)

def apdm_msleep(*args):
  """apdm_msleep(milliseconds)"""
  return _apdm.apdm_msleep(*args)

def apdm_set_log_level(*args):
  """apdm_set_log_level(log_level) -> int"""
  return _apdm.apdm_set_log_level(*args)

def apdm_logging_level_t_str(*args):
  """apdm_logging_level_t_str(level) -> char const *"""
  return _apdm.apdm_logging_level_t_str(*args)

def apdm_set_log_file(*args):
  """apdm_set_log_file(filePath) -> int"""
  return _apdm.apdm_set_log_file(*args)

def apdm_close_log_file():
  """apdm_close_log_file() -> int"""
  return _apdm.apdm_close_log_file()

def apdm_log(*args):
  """apdm_log(format) -> int"""
  return _apdm.apdm_log(*args)

def apdm_logl(*args):
  """apdm_logl(level, format) -> int"""
  return _apdm.apdm_logl(*args)

def apdm_log_debug(*args):
  """apdm_log_debug(format) -> int"""
  return _apdm.apdm_log_debug(*args)

def apdm_log_info(*args):
  """apdm_log_info(format) -> int"""
  return _apdm.apdm_log_info(*args)

def apdm_log_warning(*args):
  """apdm_log_warning(format) -> int"""
  return _apdm.apdm_log_warning(*args)

def apdm_log_error(*args):
  """apdm_log_error(format) -> int"""
  return _apdm.apdm_log_error(*args)

def apdm_log_device_info(*args):
  """apdm_log_device_info(device_id, info_ptr, level) -> int"""
  return _apdm.apdm_log_device_info(*args)

def apdm_log_context(*args):
  """apdm_log_context(context, level) -> int"""
  return _apdm.apdm_log_context(*args)

def apdm_reprocess_orientation(*args):
  """apdm_reprocess_orientation(file_in) -> int"""
  return _apdm.apdm_reprocess_orientation(*args)

def apdm_reprocess_orientation2(*args):
  """apdm_reprocess_orientation2(file_in, orientation_model) -> int"""
  return _apdm.apdm_reprocess_orientation2(*args)

def apdm_reprocess_orientation3(*args):
  """apdm_reprocess_orientation3(file_in, orientation_model, use_v1_algorithm) -> int"""
  return _apdm.apdm_reprocess_orientation3(*args)

def apdm_read_calibration_data(*args):
  """apdm_read_calibration_data(device_handle, dest, user_cal_data_flag) -> int"""
  return _apdm.apdm_read_calibration_data(*args)

def apdm_write_calibration_data_v2(*args):
  """apdm_write_calibration_data_v2(h, src, calibratin_type) -> int"""
  return _apdm.apdm_write_calibration_data_v2(*args)

def apdm_write_calibration_data(*args):
  """apdm_write_calibration_data(device_handle, src, user_cal_data_flag) -> int"""
  return _apdm.apdm_write_calibration_data(*args)

def apdm_hdf_write_data_status(*args):
  """apdm_hdf_write_data_status(file_handle, case_id, status, sync_value) -> int"""
  return _apdm.apdm_hdf_write_data_status(*args)
DOCK_PS_None = _apdm.DOCK_PS_None
DOCK_PS_USB_Power = _apdm.DOCK_PS_USB_Power
DOCK_PS_External_Power = _apdm.DOCK_PS_External_Power
DOCK_PS_USB_And_External_Power = _apdm.DOCK_PS_USB_And_External_Power

def apdm_ap_reset_into_acm(*args):
  """apdm_ap_reset_into_acm(ap_handle) -> int"""
  return _apdm.apdm_ap_reset_into_acm(*args)

def apdm_ds_uart_mode(*args):
  """apdm_ds_uart_mode(device_handle, mode) -> int"""
  return _apdm.apdm_ds_uart_mode(*args)

def apdm_ds_sd_mode(*args):
  """apdm_ds_sd_mode(device_handle, mode) -> int"""
  return _apdm.apdm_ds_sd_mode(*args)

def apdm_ds_get_external_power_milli_volts(*args):
  """apdm_ds_get_external_power_milli_volts(ds_handle, dest) -> int"""
  return _apdm.apdm_ds_get_external_power_milli_volts(*args)

def apdm_ds_get_usb_milli_volts(*args):
  """apdm_ds_get_usb_milli_volts(ds_handle, dest) -> int"""
  return _apdm.apdm_ds_get_usb_milli_volts(*args)

def apdm_ds_get_power_source(*args):
  """apdm_ds_get_power_source(ds_handle, dest) -> int"""
  return _apdm.apdm_ds_get_power_source(*args)

def apdm_sensor_cmd_peek_status_register(*args):
  """apdm_sensor_cmd_peek_status_register(device_handle) -> int"""
  return _apdm.apdm_sensor_cmd_peek_status_register(*args)

def apdm_sensor_cmd_bit_clear_status_register(*args):
  """apdm_sensor_cmd_bit_clear_status_register(device_handle, mask) -> int"""
  return _apdm.apdm_sensor_cmd_bit_clear_status_register(*args)

def apdm_sensor_cmd_bit_set_status_register(*args):
  """apdm_sensor_cmd_bit_set_status_register(device_handle, mask) -> int"""
  return _apdm.apdm_sensor_cmd_bit_set_status_register(*args)

def apdm_sensor_cmd_mode(*args):
  """apdm_sensor_cmd_mode(device_handle, current_mode) -> int"""
  return _apdm.apdm_sensor_cmd_mode(*args)

def apdm_sensor_cmd_timer_adjust_set(*args):
  """apdm_sensor_cmd_timer_adjust_set(device_handle, value) -> int"""
  return _apdm.apdm_sensor_cmd_timer_adjust_set(*args)
APDM_CONFIG_V2_STRING_MAX_LENGTH = _apdm.APDM_CONFIG_V2_STRING_MAX_LENGTH
CONFIG_V2_STRING_LABEL_0 = _apdm.CONFIG_V2_STRING_LABEL_0
CONFIG_V2_STRING_LABEL_1 = _apdm.CONFIG_V2_STRING_LABEL_1
CONFIG_V2_STRING_LABEL_2 = _apdm.CONFIG_V2_STRING_LABEL_2
CONFIG_V2_STRING_LOCATION = _apdm.CONFIG_V2_STRING_LOCATION
CONFIG_V2_STRING_TIMEZONE = _apdm.CONFIG_V2_STRING_TIMEZONE
CONFIG_V2_STRING_BUTTON_EVENT_0 = _apdm.CONFIG_V2_STRING_BUTTON_EVENT_0
CONFIG_V2_STRING_BUTTON_EVENT_1 = _apdm.CONFIG_V2_STRING_BUTTON_EVENT_1
CONFIG_V2_STRING_BUTTON_EVENT_2 = _apdm.CONFIG_V2_STRING_BUTTON_EVENT_2
CONFIG_V2_STRING_BUTTON_EVENT_3 = _apdm.CONFIG_V2_STRING_BUTTON_EVENT_3
CONFIG_V2_STRING_TIMEZONE_OFFSET = _apdm.CONFIG_V2_STRING_TIMEZONE_OFFSET
CONFIG_V2_STRING_LAST_VALUE = _apdm.CONFIG_V2_STRING_LAST_VALUE
CALIBRATION_TYPE_DEFAULT = _apdm.CALIBRATION_TYPE_DEFAULT
CALIBRATION_TYPE_USER = _apdm.CALIBRATION_TYPE_USER
CALIBRATION_TYPE_SX = _apdm.CALIBRATION_TYPE_SX
CALIBRATION_BIAS_ARRAY_SIZE = _apdm.CALIBRATION_BIAS_ARRAY_SIZE
CALIBRATION_MISALIGNMENT_ARRAY_SIZE = _apdm.CALIBRATION_MISALIGNMENT_ARRAY_SIZE
class calibration_data_t(_object):
    """Proxy of C calibration_data_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibration_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibration_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _apdm.calibration_data_t_length_set
    __swig_getmethods__["length"] = _apdm.calibration_data_t_length_get
    if _newclass:length = _swig_property(_apdm.calibration_data_t_length_get, _apdm.calibration_data_t_length_set)
    __swig_setmethods__["structure_version"] = _apdm.calibration_data_t_structure_version_set
    __swig_getmethods__["structure_version"] = _apdm.calibration_data_t_structure_version_get
    if _newclass:structure_version = _swig_property(_apdm.calibration_data_t_structure_version_get, _apdm.calibration_data_t_structure_version_set)
    __swig_setmethods__["device_id"] = _apdm.calibration_data_t_device_id_set
    __swig_getmethods__["device_id"] = _apdm.calibration_data_t_device_id_get
    if _newclass:device_id = _swig_property(_apdm.calibration_data_t_device_id_get, _apdm.calibration_data_t_device_id_set)
    __swig_getmethods__["data"] = _apdm.calibration_data_t_data_get
    if _newclass:data = _swig_property(_apdm.calibration_data_t_data_get)
    def __init__(self): 
        """__init__(self) -> calibration_data_t"""
        this = _apdm.new_calibration_data_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_calibration_data_t
    __del__ = lambda self : None;
calibration_data_t_swigregister = _apdm.calibration_data_t_swigregister
calibration_data_t_swigregister(calibration_data_t)

class calibration_data_t_data(_object):
    """Proxy of C calibration_data_t_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibration_data_t_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibration_data_t_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cal_data"] = _apdm.calibration_data_t_data_cal_data_set
    __swig_getmethods__["cal_data"] = _apdm.calibration_data_t_data_cal_data_get
    if _newclass:cal_data = _swig_property(_apdm.calibration_data_t_data_cal_data_get, _apdm.calibration_data_t_data_cal_data_set)
    __swig_getmethods__["cal_data_v1"] = _apdm.calibration_data_t_data_cal_data_v1_get
    if _newclass:cal_data_v1 = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_get)
    def __init__(self): 
        """__init__(self) -> calibration_data_t_data"""
        this = _apdm.new_calibration_data_t_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_calibration_data_t_data
    __del__ = lambda self : None;
calibration_data_t_data_swigregister = _apdm.calibration_data_t_data_swigregister
calibration_data_t_data_swigregister(calibration_data_t_data)

class calibration_data_t_data_cal_data_v1(_object):
    """Proxy of C calibration_data_t_data_cal_data_v1 struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibration_data_t_data_cal_data_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibration_data_t_data_cal_data_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["acc_x_bias"] = _apdm.calibration_data_t_data_cal_data_v1_acc_x_bias_set
    __swig_getmethods__["acc_x_bias"] = _apdm.calibration_data_t_data_cal_data_v1_acc_x_bias_get
    if _newclass:acc_x_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_x_bias_get, _apdm.calibration_data_t_data_cal_data_v1_acc_x_bias_set)
    __swig_setmethods__["acc_y_bias"] = _apdm.calibration_data_t_data_cal_data_v1_acc_y_bias_set
    __swig_getmethods__["acc_y_bias"] = _apdm.calibration_data_t_data_cal_data_v1_acc_y_bias_get
    if _newclass:acc_y_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_y_bias_get, _apdm.calibration_data_t_data_cal_data_v1_acc_y_bias_set)
    __swig_setmethods__["acc_z_bias"] = _apdm.calibration_data_t_data_cal_data_v1_acc_z_bias_set
    __swig_getmethods__["acc_z_bias"] = _apdm.calibration_data_t_data_cal_data_v1_acc_z_bias_get
    if _newclass:acc_z_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_z_bias_get, _apdm.calibration_data_t_data_cal_data_v1_acc_z_bias_set)
    __swig_setmethods__["pad0"] = _apdm.calibration_data_t_data_cal_data_v1_pad0_set
    __swig_getmethods__["pad0"] = _apdm.calibration_data_t_data_cal_data_v1_pad0_get
    if _newclass:pad0 = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_pad0_get, _apdm.calibration_data_t_data_cal_data_v1_pad0_set)
    __swig_setmethods__["acc_scale"] = _apdm.calibration_data_t_data_cal_data_v1_acc_scale_set
    __swig_getmethods__["acc_scale"] = _apdm.calibration_data_t_data_cal_data_v1_acc_scale_get
    if _newclass:acc_scale = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_scale_get, _apdm.calibration_data_t_data_cal_data_v1_acc_scale_set)
    __swig_setmethods__["acc_scale_temp"] = _apdm.calibration_data_t_data_cal_data_v1_acc_scale_temp_set
    __swig_getmethods__["acc_scale_temp"] = _apdm.calibration_data_t_data_cal_data_v1_acc_scale_temp_get
    if _newclass:acc_scale_temp = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_scale_temp_get, _apdm.calibration_data_t_data_cal_data_v1_acc_scale_temp_set)
    __swig_setmethods__["acc_xy_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_acc_xy_sensitivity_set
    __swig_getmethods__["acc_xy_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_acc_xy_sensitivity_get
    if _newclass:acc_xy_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_xy_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_acc_xy_sensitivity_set)
    __swig_setmethods__["acc_xz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_acc_xz_sensitivity_set
    __swig_getmethods__["acc_xz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_acc_xz_sensitivity_get
    if _newclass:acc_xz_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_xz_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_acc_xz_sensitivity_set)
    __swig_setmethods__["acc_yz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_acc_yz_sensitivity_set
    __swig_getmethods__["acc_yz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_acc_yz_sensitivity_get
    if _newclass:acc_yz_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_yz_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_acc_yz_sensitivity_set)
    __swig_setmethods__["acc_roll"] = _apdm.calibration_data_t_data_cal_data_v1_acc_roll_set
    __swig_getmethods__["acc_roll"] = _apdm.calibration_data_t_data_cal_data_v1_acc_roll_get
    if _newclass:acc_roll = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_roll_get, _apdm.calibration_data_t_data_cal_data_v1_acc_roll_set)
    __swig_setmethods__["acc_pitch"] = _apdm.calibration_data_t_data_cal_data_v1_acc_pitch_set
    __swig_getmethods__["acc_pitch"] = _apdm.calibration_data_t_data_cal_data_v1_acc_pitch_get
    if _newclass:acc_pitch = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_pitch_get, _apdm.calibration_data_t_data_cal_data_v1_acc_pitch_set)
    __swig_setmethods__["acc_yaw"] = _apdm.calibration_data_t_data_cal_data_v1_acc_yaw_set
    __swig_getmethods__["acc_yaw"] = _apdm.calibration_data_t_data_cal_data_v1_acc_yaw_get
    if _newclass:acc_yaw = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_yaw_get, _apdm.calibration_data_t_data_cal_data_v1_acc_yaw_set)
    __swig_setmethods__["acc_scale_misalignment"] = _apdm.calibration_data_t_data_cal_data_v1_acc_scale_misalignment_set
    __swig_getmethods__["acc_scale_misalignment"] = _apdm.calibration_data_t_data_cal_data_v1_acc_scale_misalignment_get
    if _newclass:acc_scale_misalignment = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_acc_scale_misalignment_get, _apdm.calibration_data_t_data_cal_data_v1_acc_scale_misalignment_set)
    __swig_setmethods__["gravity_magnitude"] = _apdm.calibration_data_t_data_cal_data_v1_gravity_magnitude_set
    __swig_getmethods__["gravity_magnitude"] = _apdm.calibration_data_t_data_cal_data_v1_gravity_magnitude_get
    if _newclass:gravity_magnitude = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gravity_magnitude_get, _apdm.calibration_data_t_data_cal_data_v1_gravity_magnitude_set)
    __swig_setmethods__["accH_x_bias"] = _apdm.calibration_data_t_data_cal_data_v1_accH_x_bias_set
    __swig_getmethods__["accH_x_bias"] = _apdm.calibration_data_t_data_cal_data_v1_accH_x_bias_get
    if _newclass:accH_x_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_x_bias_get, _apdm.calibration_data_t_data_cal_data_v1_accH_x_bias_set)
    __swig_setmethods__["accH_y_bias"] = _apdm.calibration_data_t_data_cal_data_v1_accH_y_bias_set
    __swig_getmethods__["accH_y_bias"] = _apdm.calibration_data_t_data_cal_data_v1_accH_y_bias_get
    if _newclass:accH_y_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_y_bias_get, _apdm.calibration_data_t_data_cal_data_v1_accH_y_bias_set)
    __swig_setmethods__["accH_z_bias"] = _apdm.calibration_data_t_data_cal_data_v1_accH_z_bias_set
    __swig_getmethods__["accH_z_bias"] = _apdm.calibration_data_t_data_cal_data_v1_accH_z_bias_get
    if _newclass:accH_z_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_z_bias_get, _apdm.calibration_data_t_data_cal_data_v1_accH_z_bias_set)
    __swig_setmethods__["pad1"] = _apdm.calibration_data_t_data_cal_data_v1_pad1_set
    __swig_getmethods__["pad1"] = _apdm.calibration_data_t_data_cal_data_v1_pad1_get
    if _newclass:pad1 = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_pad1_get, _apdm.calibration_data_t_data_cal_data_v1_pad1_set)
    __swig_setmethods__["accH_scale"] = _apdm.calibration_data_t_data_cal_data_v1_accH_scale_set
    __swig_getmethods__["accH_scale"] = _apdm.calibration_data_t_data_cal_data_v1_accH_scale_get
    if _newclass:accH_scale = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_scale_get, _apdm.calibration_data_t_data_cal_data_v1_accH_scale_set)
    __swig_setmethods__["accH_scale_temp"] = _apdm.calibration_data_t_data_cal_data_v1_accH_scale_temp_set
    __swig_getmethods__["accH_scale_temp"] = _apdm.calibration_data_t_data_cal_data_v1_accH_scale_temp_get
    if _newclass:accH_scale_temp = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_scale_temp_get, _apdm.calibration_data_t_data_cal_data_v1_accH_scale_temp_set)
    __swig_setmethods__["accH_xy_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_accH_xy_sensitivity_set
    __swig_getmethods__["accH_xy_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_accH_xy_sensitivity_get
    if _newclass:accH_xy_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_xy_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_accH_xy_sensitivity_set)
    __swig_setmethods__["accH_xz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_accH_xz_sensitivity_set
    __swig_getmethods__["accH_xz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_accH_xz_sensitivity_get
    if _newclass:accH_xz_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_xz_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_accH_xz_sensitivity_set)
    __swig_setmethods__["accH_yz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_accH_yz_sensitivity_set
    __swig_getmethods__["accH_yz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_accH_yz_sensitivity_get
    if _newclass:accH_yz_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_yz_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_accH_yz_sensitivity_set)
    __swig_setmethods__["accH_roll"] = _apdm.calibration_data_t_data_cal_data_v1_accH_roll_set
    __swig_getmethods__["accH_roll"] = _apdm.calibration_data_t_data_cal_data_v1_accH_roll_get
    if _newclass:accH_roll = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_roll_get, _apdm.calibration_data_t_data_cal_data_v1_accH_roll_set)
    __swig_setmethods__["accH_pitch"] = _apdm.calibration_data_t_data_cal_data_v1_accH_pitch_set
    __swig_getmethods__["accH_pitch"] = _apdm.calibration_data_t_data_cal_data_v1_accH_pitch_get
    if _newclass:accH_pitch = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_pitch_get, _apdm.calibration_data_t_data_cal_data_v1_accH_pitch_set)
    __swig_setmethods__["accH_yaw"] = _apdm.calibration_data_t_data_cal_data_v1_accH_yaw_set
    __swig_getmethods__["accH_yaw"] = _apdm.calibration_data_t_data_cal_data_v1_accH_yaw_get
    if _newclass:accH_yaw = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_yaw_get, _apdm.calibration_data_t_data_cal_data_v1_accH_yaw_set)
    __swig_setmethods__["accH_scale_misalignment"] = _apdm.calibration_data_t_data_cal_data_v1_accH_scale_misalignment_set
    __swig_getmethods__["accH_scale_misalignment"] = _apdm.calibration_data_t_data_cal_data_v1_accH_scale_misalignment_get
    if _newclass:accH_scale_misalignment = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_accH_scale_misalignment_get, _apdm.calibration_data_t_data_cal_data_v1_accH_scale_misalignment_set)
    __swig_setmethods__["gyro_x_bias"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_x_bias_set
    __swig_getmethods__["gyro_x_bias"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_x_bias_get
    if _newclass:gyro_x_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_x_bias_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_x_bias_set)
    __swig_setmethods__["gyro_y_bias"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_y_bias_set
    __swig_getmethods__["gyro_y_bias"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_y_bias_get
    if _newclass:gyro_y_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_y_bias_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_y_bias_set)
    __swig_setmethods__["gyro_z_bias"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_z_bias_set
    __swig_getmethods__["gyro_z_bias"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_z_bias_get
    if _newclass:gyro_z_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_z_bias_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_z_bias_set)
    __swig_setmethods__["pad2"] = _apdm.calibration_data_t_data_cal_data_v1_pad2_set
    __swig_getmethods__["pad2"] = _apdm.calibration_data_t_data_cal_data_v1_pad2_get
    if _newclass:pad2 = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_pad2_get, _apdm.calibration_data_t_data_cal_data_v1_pad2_set)
    __swig_setmethods__["gyro_scale"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_scale_set
    __swig_getmethods__["gyro_scale"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_scale_get
    if _newclass:gyro_scale = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_scale_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_scale_set)
    __swig_setmethods__["gyro_scale_temp"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_scale_temp_set
    __swig_getmethods__["gyro_scale_temp"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_scale_temp_get
    if _newclass:gyro_scale_temp = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_scale_temp_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_scale_temp_set)
    __swig_setmethods__["gyro_xy_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_xy_sensitivity_set
    __swig_getmethods__["gyro_xy_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_xy_sensitivity_get
    if _newclass:gyro_xy_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_xy_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_xy_sensitivity_set)
    __swig_setmethods__["gyro_xz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_xz_sensitivity_set
    __swig_getmethods__["gyro_xz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_xz_sensitivity_get
    if _newclass:gyro_xz_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_xz_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_xz_sensitivity_set)
    __swig_setmethods__["gyro_yz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_yz_sensitivity_set
    __swig_getmethods__["gyro_yz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_yz_sensitivity_get
    if _newclass:gyro_yz_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_yz_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_yz_sensitivity_set)
    __swig_setmethods__["gyro_accel_roll"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_accel_roll_set
    __swig_getmethods__["gyro_accel_roll"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_accel_roll_get
    if _newclass:gyro_accel_roll = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_accel_roll_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_accel_roll_set)
    __swig_setmethods__["gyro_accel_pitch"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_accel_pitch_set
    __swig_getmethods__["gyro_accel_pitch"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_accel_pitch_get
    if _newclass:gyro_accel_pitch = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_accel_pitch_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_accel_pitch_set)
    __swig_setmethods__["gyro_accel_yaw"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_accel_yaw_set
    __swig_getmethods__["gyro_accel_yaw"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_accel_yaw_get
    if _newclass:gyro_accel_yaw = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_accel_yaw_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_accel_yaw_set)
    __swig_setmethods__["gyro_scale_misalignment"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_scale_misalignment_set
    __swig_getmethods__["gyro_scale_misalignment"] = _apdm.calibration_data_t_data_cal_data_v1_gyro_scale_misalignment_get
    if _newclass:gyro_scale_misalignment = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_gyro_scale_misalignment_get, _apdm.calibration_data_t_data_cal_data_v1_gyro_scale_misalignment_set)
    __swig_setmethods__["mag_x_bias"] = _apdm.calibration_data_t_data_cal_data_v1_mag_x_bias_set
    __swig_getmethods__["mag_x_bias"] = _apdm.calibration_data_t_data_cal_data_v1_mag_x_bias_get
    if _newclass:mag_x_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_x_bias_get, _apdm.calibration_data_t_data_cal_data_v1_mag_x_bias_set)
    __swig_setmethods__["mag_y_bias"] = _apdm.calibration_data_t_data_cal_data_v1_mag_y_bias_set
    __swig_getmethods__["mag_y_bias"] = _apdm.calibration_data_t_data_cal_data_v1_mag_y_bias_get
    if _newclass:mag_y_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_y_bias_get, _apdm.calibration_data_t_data_cal_data_v1_mag_y_bias_set)
    __swig_setmethods__["mag_z_bias"] = _apdm.calibration_data_t_data_cal_data_v1_mag_z_bias_set
    __swig_getmethods__["mag_z_bias"] = _apdm.calibration_data_t_data_cal_data_v1_mag_z_bias_get
    if _newclass:mag_z_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_z_bias_get, _apdm.calibration_data_t_data_cal_data_v1_mag_z_bias_set)
    __swig_setmethods__["pad3"] = _apdm.calibration_data_t_data_cal_data_v1_pad3_set
    __swig_getmethods__["pad3"] = _apdm.calibration_data_t_data_cal_data_v1_pad3_get
    if _newclass:pad3 = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_pad3_get, _apdm.calibration_data_t_data_cal_data_v1_pad3_set)
    __swig_setmethods__["mag_scale"] = _apdm.calibration_data_t_data_cal_data_v1_mag_scale_set
    __swig_getmethods__["mag_scale"] = _apdm.calibration_data_t_data_cal_data_v1_mag_scale_get
    if _newclass:mag_scale = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_scale_get, _apdm.calibration_data_t_data_cal_data_v1_mag_scale_set)
    __swig_setmethods__["mag_scale_temp"] = _apdm.calibration_data_t_data_cal_data_v1_mag_scale_temp_set
    __swig_getmethods__["mag_scale_temp"] = _apdm.calibration_data_t_data_cal_data_v1_mag_scale_temp_get
    if _newclass:mag_scale_temp = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_scale_temp_get, _apdm.calibration_data_t_data_cal_data_v1_mag_scale_temp_set)
    __swig_setmethods__["mag_xy_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_mag_xy_sensitivity_set
    __swig_getmethods__["mag_xy_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_mag_xy_sensitivity_get
    if _newclass:mag_xy_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_xy_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_mag_xy_sensitivity_set)
    __swig_setmethods__["mag_xz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_mag_xz_sensitivity_set
    __swig_getmethods__["mag_xz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_mag_xz_sensitivity_get
    if _newclass:mag_xz_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_xz_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_mag_xz_sensitivity_set)
    __swig_setmethods__["mag_yz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_mag_yz_sensitivity_set
    __swig_getmethods__["mag_yz_sensitivity"] = _apdm.calibration_data_t_data_cal_data_v1_mag_yz_sensitivity_get
    if _newclass:mag_yz_sensitivity = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_yz_sensitivity_get, _apdm.calibration_data_t_data_cal_data_v1_mag_yz_sensitivity_set)
    __swig_setmethods__["mag_accel_roll"] = _apdm.calibration_data_t_data_cal_data_v1_mag_accel_roll_set
    __swig_getmethods__["mag_accel_roll"] = _apdm.calibration_data_t_data_cal_data_v1_mag_accel_roll_get
    if _newclass:mag_accel_roll = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_accel_roll_get, _apdm.calibration_data_t_data_cal_data_v1_mag_accel_roll_set)
    __swig_setmethods__["mag_accel_pitch"] = _apdm.calibration_data_t_data_cal_data_v1_mag_accel_pitch_set
    __swig_getmethods__["mag_accel_pitch"] = _apdm.calibration_data_t_data_cal_data_v1_mag_accel_pitch_get
    if _newclass:mag_accel_pitch = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_accel_pitch_get, _apdm.calibration_data_t_data_cal_data_v1_mag_accel_pitch_set)
    __swig_setmethods__["mag_accel_yaw"] = _apdm.calibration_data_t_data_cal_data_v1_mag_accel_yaw_set
    __swig_getmethods__["mag_accel_yaw"] = _apdm.calibration_data_t_data_cal_data_v1_mag_accel_yaw_get
    if _newclass:mag_accel_yaw = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_accel_yaw_get, _apdm.calibration_data_t_data_cal_data_v1_mag_accel_yaw_set)
    __swig_setmethods__["mag_scale_misalignment"] = _apdm.calibration_data_t_data_cal_data_v1_mag_scale_misalignment_set
    __swig_getmethods__["mag_scale_misalignment"] = _apdm.calibration_data_t_data_cal_data_v1_mag_scale_misalignment_get
    if _newclass:mag_scale_misalignment = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_mag_scale_misalignment_get, _apdm.calibration_data_t_data_cal_data_v1_mag_scale_misalignment_set)
    __swig_setmethods__["magnetic_field_magnitude"] = _apdm.calibration_data_t_data_cal_data_v1_magnetic_field_magnitude_set
    __swig_getmethods__["magnetic_field_magnitude"] = _apdm.calibration_data_t_data_cal_data_v1_magnetic_field_magnitude_get
    if _newclass:magnetic_field_magnitude = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_magnetic_field_magnitude_get, _apdm.calibration_data_t_data_cal_data_v1_magnetic_field_magnitude_set)
    __swig_setmethods__["magnetic_inclination"] = _apdm.calibration_data_t_data_cal_data_v1_magnetic_inclination_set
    __swig_getmethods__["magnetic_inclination"] = _apdm.calibration_data_t_data_cal_data_v1_magnetic_inclination_get
    if _newclass:magnetic_inclination = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_magnetic_inclination_get, _apdm.calibration_data_t_data_cal_data_v1_magnetic_inclination_set)
    __swig_setmethods__["temperature_bias"] = _apdm.calibration_data_t_data_cal_data_v1_temperature_bias_set
    __swig_getmethods__["temperature_bias"] = _apdm.calibration_data_t_data_cal_data_v1_temperature_bias_get
    if _newclass:temperature_bias = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_temperature_bias_get, _apdm.calibration_data_t_data_cal_data_v1_temperature_bias_set)
    __swig_setmethods__["temperature_scale"] = _apdm.calibration_data_t_data_cal_data_v1_temperature_scale_set
    __swig_getmethods__["temperature_scale"] = _apdm.calibration_data_t_data_cal_data_v1_temperature_scale_get
    if _newclass:temperature_scale = _swig_property(_apdm.calibration_data_t_data_cal_data_v1_temperature_scale_get, _apdm.calibration_data_t_data_cal_data_v1_temperature_scale_set)
    def __init__(self): 
        """__init__(self) -> calibration_data_t_data_cal_data_v1"""
        this = _apdm.new_calibration_data_t_data_cal_data_v1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_calibration_data_t_data_cal_data_v1
    __del__ = lambda self : None;
calibration_data_t_data_cal_data_v1_swigregister = _apdm.calibration_data_t_data_cal_data_v1_swigregister
calibration_data_t_data_cal_data_v1_swigregister(calibration_data_t_data_cal_data_v1)

WIRELESS_V2_RADIO_MODE_OFF = _apdm.WIRELESS_V2_RADIO_MODE_OFF
WIRELESS_V2_RADIO_MODE_MESH_ONLY = _apdm.WIRELESS_V2_RADIO_MODE_MESH_ONLY
WIRELESS_V2_RADIO_MODE_STREAM_TX = _apdm.WIRELESS_V2_RADIO_MODE_STREAM_TX
WIRELESS_V2_RADIO_MODE_STREAM_RX = _apdm.WIRELESS_V2_RADIO_MODE_STREAM_RX
WIRELESS_V2_RADIO_MODE_BASIC = _apdm.WIRELESS_V2_RADIO_MODE_BASIC
WIRELESS_V2_RADIO_MODE_LISTEN = _apdm.WIRELESS_V2_RADIO_MODE_LISTEN
WIRELESS_V2_RADIO_MODE_CARRIER = _apdm.WIRELESS_V2_RADIO_MODE_CARRIER
WIRELESS_V2_RADIO_MODE_SPEW = _apdm.WIRELESS_V2_RADIO_MODE_SPEW
WIRELESS_V2_RADIO_MODE_CARRIER_SWEEP = _apdm.WIRELESS_V2_RADIO_MODE_CARRIER_SWEEP
WIRELESS_V2_RADIO_MODE_STREAM_TX_RAPID = _apdm.WIRELESS_V2_RADIO_MODE_STREAM_TX_RAPID
WIRELESS_V2_RADIO_MODE_ENUM_LAST_ELEMENT = _apdm.WIRELESS_V2_RADIO_MODE_ENUM_LAST_ELEMENT
CONFIG_V2_OUTPUT_RATE = _apdm.CONFIG_V2_OUTPUT_RATE
CONFIG_V2_OUTPUT_RATE_WIRELESS_DIVIDER = _apdm.CONFIG_V2_OUTPUT_RATE_WIRELESS_DIVIDER
CONFIG_V2_ENABLE_ACCEL = _apdm.CONFIG_V2_ENABLE_ACCEL
CONFIG_V2_ENABLE_GYRO = _apdm.CONFIG_V2_ENABLE_GYRO
CONFIG_V2_ENABLE_MAG = _apdm.CONFIG_V2_ENABLE_MAG
CONFIG_V2_ENABLE_PRESSURE = _apdm.CONFIG_V2_ENABLE_PRESSURE
CONFIG_V2_FILE_FORMAT = _apdm.CONFIG_V2_FILE_FORMAT
CONFIG_V2_ENABLE_SI_SD_DATA_LOGGING = _apdm.CONFIG_V2_ENABLE_SI_SD_DATA_LOGGING
CONFIG_V2_ENABLE_RAW_SD_DATA_LOGGING = _apdm.CONFIG_V2_ENABLE_RAW_SD_DATA_LOGGING
CONFIG_V2_WIRELESS_PROTOCOL = _apdm.CONFIG_V2_WIRELESS_PROTOCOL
CONFIG_V2_WIRELESS_CHANNEL = _apdm.CONFIG_V2_WIRELESS_CHANNEL
CONFIG_V2_WIRELESS_TX_POWER = _apdm.CONFIG_V2_WIRELESS_TX_POWER
CONFIG_V2_WIRELESS_LATENCY_MS = _apdm.CONFIG_V2_WIRELESS_LATENCY_MS
CONFIG_V2_WIRELESS_GROUP_CODE = _apdm.CONFIG_V2_WIRELESS_GROUP_CODE
CONFIG_V2_WIRELESS_TX_MASK = _apdm.CONFIG_V2_WIRELESS_TX_MASK
CONFIG_V2_WIRELESS_TARGET_AP_ID = _apdm.CONFIG_V2_WIRELESS_TARGET_AP_ID
CONFIG_V2_WIRELESS_DEBUG_CONTROL = _apdm.CONFIG_V2_WIRELESS_DEBUG_CONTROL
CONFIG_V2_FILTER_MODE = _apdm.CONFIG_V2_FILTER_MODE
CONFIG_V2_FILTER_MAX_LATENCY_MS = _apdm.CONFIG_V2_FILTER_MAX_LATENCY_MS
CONFIG_V2_SD_CARD_BUFFERING = _apdm.CONFIG_V2_SD_CARD_BUFFERING
CONFIG_V2_BATTERY_CUTOFF = _apdm.CONFIG_V2_BATTERY_CUTOFF
CONFIG_V2_LED_MODE = _apdm.CONFIG_V2_LED_MODE
CONFIG_V2_BUTTON_MODE = _apdm.CONFIG_V2_BUTTON_MODE
CONFIG_V2_EXTERNAL_COMMUNICATIONS_MODE = _apdm.CONFIG_V2_EXTERNAL_COMMUNICATIONS_MODE
CONFIG_V2_LCD_DISPLAY_ENABLE = _apdm.CONFIG_V2_LCD_DISPLAY_ENABLE
CONFIG_V2_LCD_DISPLAY_ANGLE = _apdm.CONFIG_V2_LCD_DISPLAY_ANGLE
CONFIG_V2_NUMBER_OF_APS = _apdm.CONFIG_V2_NUMBER_OF_APS
CONFIG_V2_DEBUG_LCD_ENABLE = _apdm.CONFIG_V2_DEBUG_LCD_ENABLE
CONFIG_V2_ENABLE_USB_CDC_ACM_VCOM = _apdm.CONFIG_V2_ENABLE_USB_CDC_ACM_VCOM
CONFIG_V2_ENABLE_AP_DATA_STREAMING = _apdm.CONFIG_V2_ENABLE_AP_DATA_STREAMING
CONFIG_V2_UNUSED2 = _apdm.CONFIG_V2_UNUSED2
CONFIG_V2_UNUSED3 = _apdm.CONFIG_V2_UNUSED3
CONFIG_V2_UNUSED4 = _apdm.CONFIG_V2_UNUSED4
CONFIG_V2_DISABLE_CALIBRATION_DATA = _apdm.CONFIG_V2_DISABLE_CALIBRATION_DATA
CONFIG_V2_RAW_RATE_OVERRIDE_ACCEL_MID = _apdm.CONFIG_V2_RAW_RATE_OVERRIDE_ACCEL_MID
CONFIG_V2_RAW_RATE_OVERRIDE_ACCEL_HIGH = _apdm.CONFIG_V2_RAW_RATE_OVERRIDE_ACCEL_HIGH
CONFIG_V2_RAW_RATE_OVERRIDE_GYRO = _apdm.CONFIG_V2_RAW_RATE_OVERRIDE_GYRO
CONFIG_V2_RAW_RATE_OVERRIDE_MAG = _apdm.CONFIG_V2_RAW_RATE_OVERRIDE_MAG
CONFIG_V2_RANGE_OVERRIDE_ACCEL_MID = _apdm.CONFIG_V2_RANGE_OVERRIDE_ACCEL_MID
CONFIG_V2_RANGE_OVERRIDE_GYRO = _apdm.CONFIG_V2_RANGE_OVERRIDE_GYRO
CONFIG_V2_RANGE_OVERRIDE_MAG = _apdm.CONFIG_V2_RANGE_OVERRIDE_MAG
CONFIG_V2_LOGGING_BEHAVIOR = _apdm.CONFIG_V2_LOGGING_BEHAVIOR
CONFIG_V2_ENABLE_RANGING = _apdm.CONFIG_V2_ENABLE_RANGING
CONFIG_V2_SENSOR_INDEX = _apdm.CONFIG_V2_SENSOR_INDEX
CONFIG_V2_SENSOR_COUNT = _apdm.CONFIG_V2_SENSOR_COUNT
CONFIG_V2_MOUNT_MODE = _apdm.CONFIG_V2_MOUNT_MODE
CONFIG_V2_WIRELESS_MESH_CHANNEL = _apdm.CONFIG_V2_WIRELESS_MESH_CHANNEL
CONFIG_V2_WIRELESS_DOCKING_BEHAVIOR = _apdm.CONFIG_V2_WIRELESS_DOCKING_BEHAVIOR
CONFIG_V2_STANDBY_MODE = _apdm.CONFIG_V2_STANDBY_MODE
CONFIG_V2_VALUE_LAST_ELEMENT = _apdm.CONFIG_V2_VALUE_LAST_ELEMENT
class button_event_data_t(_object):
    """Proxy of C button_event_data_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, button_event_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, button_event_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["event_sync_time"] = _apdm.button_event_data_t_event_sync_time_set
    __swig_getmethods__["event_sync_time"] = _apdm.button_event_data_t_event_sync_time_get
    if _newclass:event_sync_time = _swig_property(_apdm.button_event_data_t_event_sync_time_get, _apdm.button_event_data_t_event_sync_time_set)
    __swig_setmethods__["stm32_time_us"] = _apdm.button_event_data_t_stm32_time_us_set
    __swig_getmethods__["stm32_time_us"] = _apdm.button_event_data_t_stm32_time_us_get
    if _newclass:stm32_time_us = _swig_property(_apdm.button_event_data_t_stm32_time_us_get, _apdm.button_event_data_t_stm32_time_us_set)
    __swig_setmethods__["selected_button_option"] = _apdm.button_event_data_t_selected_button_option_set
    __swig_getmethods__["selected_button_option"] = _apdm.button_event_data_t_selected_button_option_get
    if _newclass:selected_button_option = _swig_property(_apdm.button_event_data_t_selected_button_option_get, _apdm.button_event_data_t_selected_button_option_set)
    __swig_setmethods__["button_event"] = _apdm.button_event_data_t_button_event_set
    __swig_getmethods__["button_event"] = _apdm.button_event_data_t_button_event_get
    if _newclass:button_event = _swig_property(_apdm.button_event_data_t_button_event_get, _apdm.button_event_data_t_button_event_set)
    __swig_setmethods__["device_id"] = _apdm.button_event_data_t_device_id_set
    __swig_getmethods__["device_id"] = _apdm.button_event_data_t_device_id_get
    if _newclass:device_id = _swig_property(_apdm.button_event_data_t_device_id_get, _apdm.button_event_data_t_device_id_set)
    __swig_setmethods__["event_string"] = _apdm.button_event_data_t_event_string_set
    __swig_getmethods__["event_string"] = _apdm.button_event_data_t_event_string_get
    if _newclass:event_string = _swig_property(_apdm.button_event_data_t_event_string_get, _apdm.button_event_data_t_event_string_set)
    def __init__(self): 
        """__init__(self) -> button_event_data_t"""
        this = _apdm.new_button_event_data_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_button_event_data_t
    __del__ = lambda self : None;
button_event_data_t_swigregister = _apdm.button_event_data_t_swigregister
button_event_data_t_swigregister(button_event_data_t)

LED_OFF = _apdm.LED_OFF
LED_RED = _apdm.LED_RED
LED_GREEN = _apdm.LED_GREEN
LED_YELLOW = _apdm.LED_YELLOW
LED_BLUE = _apdm.LED_BLUE
LED_MAGENTA = _apdm.LED_MAGENTA
LED_CYAN = _apdm.LED_CYAN
LED_WHITE = _apdm.LED_WHITE
FAKE_ERROR_DATA_MODE_NONE = _apdm.FAKE_ERROR_DATA_MODE_NONE
FAKE_ERROR_DATA_MODE_CONSTANT_VALUES = _apdm.FAKE_ERROR_DATA_MODE_CONSTANT_VALUES
FAKE_ERROR_DATA_MODE_NAN_VALUES = _apdm.FAKE_ERROR_DATA_MODE_NAN_VALUES
FAKE_ERROR_DATA_MODE_INF_VALUES = _apdm.FAKE_ERROR_DATA_MODE_INF_VALUES
FAKE_ERROR_DATA_MODE_NO_DATA_OUTPUT = _apdm.FAKE_ERROR_DATA_MODE_NO_DATA_OUTPUT
FAKE_ERROR_DATA_MODE_OUT_OF_ORDER_DATA = _apdm.FAKE_ERROR_DATA_MODE_OUT_OF_ORDER_DATA
FAKE_ERROR_DATA_MODE_SKIPPED_SAMPLE = _apdm.FAKE_ERROR_DATA_MODE_SKIPPED_SAMPLE
FAKE_ERROR_DATA_MODE_LAST_ELEMENT = _apdm.FAKE_ERROR_DATA_MODE_LAST_ELEMENT
BUTTON_ANY_NO_EVENT = _apdm.BUTTON_ANY_NO_EVENT
BUTTON_1_SINGLE_PRESS = _apdm.BUTTON_1_SINGLE_PRESS
BUTTON_1_HOLD_DOWN_3S = _apdm.BUTTON_1_HOLD_DOWN_3S
BUTTON_1_HOLD_DOWN_7S = _apdm.BUTTON_1_HOLD_DOWN_7S
BUTTON_2_SINGLE_PRESS = _apdm.BUTTON_2_SINGLE_PRESS
BUTTON_2_HOLD_DOWN_3S = _apdm.BUTTON_2_HOLD_DOWN_3S
BUTTON_2_HOLD_DOWN_7S = _apdm.BUTTON_2_HOLD_DOWN_7S
BUTTON_1_2_SINGLE_PRESS = _apdm.BUTTON_1_2_SINGLE_PRESS
BUTTON_1_2_HOLD_DOWN_3S = _apdm.BUTTON_1_2_HOLD_DOWN_3S
BUTTON_1_2_HOLD_DOWN_7S = _apdm.BUTTON_1_2_HOLD_DOWN_7S
APDM_V2_CONTROL_TRANSFER_SET_OUTPUT_PIN = _apdm.APDM_V2_CONTROL_TRANSFER_SET_OUTPUT_PIN
APDM_V2_CONTROL_TRANSFER_CLEAR_OUTPUT_PIN = _apdm.APDM_V2_CONTROL_TRANSFER_CLEAR_OUTPUT_PIN
APDM_V2_CONTROL_TRANSFER_GET_OUTPUT_PIN = _apdm.APDM_V2_CONTROL_TRANSFER_GET_OUTPUT_PIN
APDM_V2_CONTROL_TRANSFER_GET_INPUT_PIN = _apdm.APDM_V2_CONTROL_TRANSFER_GET_INPUT_PIN
APDM_V2_CONTROL_TRANSFER_SET_MINIMUM_SYNC_VALUE = _apdm.APDM_V2_CONTROL_TRANSFER_SET_MINIMUM_SYNC_VALUE
APDM_V2_CONTROL_TRANSFER_SET_MAX_LATENCY = _apdm.APDM_V2_CONTROL_TRANSFER_SET_MAX_LATENCY
APDM_V2_CONTROL_TRANSFER_USB_DATA_PURGE = _apdm.APDM_V2_CONTROL_TRANSFER_USB_DATA_PURGE
APDM_V2_CONTROL_TRANSFER_LAST_ELEMENT = _apdm.APDM_V2_CONTROL_TRANSFER_LAST_ELEMENT
CAN_CMD_SET = _apdm.CAN_CMD_SET
CAN_CMD_QUERY = _apdm.CAN_CMD_QUERY
CAN_CMD_PING = _apdm.CAN_CMD_PING
CAN_CMD_EDGE_DETECT = _apdm.CAN_CMD_EDGE_DETECT
CAN_CMD_ERROR = _apdm.CAN_CMD_ERROR
CAN_CMD_HEARTBEAT = _apdm.CAN_CMD_HEARTBEAT
CAN_CMD_EXTERNAL_SENSOR_DATA = _apdm.CAN_CMD_EXTERNAL_SENSOR_DATA
CAN_CMD_EXTERNAL_SENSOR_TIMESTAMP = _apdm.CAN_CMD_EXTERNAL_SENSOR_TIMESTAMP
CAN_CMD_LAST_ELEMENT = _apdm.CAN_CMD_LAST_ELEMENT
CAN_EXTERNAL_SENSOR_CONTROLLER = _apdm.CAN_EXTERNAL_SENSOR_CONTROLLER
CAN_EXTERNAL_SENSOR_ACCEL_MID_G = _apdm.CAN_EXTERNAL_SENSOR_ACCEL_MID_G
CAN_EXTERNAL_SENSOR_ACCEL_HIGH_G = _apdm.CAN_EXTERNAL_SENSOR_ACCEL_HIGH_G
CAN_EXTERNAL_SENSOR_GYRO = _apdm.CAN_EXTERNAL_SENSOR_GYRO
CAN_EXTERNAL_SENSOR_MAG = _apdm.CAN_EXTERNAL_SENSOR_MAG
CAN_EXTERNAL_SENSOR_TEMPERATURE = _apdm.CAN_EXTERNAL_SENSOR_TEMPERATURE
CAN_EXTERNAL_SENSOR_LAST_ELEMENT = _apdm.CAN_EXTERNAL_SENSOR_LAST_ELEMENT
EXTERNAL_CONTROLLER_CODE_CAN_ERRORS = _apdm.EXTERNAL_CONTROLLER_CODE_CAN_ERRORS
EXTERNAL_CONTROLLER_CODE_FW_DATE = _apdm.EXTERNAL_CONTROLLER_CODE_FW_DATE
EXTERNAL_CONTROLLER_CODE_FW_HASH = _apdm.EXTERNAL_CONTROLLER_CODE_FW_HASH
EXTERNAL_CONTROLLER_CODE_CAN_FRAMECOUNT = _apdm.EXTERNAL_CONTROLLER_CODE_CAN_FRAMECOUNT
EXTERNAL_CONTROLLER_CODE_SSOX_SYSTEM_ERROR = _apdm.EXTERNAL_CONTROLLER_CODE_SSOX_SYSTEM_ERROR
EXTERNAL_CONTROLLER_CODE_REQUEST_CAN_ERROR = _apdm.EXTERNAL_CONTROLLER_CODE_REQUEST_CAN_ERROR
EXTERNAL_CONTROLLER_CODE_REQUEST_FW_DATE = _apdm.EXTERNAL_CONTROLLER_CODE_REQUEST_FW_DATE
EXTERNAL_CONTROLLER_CODE_REQUEST_FW_HASH = _apdm.EXTERNAL_CONTROLLER_CODE_REQUEST_FW_HASH
EXTERNAL_CONTROLLER_CODE_REQUEST_CAN_FRAMECOUNT = _apdm.EXTERNAL_CONTROLLER_CODE_REQUEST_CAN_FRAMECOUNT
EXTERNAL_CONTROLLER_CODE_LAST_ELEMENT = _apdm.EXTERNAL_CONTROLLER_CODE_LAST_ELEMENT
CAN_SET_CMD_SET_OUTPUT_PIN = _apdm.CAN_SET_CMD_SET_OUTPUT_PIN
CAN_SET_CMD_SET_LED_COLOR = _apdm.CAN_SET_CMD_SET_LED_COLOR
CAN_SET_CMD_LAST_ELEMENT = _apdm.CAN_SET_CMD_LAST_ELEMENT
CAN_QUERY_CMD_GET_OUTPUT_PIN = _apdm.CAN_QUERY_CMD_GET_OUTPUT_PIN
CAN_QUERY_CMD_GET_INPUT_PIN = _apdm.CAN_QUERY_CMD_GET_INPUT_PIN
CAN_QUERY_CMD_GET_MODE = _apdm.CAN_QUERY_CMD_GET_MODE
CAN_QUERY_CMD_GET_LED_COLOR = _apdm.CAN_QUERY_CMD_GET_LED_COLOR
CAN_QUERY_CMD_GET_ERROR_STATE = _apdm.CAN_QUERY_CMD_GET_ERROR_STATE
CAN_QUERY_CMD_GET_LAST_ERROR_STATE = _apdm.CAN_QUERY_CMD_GET_LAST_ERROR_STATE
CAN_QUERY_CMD_GET_PCB_VERSION = _apdm.CAN_QUERY_CMD_GET_PCB_VERSION
CAN_QUERY_CMD_GET_UID_LOW = _apdm.CAN_QUERY_CMD_GET_UID_LOW
CAN_QUERY_CMD_GET_UID_MID = _apdm.CAN_QUERY_CMD_GET_UID_MID
CAN_QUERY_CMD_GET_UID_HIGH = _apdm.CAN_QUERY_CMD_GET_UID_HIGH
CAN_QUERY_CMD_GET_CAN_ERRORS = _apdm.CAN_QUERY_CMD_GET_CAN_ERRORS
CAN_QUERY_CMD_GET_OUTPUT_ERRORS = _apdm.CAN_QUERY_CMD_GET_OUTPUT_ERRORS
CAN_QUERY_CMD_GET_INPUT_ERRORS = _apdm.CAN_QUERY_CMD_GET_INPUT_ERRORS
CAN_QUERY_CMD_GET_FIRMWARE_VERSION = _apdm.CAN_QUERY_CMD_GET_FIRMWARE_VERSION
CAN_QUERY_CMD_GET_LAST_ELEMENT = _apdm.CAN_QUERY_CMD_GET_LAST_ELEMENT
CAN_EDGE_FALLING_EDGE = _apdm.CAN_EDGE_FALLING_EDGE
CAN_EDGE_RISING_EDGE = _apdm.CAN_EDGE_RISING_EDGE
CAN_SYNC_BOX_PIN_INPUT = _apdm.CAN_SYNC_BOX_PIN_INPUT
CAN_SYNC_BOX_PIN_OUTPUT = _apdm.CAN_SYNC_BOX_PIN_OUTPUT
CAN_PACKET_STATUS_CMD_SET_SUCCESS = _apdm.CAN_PACKET_STATUS_CMD_SET_SUCCESS
CAN_PACKET_STATUS_CMD_SET_FAILURE = _apdm.CAN_PACKET_STATUS_CMD_SET_FAILURE
CAN_PACKET_STATUS_CMD_QUERY_SUCCESS = _apdm.CAN_PACKET_STATUS_CMD_QUERY_SUCCESS
CAN_PACKET_STATUS_CMD_QUERY_FAILURE = _apdm.CAN_PACKET_STATUS_CMD_QUERY_FAILURE
CAN_PACKET_STATUS_CMD_PING_SUCCESS = _apdm.CAN_PACKET_STATUS_CMD_PING_SUCCESS
CAN_PACKET_STATUS_CMD_PING_FAILURE = _apdm.CAN_PACKET_STATUS_CMD_PING_FAILURE
CAN_PACKET_STATUS_CMD_RECORD_SUCCESS = _apdm.CAN_PACKET_STATUS_CMD_RECORD_SUCCESS
CAN_PACKET_STATUS_CMD_RECORD_FAILURE = _apdm.CAN_PACKET_STATUS_CMD_RECORD_FAILURE
CAN_PACKET_STATUS_CMD_PACKET_DUPLICATE = _apdm.CAN_PACKET_STATUS_CMD_PACKET_DUPLICATE
CAN_PACKET_STATUS_CMD_PACKET_INVALID = _apdm.CAN_PACKET_STATUS_CMD_PACKET_INVALID
CAN_PACKET_STATUS_CMD_UNHANDLED_CMD = _apdm.CAN_PACKET_STATUS_CMD_UNHANDLED_CMD
CAN_PACKET_STATUS_CMD_HEARTBEAT_SUCCESS = _apdm.CAN_PACKET_STATUS_CMD_HEARTBEAT_SUCCESS
CAN_PACKET_STATUS_CMD_HEARTBEAT_FAILURE = _apdm.CAN_PACKET_STATUS_CMD_HEARTBEAT_FAILURE
HARDWARE_ID_2_0 = _apdm.HARDWARE_ID_2_0
HARDWARE_ID_2_1 = _apdm.HARDWARE_ID_2_1
HARDWARE_ID_2_5 = _apdm.HARDWARE_ID_2_5
HARDWARE_ID_2_6 = _apdm.HARDWARE_ID_2_6
HARDWARE_ID_2_9 = _apdm.HARDWARE_ID_2_9
HARDWARE_ID_2_9_R1 = _apdm.HARDWARE_ID_2_9_R1
HARDWARE_ID_2_10 = _apdm.HARDWARE_ID_2_10
HARDWARE_ID_LAST_ELEMENT = _apdm.HARDWARE_ID_LAST_ELEMENT
DEVICE_STATISTIC_NONE = _apdm.DEVICE_STATISTIC_NONE
DEVICE_STATISTIC_RSSI = _apdm.DEVICE_STATISTIC_RSSI
DEVICE_STATISTIC_CPU_PERCENT = _apdm.DEVICE_STATISTIC_CPU_PERCENT
DEVICE_STATISTIC_BATTERY_PERCENT = _apdm.DEVICE_STATISTIC_BATTERY_PERCENT
DEVICE_STATISTIC_BATTERY_VOLTAGE_MV = _apdm.DEVICE_STATISTIC_BATTERY_VOLTAGE_MV
DEVICE_STATISTIC_BATTERY_TIME_TO_EMPTY_MINUTES = _apdm.DEVICE_STATISTIC_BATTERY_TIME_TO_EMPTY_MINUTES
DEVICE_STATISTIC_BATTERY_REMAINING_CAPACITY_MAH = _apdm.DEVICE_STATISTIC_BATTERY_REMAINING_CAPACITY_MAH
DEVICE_STATISTIC_BATTERY_FULL_CHARGE_CAPACITY_MAH = _apdm.DEVICE_STATISTIC_BATTERY_FULL_CHARGE_CAPACITY_MAH
DEVICE_STATISTIC_FILTER_QUEUE_SAMPLES_PER_SECOND = _apdm.DEVICE_STATISTIC_FILTER_QUEUE_SAMPLES_PER_SECOND
DEVICE_STATISTIC_WIRELESS_QUEUE_SAMPLES_PER_SECOND = _apdm.DEVICE_STATISTIC_WIRELESS_QUEUE_SAMPLES_PER_SECOND
DEVICE_STATISTIC_STRUCTURE_SUM = _apdm.DEVICE_STATISTIC_STRUCTURE_SUM
DEVICE_STATISTIC_HARDWARE_ID = _apdm.DEVICE_STATISTIC_HARDWARE_ID
DEVICE_STATISTIC_MINIMUM_SYNC_VALUE_HIGH = _apdm.DEVICE_STATISTIC_MINIMUM_SYNC_VALUE_HIGH
DEVICE_STATISTIC_MINIMUM_SYNC_VALUE_LOW = _apdm.DEVICE_STATISTIC_MINIMUM_SYNC_VALUE_LOW
DEVICE_STATISTIC_FIRMWARE_DATE = _apdm.DEVICE_STATISTIC_FIRMWARE_DATE
DEVICE_STATISTIC_SCHEMATIC_REVISION = _apdm.DEVICE_STATISTIC_SCHEMATIC_REVISION
DEVICE_STATISTIC_LAST_ELEMENT = _apdm.DEVICE_STATISTIC_LAST_ELEMENT
CONFIG_V2_FILTER_MODE_DEFAULT = _apdm.CONFIG_V2_FILTER_MODE_DEFAULT
CONFIG_V2_FILTER_MODE_RAW_SENSOR_DATA = _apdm.CONFIG_V2_FILTER_MODE_RAW_SENSOR_DATA
CONFIG_V2_SD_BUFFERING_AUTO = _apdm.CONFIG_V2_SD_BUFFERING_AUTO
CONFIG_V2_SD_BUFFERING_ENABLED = _apdm.CONFIG_V2_SD_BUFFERING_ENABLED
CONFIG_V2_SD_BUFFERING_DISABLED = _apdm.CONFIG_V2_SD_BUFFERING_DISABLED
CONFIG_V2_SI_SD_DATA_LOGGING_OFF = _apdm.CONFIG_V2_SI_SD_DATA_LOGGING_OFF
CONFIG_V2_SI_SD_DATA_LOGGING_DEFAULT = _apdm.CONFIG_V2_SI_SD_DATA_LOGGING_DEFAULT
CONFIG_V2_SI_SD_DATA_LOGGING_INDIVIDUAL_SENSORS = _apdm.CONFIG_V2_SI_SD_DATA_LOGGING_INDIVIDUAL_SENSORS
CONFIG_V2_SI_SD_DATA_LOGGING_LAST_ELEMENT = _apdm.CONFIG_V2_SI_SD_DATA_LOGGING_LAST_ELEMENT
CONFIG_V2_LED_MODE_OFF = _apdm.CONFIG_V2_LED_MODE_OFF
CONFIG_V2_LED_MODE_NORMAL = _apdm.CONFIG_V2_LED_MODE_NORMAL
WIRELESS_DOCKING_BEHAVIOR_DEFAULT = _apdm.WIRELESS_DOCKING_BEHAVIOR_DEFAULT
WIRELESS_DOCKING_BEHAVIOR_ENABLE = _apdm.WIRELESS_DOCKING_BEHAVIOR_ENABLE
WIRELESS_DOCKING_BEHAVIOR_LAST_ELEMENT = _apdm.WIRELESS_DOCKING_BEHAVIOR_LAST_ELEMENT
EXTERNAL_COMMUNICATIONS_MODE_NONE = _apdm.EXTERNAL_COMMUNICATIONS_MODE_NONE
EXTERNAL_COMMUNICATIONS_MODE_UART = _apdm.EXTERNAL_COMMUNICATIONS_MODE_UART
EXTERNAL_COMMUNICATIONS_MODE_CAN = _apdm.EXTERNAL_COMMUNICATIONS_MODE_CAN
EXTERNAL_COMMUNICATIONS_MODE_EXT_BUTTON = _apdm.EXTERNAL_COMMUNICATIONS_MODE_EXT_BUTTON
EXTERNAL_COMMUNICATIONS_MODE_LAST_ELEMENT = _apdm.EXTERNAL_COMMUNICATIONS_MODE_LAST_ELEMENT
LOGGING_BEHAVIOR_DISABLE_WHILE_CHARGING = _apdm.LOGGING_BEHAVIOR_DISABLE_WHILE_CHARGING
LOGGING_BEHAVIOR_ENABLE_WHILE_CHARGING = _apdm.LOGGING_BEHAVIOR_ENABLE_WHILE_CHARGING
MONITOR_BUTTON_MODE_NONE = _apdm.MONITOR_BUTTON_MODE_NONE
MONITOR_BUTTON_MODE_EVENT_LOGGING = _apdm.MONITOR_BUTTON_MODE_EVENT_LOGGING
RANGING_MODE_DISABLED = _apdm.RANGING_MODE_DISABLED
RANGING_MODE_ANCHOR = _apdm.RANGING_MODE_ANCHOR
RANGING_MODE_TAG = _apdm.RANGING_MODE_TAG
DEVICE_DATA_CASE_ID = _apdm.DEVICE_DATA_CASE_ID
DEVICE_DATA_SENSOR_ID = _apdm.DEVICE_DATA_SENSOR_ID
DEVICE_DATA_BUTTON_1 = _apdm.DEVICE_DATA_BUTTON_1
DEVICE_DATA_BUTTON_2 = _apdm.DEVICE_DATA_BUTTON_2
DEVICE_DATA_DIGITAL_INPUT = _apdm.DEVICE_DATA_DIGITAL_INPUT
DEVICE_DATA_DIGITAL_OUTPUT = _apdm.DEVICE_DATA_DIGITAL_OUTPUT
DEVICE_DATA_ANALOG_INPUT = _apdm.DEVICE_DATA_ANALOG_INPUT
DEVICE_DATA_SYNC_VALUE = _apdm.DEVICE_DATA_SYNC_VALUE
DEVICE_DATA_EPOCH_MS_OFFSET = _apdm.DEVICE_DATA_EPOCH_MS_OFFSET
DEVICE_DATA_HARDWARE_ID = _apdm.DEVICE_DATA_HARDWARE_ID
DEVICE_DATA_MODULE_ID = _apdm.DEVICE_DATA_MODULE_ID
DEVICE_DATA_FIRMWARE_VERSION = _apdm.DEVICE_DATA_FIRMWARE_VERSION
DEVICE_DATA_USB_MILLIVOLTS = _apdm.DEVICE_DATA_USB_MILLIVOLTS
DEVICE_DATA_DISK_TOTAL_MEGS = _apdm.DEVICE_DATA_DISK_TOTAL_MEGS
DEVICE_DATA_DISK_USED_MEGS = _apdm.DEVICE_DATA_DISK_USED_MEGS
DEVICE_DATA_STRUCTURE_SUM = _apdm.DEVICE_DATA_STRUCTURE_SUM
DEVICE_DATA_DELETE_OLD_FILES = _apdm.DEVICE_DATA_DELETE_OLD_FILES
DEVICE_DATA_CONFIG_VALID = _apdm.DEVICE_DATA_CONFIG_VALID
DEVICE_DATA_CALIBRATION_VERSION = _apdm.DEVICE_DATA_CALIBRATION_VERSION
DEVICE_DATA_BATTERY_MILLIVOLTS = _apdm.DEVICE_DATA_BATTERY_MILLIVOLTS
DEVICE_DATA_BATTERY_CHARGE_STATUS = _apdm.DEVICE_DATA_BATTERY_CHARGE_STATUS
DEVICE_DATA_BOOTLOADER_VERSION = _apdm.DEVICE_DATA_BOOTLOADER_VERSION
DEVICE_DATA_COMPILE_DATETIME = _apdm.DEVICE_DATA_COMPILE_DATETIME
DEVICE_DATA_TEMPERATURE_C = _apdm.DEVICE_DATA_TEMPERATURE_C
DEVICE_DATA_BATTERY_CURRENT_MA = _apdm.DEVICE_DATA_BATTERY_CURRENT_MA
DEVICE_DATA_BATTERY_SOH = _apdm.DEVICE_DATA_BATTERY_SOH
DEVICE_DATA_BATTERY_NOMINAL_AVAILABLE_CAPACITY_MAH = _apdm.DEVICE_DATA_BATTERY_NOMINAL_AVAILABLE_CAPACITY_MAH
DEVICE_DATA_BATTERY_FULL_AVAILABLE_CAPACITY_MAH = _apdm.DEVICE_DATA_BATTERY_FULL_AVAILABLE_CAPACITY_MAH
DEVICE_DATA_BATTERY_CYCLE_COUNT = _apdm.DEVICE_DATA_BATTERY_CYCLE_COUNT
DEVICE_DATA_BATTERY_DESIGN_CAPACITY_MAH = _apdm.DEVICE_DATA_BATTERY_DESIGN_CAPACITY_MAH
DEVICE_DATA_BATTERY_BQ_FW_VERSION = _apdm.DEVICE_DATA_BATTERY_BQ_FW_VERSION
DEVICE_DATA_EXTERNAL_CONTROLLER_FW_DATE = _apdm.DEVICE_DATA_EXTERNAL_CONTROLLER_FW_DATE
DEVICE_DATA_EXTERNAL_CONTROLLER_FW_HASH = _apdm.DEVICE_DATA_EXTERNAL_CONTROLLER_FW_HASH
DEVICE_DATA_LAST_ELEMENT = _apdm.DEVICE_DATA_LAST_ELEMENT
ERROR_NONE = _apdm.ERROR_NONE
ERROR_STK_OVERFLOW = _apdm.ERROR_STK_OVERFLOW
ERROR_FLUSH_CONFIG_FAIL = _apdm.ERROR_FLUSH_CONFIG_FAIL
ERROR_EMMC_FF_WRITE = _apdm.ERROR_EMMC_FF_WRITE
ERROR_EMMC_FF_READ = _apdm.ERROR_EMMC_FF_READ
ERROR_EMMC_FF_READ_SIZE = _apdm.ERROR_EMMC_FF_READ_SIZE
ERROR_EMMC_FF_SEEK = _apdm.ERROR_EMMC_FF_SEEK
ERROR_EMMC_FF_CLOSE = _apdm.ERROR_EMMC_FF_CLOSE
ERROR_EMMC_FF_OPEN = _apdm.ERROR_EMMC_FF_OPEN
ERROR_EMMC_FF_MOUNT = _apdm.ERROR_EMMC_FF_MOUNT
ERROR_EMMC_FF_SYNC = _apdm.ERROR_EMMC_FF_SYNC
ERROR_EMMC_WRITE_SAMPLE1 = _apdm.ERROR_EMMC_WRITE_SAMPLE1
ERROR_EMMC_WRITE_SAMPLE2 = _apdm.ERROR_EMMC_WRITE_SAMPLE2
ERROR_EMMC_WRITE_RAW = _apdm.ERROR_EMMC_WRITE_RAW
ERROR_EMMC_WRITE_HEADER = _apdm.ERROR_EMMC_WRITE_HEADER
ERROR_FR_DISK_ERR = _apdm.ERROR_FR_DISK_ERR
ERROR_FR_INT_ERR = _apdm.ERROR_FR_INT_ERR
ERROR_FR_NOT_READY = _apdm.ERROR_FR_NOT_READY
ERROR_FR_NO_FILE = _apdm.ERROR_FR_NO_FILE
ERROR_FR_NO_PATH = _apdm.ERROR_FR_NO_PATH
ERROR_FR_INVALID_NAME = _apdm.ERROR_FR_INVALID_NAME
ERROR_FR_DENIED = _apdm.ERROR_FR_DENIED
ERROR_FR_EXIST = _apdm.ERROR_FR_EXIST
ERROR_FR_INVALID_OBJECT = _apdm.ERROR_FR_INVALID_OBJECT
ERROR_FR_WRITE_PROTECTED = _apdm.ERROR_FR_WRITE_PROTECTED
ERROR_FR_INVALID_DRIVE = _apdm.ERROR_FR_INVALID_DRIVE
ERROR_FR_NOT_ENABLED = _apdm.ERROR_FR_NOT_ENABLED
ERROR_FR_NO_FILESYSTEM = _apdm.ERROR_FR_NO_FILESYSTEM
ERROR_FR_MKFS_ABORTED = _apdm.ERROR_FR_MKFS_ABORTED
ERROR_FR_TIMEOUT = _apdm.ERROR_FR_TIMEOUT
ERROR_FR_LOCKED = _apdm.ERROR_FR_LOCKED
ERROR_FR_NOT_ENOUGH_CORE = _apdm.ERROR_FR_NOT_ENOUGH_CORE
ERROR_FR_TOO_MANY_OPEN_FILES = _apdm.ERROR_FR_TOO_MANY_OPEN_FILES
ERROR_FR_INVALID_PARAMETER = _apdm.ERROR_FR_INVALID_PARAMETER
ERROR_EMMC_FF_FORMAT_FAIL = _apdm.ERROR_EMMC_FF_FORMAT_FAIL
ERROR_EMMC_FAILED_READ_RECORD = _apdm.ERROR_EMMC_FAILED_READ_RECORD
ERROR_EMMC_BAD_MAGIC1 = _apdm.ERROR_EMMC_BAD_MAGIC1
ERROR_EMMC_PAYLOAD_TOO_BIG = _apdm.ERROR_EMMC_PAYLOAD_TOO_BIG
ERROR_EMMC_BAD_STRUCT_TYPE = _apdm.ERROR_EMMC_BAD_STRUCT_TYPE
ERROR_EMMC_HEADER_RD_FAIL = _apdm.ERROR_EMMC_HEADER_RD_FAIL
ERROR_EMMC_DATA_HD_RD_FAIL = _apdm.ERROR_EMMC_DATA_HD_RD_FAIL
ERROR_EMMC_RAW_SAMP_RD_FAIL = _apdm.ERROR_EMMC_RAW_SAMP_RD_FAIL
ERROR_EMMC_SI_SAMP_RD_FAIL = _apdm.ERROR_EMMC_SI_SAMP_RD_FAIL
ERROR_EMMC_SAMPLE_SIZE = _apdm.ERROR_EMMC_SAMPLE_SIZE
ERROR_EMMC_PAD_WR_FAIL = _apdm.ERROR_EMMC_PAD_WR_FAIL
ERROR_EMMC_CB_FAIL = _apdm.ERROR_EMMC_CB_FAIL
ERROR_EMMC_MISSING_RUNSTATS = _apdm.ERROR_EMMC_MISSING_RUNSTATS
ERROR_INI_FILE_PARSE_FAIL = _apdm.ERROR_INI_FILE_PARSE_FAIL
ERROR_USB_MSD_BLK_DEV_NOT_RDY = _apdm.ERROR_USB_MSD_BLK_DEV_NOT_RDY
ERROR_USB_SERIAL_W_TO = _apdm.ERROR_USB_SERIAL_W_TO
ERROR_USB_IEP_BERR = _apdm.ERROR_USB_IEP_BERR
ERROR_USB_IEP_PKTDRPSTS = _apdm.ERROR_USB_IEP_PKTDRPSTS
ERROR_USB_IEP_BNA = _apdm.ERROR_USB_IEP_BNA
ERROR_USB_IEP_TXFIFOUDRN = _apdm.ERROR_USB_IEP_TXFIFOUDRN
ERROR_USB_IEP_TOC = _apdm.ERROR_USB_IEP_TOC
ERROR_USB_DSTS_IN_EERR = _apdm.ERROR_USB_DSTS_IN_EERR
ERROR_USB_DSTS_OUT_EERR = _apdm.ERROR_USB_DSTS_OUT_EERR
ERROR_INTERPOL_ACCEL_MID_G = _apdm.ERROR_INTERPOL_ACCEL_MID_G
ERROR_INTERPOL_ACCEL_HIGH_G = _apdm.ERROR_INTERPOL_ACCEL_HIGH_G
ERROR_INTERPOL_GYRO = _apdm.ERROR_INTERPOL_GYRO
ERROR_INTERPOL_MAG = _apdm.ERROR_INTERPOL_MAG
ERROR_INTERPOL_TEMPERATURE = _apdm.ERROR_INTERPOL_TEMPERATURE
ERROR_INTERPOL_PRESSURE = _apdm.ERROR_INTERPOL_PRESSURE
ERROR_BMA280_READ = _apdm.ERROR_BMA280_READ
ERROR_BMA280_FORCE_SAMPLE = _apdm.ERROR_BMA280_FORCE_SAMPLE
ERROR_BMA280_SELF_TEST_FAIL = _apdm.ERROR_BMA280_SELF_TEST_FAIL
ERROR_GYRO_READ = _apdm.ERROR_GYRO_READ
ERROR_GYRO_FORCE_SAMPLE = _apdm.ERROR_GYRO_FORCE_SAMPLE
ERROR_GYRO_REINIT = _apdm.ERROR_GYRO_REINIT
ERROR_GYRO_SELF_TEST_FAIL = _apdm.ERROR_GYRO_SELF_TEST_FAIL
ERROR_HMC5883L_READ = _apdm.ERROR_HMC5883L_READ
ERROR_MAG_INT_RECOVER = _apdm.ERROR_MAG_INT_RECOVER
ERROR_MAG_BUS_RECOVER = _apdm.ERROR_MAG_BUS_RECOVER
ERROR_MAG_SELF_TEST_FAIL = _apdm.ERROR_MAG_SELF_TEST_FAIL
ERROR_MAG_READ = _apdm.ERROR_MAG_READ
ERROR_BMP280_READ = _apdm.ERROR_BMP280_READ
ERROR_ADXL375_READ = _apdm.ERROR_ADXL375_READ
ERROR_ADXL_FORCE_SAMPLE = _apdm.ERROR_ADXL_FORCE_SAMPLE
ERROR_ADXL375_INIT_FAIL = _apdm.ERROR_ADXL375_INIT_FAIL
ERROR_ADXL375_SELF_TEST_FAIL = _apdm.ERROR_ADXL375_SELF_TEST_FAIL
ERROR_MISSED_SAMPLE_BMA280 = _apdm.ERROR_MISSED_SAMPLE_BMA280
ERROR_MISSED_SAMPLE_ADXL375 = _apdm.ERROR_MISSED_SAMPLE_ADXL375
ERROR_MISSED_SAMPLE_MAX21000 = _apdm.ERROR_MISSED_SAMPLE_MAX21000
ERROR_MISSED_SAMPLE_MAG = _apdm.ERROR_MISSED_SAMPLE_MAG
ERROR_MISSED_SAMPLE_BMP280 = _apdm.ERROR_MISSED_SAMPLE_BMP280
ERROR_MAX_SAMPLE_WEIGHTS_EXCEDDED = _apdm.ERROR_MAX_SAMPLE_WEIGHTS_EXCEDDED
ERROR_BQ24158_READ = _apdm.ERROR_BQ24158_READ
ERROR_BQ24158_WRITE = _apdm.ERROR_BQ24158_WRITE
ERROR_BQ24158_PART_ID = _apdm.ERROR_BQ24158_PART_ID
ERROR_BQ24158_WDT_RST_FAIL = _apdm.ERROR_BQ24158_WDT_RST_FAIL
ERROR_BQ27742_WRITE = _apdm.ERROR_BQ27742_WRITE
ERROR_BQ27742_WRITEREAD = _apdm.ERROR_BQ27742_WRITEREAD
ERROR_BQ27742_PART_ID = _apdm.ERROR_BQ27742_PART_ID
ERROR_SPI1_RESET = _apdm.ERROR_SPI1_RESET
ERROR_SPI2_RESET = _apdm.ERROR_SPI2_RESET
ERROR_SPI3_RESET = _apdm.ERROR_SPI3_RESET
ERROR_I2C3_SENSOR_NOT_READY = _apdm.ERROR_I2C3_SENSOR_NOT_READY
ERROR_I2C3_SENSOR_RESET = _apdm.ERROR_I2C3_SENSOR_RESET
ERROR_I2C3_SENSOR_RESET_FAIL = _apdm.ERROR_I2C3_SENSOR_RESET_FAIL
ERROR_I2C2_SYSTEM_NOT_READY = _apdm.ERROR_I2C2_SYSTEM_NOT_READY
ERROR_I2C2_SYSTEM_RESET = _apdm.ERROR_I2C2_SYSTEM_RESET
ERROR_I2C2_SYSTEM_RESET_FAIL = _apdm.ERROR_I2C2_SYSTEM_RESET_FAIL
ERROR_CAN1_RESET = _apdm.ERROR_CAN1_RESET
ERROR_USB_RESET = _apdm.ERROR_USB_RESET
ERROR_SD_RESET = _apdm.ERROR_SD_RESET
ERROR_QUEUE_ZERO_TIME_THRESHOLD = _apdm.ERROR_QUEUE_ZERO_TIME_THRESHOLD
ERROR_RADIO_TX = _apdm.ERROR_RADIO_TX
ERROR_RADIO_RX = _apdm.ERROR_RADIO_RX
ERROR_RADIO_BUSY_WAIT_TIMEOUT = _apdm.ERROR_RADIO_BUSY_WAIT_TIMEOUT
ERROR_RADIO_BUSY_TIMEOUT = _apdm.ERROR_RADIO_BUSY_TIMEOUT
ERROR_RADIO_CRC_RESPONSE = _apdm.ERROR_RADIO_CRC_RESPONSE
ERROR_RADIO_RESPONSE_BUSY = _apdm.ERROR_RADIO_RESPONSE_BUSY
ERROR_RADIO_RESPONSE_BOOTLODER = _apdm.ERROR_RADIO_RESPONSE_BOOTLODER
ERROR_RADIO_RESPONSE_FIRMWARE = _apdm.ERROR_RADIO_RESPONSE_FIRMWARE
ERROR_RADIO_RESPONSE_CRC = _apdm.ERROR_RADIO_RESPONSE_CRC
ERROR_RADIO_RESPONSE_CMD = _apdm.ERROR_RADIO_RESPONSE_CMD
ERROR_RADIO_RESPONSE_DATA = _apdm.ERROR_RADIO_RESPONSE_DATA
ERROR_RADIO_RESPONSE_LENGTH = _apdm.ERROR_RADIO_RESPONSE_LENGTH
ERROR_RADIO_RESPONSE_MODE = _apdm.ERROR_RADIO_RESPONSE_MODE
ERROR_RADIO_RESPONSE_FULL = _apdm.ERROR_RADIO_RESPONSE_FULL
ERROR_RADIO_RESPONSE_EMPTY = _apdm.ERROR_RADIO_RESPONSE_EMPTY
ERROR_RADIO_RESPONSE_TIMEOUT = _apdm.ERROR_RADIO_RESPONSE_TIMEOUT
ERROR_RADIO_RESPONSE_NOP = _apdm.ERROR_RADIO_RESPONSE_NOP
ERROR_RADIO_RESPONSE_EXEC = _apdm.ERROR_RADIO_RESPONSE_EXEC
ERROR_RADIO_RESPONSE_SYSTEM = _apdm.ERROR_RADIO_RESPONSE_SYSTEM
ERROR_RADIO_CMD_STATUS = _apdm.ERROR_RADIO_CMD_STATUS
ERROR_RADIO_CMD_BOOTLOADER_VERSION = _apdm.ERROR_RADIO_CMD_BOOTLOADER_VERSION
ERROR_RADIO_CMD_BOOTLOADER_READ_MEM = _apdm.ERROR_RADIO_CMD_BOOTLOADER_READ_MEM
ERROR_RADIO_CMD_BOOTLOADER_READ_MEM4 = _apdm.ERROR_RADIO_CMD_BOOTLOADER_READ_MEM4
ERROR_RADIO_CMD_BOOTLOADER_WRITE_MEM = _apdm.ERROR_RADIO_CMD_BOOTLOADER_WRITE_MEM
ERROR_RADIO_CMD_BOOTLOADER_WRITE_MEM4 = _apdm.ERROR_RADIO_CMD_BOOTLOADER_WRITE_MEM4
ERROR_RADIO_CMD_BOOTLOADER_ERASE_FLASH_PAGE = _apdm.ERROR_RADIO_CMD_BOOTLOADER_ERASE_FLASH_PAGE
ERROR_RADIO_CMD_BOOTLOADER_WRITE_FLASH_PAGE = _apdm.ERROR_RADIO_CMD_BOOTLOADER_WRITE_FLASH_PAGE
ERROR_RADIO_CMD_BOOTLOADER_FLASH_PAGE_SIZE = _apdm.ERROR_RADIO_CMD_BOOTLOADER_FLASH_PAGE_SIZE
ERROR_RADIO_CMD_BOOTLOADER_FLASH_PAGE_BUFFER = _apdm.ERROR_RADIO_CMD_BOOTLOADER_FLASH_PAGE_BUFFER
ERROR_RADIO_CMD_BOOTLOADER_FIRMWARE_BASE = _apdm.ERROR_RADIO_CMD_BOOTLOADER_FIRMWARE_BASE
ERROR_RADIO_CMD_BOOTLOADER_CRC32 = _apdm.ERROR_RADIO_CMD_BOOTLOADER_CRC32
ERROR_RADIO_CMD_PROTOCOL_VERSION = _apdm.ERROR_RADIO_CMD_PROTOCOL_VERSION
ERROR_RADIO_CMD_SET_REGISTER = _apdm.ERROR_RADIO_CMD_SET_REGISTER
ERROR_RADIO_CMD_GET_REGISTER = _apdm.ERROR_RADIO_CMD_GET_REGISTER
ERROR_RADIO_CMD_TX_PACKET = _apdm.ERROR_RADIO_CMD_TX_PACKET
ERROR_RADIO_CMD_RX_PACKET = _apdm.ERROR_RADIO_CMD_RX_PACKET
ERROR_RADIO_CMD_DEBUG_COUNT = _apdm.ERROR_RADIO_CMD_DEBUG_COUNT
ERROR_RADIO_SET_REG_TX_MASK = _apdm.ERROR_RADIO_SET_REG_TX_MASK
ERROR_RADIO_SET_REG_FIFO_FLUSH = _apdm.ERROR_RADIO_SET_REG_FIFO_FLUSH
ERROR_RADIO_SET_REG_DEVICE_ID = _apdm.ERROR_RADIO_SET_REG_DEVICE_ID
ERROR_RADIO_SET_REG_MESH_CHANNEL = _apdm.ERROR_RADIO_SET_REG_MESH_CHANNEL
ERROR_RADIO_SET_REG_STREAMING_CHANNEL = _apdm.ERROR_RADIO_SET_REG_STREAMING_CHANNEL
ERROR_RADIO_SET_REG_BASIC_CHANNEL = _apdm.ERROR_RADIO_SET_REG_BASIC_CHANNEL
ERROR_RADIO_SET_REG_LISTEN_CHANNEL = _apdm.ERROR_RADIO_SET_REG_LISTEN_CHANNEL
ERROR_RADIO_SET_REG_MESH_NODE_COUNT = _apdm.ERROR_RADIO_SET_REG_MESH_NODE_COUNT
ERROR_RADIO_SET_REG_GROUP_CODE = _apdm.ERROR_RADIO_SET_REG_GROUP_CODE
ERROR_RADIO_SET_REG_STREAMING_TX_MASK = _apdm.ERROR_RADIO_SET_REG_STREAMING_TX_MASK
ERROR_RADIO_SET_REG_INTERRUPT_MASK_ = _apdm.ERROR_RADIO_SET_REG_INTERRUPT_MASK_
ERROR_RADIO_SET_REG_INTERRUPT_MASK_0 = _apdm.ERROR_RADIO_SET_REG_INTERRUPT_MASK_0
ERROR_RADIO_SET_REG_INTERRUPT_MASK_1 = _apdm.ERROR_RADIO_SET_REG_INTERRUPT_MASK_1
ERROR_RADIO_SET_REG_INTERRUPT_MASK_2 = _apdm.ERROR_RADIO_SET_REG_INTERRUPT_MASK_2
ERROR_RADIO_SET_REG_INTERRUPT_MASK_3 = _apdm.ERROR_RADIO_SET_REG_INTERRUPT_MASK_3
ERROR_RADIO_SET_REG_INTERRUPT_MASK_4 = _apdm.ERROR_RADIO_SET_REG_INTERRUPT_MASK_4
ERROR_RADIO_SET_REG_INTERRUPT_MASK_5 = _apdm.ERROR_RADIO_SET_REG_INTERRUPT_MASK_5
ERROR_RADIO_MESH_DATA_READ = _apdm.ERROR_RADIO_MESH_DATA_READ
ERROR_NRF_DUP_RX = _apdm.ERROR_NRF_DUP_RX
ERROR_RADIO_DUP_RX = _apdm.ERROR_RADIO_DUP_RX
ERROR_RADIO_DUP_TX = _apdm.ERROR_RADIO_DUP_TX
ERROR_RADIO_STATE_TX = _apdm.ERROR_RADIO_STATE_TX
ERROR_RADIO_TX_PAYLOAD_TOO_LARGE = _apdm.ERROR_RADIO_TX_PAYLOAD_TOO_LARGE
ERROR_RADIO_PROTO_VER_MISMATCH = _apdm.ERROR_RADIO_PROTO_VER_MISMATCH
ERROR_RADIO_RECONFIG = _apdm.ERROR_RADIO_RECONFIG
ERROR_RADIO_RX_FIFO_FULL = _apdm.ERROR_RADIO_RX_FIFO_FULL
ERROR_RADIO_TX_FIFO_FULL = _apdm.ERROR_RADIO_TX_FIFO_FULL
ERROR_STREAM_MIN_SYNC = _apdm.ERROR_STREAM_MIN_SYNC
ERROR_LATENCY_DISCARD = _apdm.ERROR_LATENCY_DISCARD
ERROR_RAW_OLD_DISCARD = _apdm.ERROR_RAW_OLD_DISCARD
ERROR_RECALC_NEXT_SYNC = _apdm.ERROR_RECALC_NEXT_SYNC
ERROR_SYNC_STM_OUT_OF_SYNC = _apdm.ERROR_SYNC_STM_OUT_OF_SYNC
ERROR_UNKNOWN_QUEUE_TYPE = _apdm.ERROR_UNKNOWN_QUEUE_TYPE
ERROR_FILT_RAW_Q_TOO_SHORT = _apdm.ERROR_FILT_RAW_Q_TOO_SHORT
ERROR_FILT_MAX_QUEUE_LENGTH = _apdm.ERROR_FILT_MAX_QUEUE_LENGTH
ERROR_BAD_RAW_TIME = _apdm.ERROR_BAD_RAW_TIME
ERROR_RADIO_RX_INV_GROUP = _apdm.ERROR_RADIO_RX_INV_GROUP
ERROR_FL_ERASE_FAIL = _apdm.ERROR_FL_ERASE_FAIL
ERROR_FL_ERASE_BF = _apdm.ERROR_FL_ERASE_BF
ERROR_FL_ERASE_NP = _apdm.ERROR_FL_ERASE_NP
ERROR_FL_WRITE_FAIL = _apdm.ERROR_FL_WRITE_FAIL
ERROR_SKIP_DATA = _apdm.ERROR_SKIP_DATA
ERROR_ENQ_FAIL = _apdm.ERROR_ENQ_FAIL
ERROR_EMMC_REC_WR_FAIL = _apdm.ERROR_EMMC_REC_WR_FAIL
ERROR_EMMC_REC_NO_WRITE = _apdm.ERROR_EMMC_REC_NO_WRITE
ERROR_NEG_SYNC_JUMP = _apdm.ERROR_NEG_SYNC_JUMP
ERROR_RADIO_RX_FIFO_OFLOW = _apdm.ERROR_RADIO_RX_FIFO_OFLOW
ERROR_EMMC_FILE_DEL_FAIL = _apdm.ERROR_EMMC_FILE_DEL_FAIL
ERROR_EMMC_DIR_CLOSE_FAIL = _apdm.ERROR_EMMC_DIR_CLOSE_FAIL
ERROR_USART_SPI_INIT = _apdm.ERROR_USART_SPI_INIT
ERROR_DOUBLE_MISSED_SAMPLE = _apdm.ERROR_DOUBLE_MISSED_SAMPLE
ERROR_BMA28X_ZERO_READING = _apdm.ERROR_BMA28X_ZERO_READING
ERROR_BMP280_ZERO_READING = _apdm.ERROR_BMP280_ZERO_READING
ERROR_ADXL375_ZERO_READING = _apdm.ERROR_ADXL375_ZERO_READING
ERROR_GYRO_ZERO_READING = _apdm.ERROR_GYRO_ZERO_READING
ERROR_MAG_ZERO_READING = _apdm.ERROR_MAG_ZERO_READING
ERROR_EMMC_RD_DATA_GAP = _apdm.ERROR_EMMC_RD_DATA_GAP
ERROR_TX_DATA_GAP = _apdm.ERROR_TX_DATA_GAP
ERROR_RX_DATA_GAP = _apdm.ERROR_RX_DATA_GAP
ERROR_USB_TX_DATA_GAP = _apdm.ERROR_USB_TX_DATA_GAP
ERROR_RNG_BUFF_OFLO = _apdm.ERROR_RNG_BUFF_OFLO
ERROR_Q_OVRR_FSD = _apdm.ERROR_Q_OVRR_FSD
ERROR_Q_OVRR_RAW_ACCEL_MID_G = _apdm.ERROR_Q_OVRR_RAW_ACCEL_MID_G
ERROR_Q_OVRR_RAW_ACCEL_HIGH_G = _apdm.ERROR_Q_OVRR_RAW_ACCEL_HIGH_G
ERROR_Q_OVRR_RAW_GYRO = _apdm.ERROR_Q_OVRR_RAW_GYRO
ERROR_Q_OVRR_RAW_MAG = _apdm.ERROR_Q_OVRR_RAW_MAG
ERROR_Q_OVRR_RAW_TEMPERATURE = _apdm.ERROR_Q_OVRR_RAW_TEMPERATURE
ERROR_Q_OVRR_RAW_PRESSURE = _apdm.ERROR_Q_OVRR_RAW_PRESSURE
ERROR_Q_OVRR_RAW_RANGE = _apdm.ERROR_Q_OVRR_RAW_RANGE
ERROR_Q_OVRR_RAW_HUMIDTY = _apdm.ERROR_Q_OVRR_RAW_HUMIDTY
ERROR_Q_OVRR_RAW = _apdm.ERROR_Q_OVRR_RAW
ERROR_Q_OVRR_SI = _apdm.ERROR_Q_OVRR_SI
ERROR_Q_OVRR_SDO = _apdm.ERROR_Q_OVRR_SDO
ERROR_Q_OVRR_WIR_PKT = _apdm.ERROR_Q_OVRR_WIR_PKT
ERROR_NONFIN_FILT_BMA280 = _apdm.ERROR_NONFIN_FILT_BMA280
ERROR_NONFIN_FILT_BMP280 = _apdm.ERROR_NONFIN_FILT_BMP280
ERROR_NONFIN_FILT_FUSED = _apdm.ERROR_NONFIN_FILT_FUSED
ERROR_NONFIN_FILT_ADXL375 = _apdm.ERROR_NONFIN_FILT_ADXL375
ERROR_NONFIN_FILT_MAX21000 = _apdm.ERROR_NONFIN_FILT_MAX21000
ERROR_NONFIN_FILT_HMC5883L = _apdm.ERROR_NONFIN_FILT_HMC5883L
ERROR_NONFIN_AP_USB = _apdm.ERROR_NONFIN_AP_USB
ERROR_EMMC_WR_PROTECT = _apdm.ERROR_EMMC_WR_PROTECT
ERROR_EMMC_RW_ERR_R = _apdm.ERROR_EMMC_RW_ERR_R
ERROR_EMMC_RW_ERR_W = _apdm.ERROR_EMMC_RW_ERR_W
ERROR_EMMC_RW_ERR_O = _apdm.ERROR_EMMC_RW_ERR_O
ERROR_EMMC_NOT_READY_R = _apdm.ERROR_EMMC_NOT_READY_R
ERROR_EMMC_NOT_READY_W = _apdm.ERROR_EMMC_NOT_READY_W
ERROR_EMMC_NOT_READY_O = _apdm.ERROR_EMMC_NOT_READY_O
ERROR_EMMC_INV_PARAM_R = _apdm.ERROR_EMMC_INV_PARAM_R
ERROR_EMMC_INV_PARAM_W = _apdm.ERROR_EMMC_INV_PARAM_W
ERROR_EMMC_INV_PARAM_I = _apdm.ERROR_EMMC_INV_PARAM_I
ERROR_EMMC_INV_PARAM_O = _apdm.ERROR_EMMC_INV_PARAM_O
ERROR_FF_STRM_WRITE = _apdm.ERROR_FF_STRM_WRITE
ERROR_FF_STRM_READ = _apdm.ERROR_FF_STRM_READ
ERROR_FF_STRM_PUT = _apdm.ERROR_FF_STRM_PUT
ERROR_FF_STRM_GET = _apdm.ERROR_FF_STRM_GET
ERROR_CAN_RDY_RESET = _apdm.ERROR_CAN_RDY_RESET
ERROR_CAN_RDY_TIMEOUT = _apdm.ERROR_CAN_RDY_TIMEOUT
ERROR_CAN_ERR_OTHER = _apdm.ERROR_CAN_ERR_OTHER
ERROR_Q_OVRR_CAN_RX = _apdm.ERROR_Q_OVRR_CAN_RX
ERROR_SYNCBOX_PROTO_ERR = _apdm.ERROR_SYNCBOX_PROTO_ERR
ERROR_FILTER_NSYNC_ZERO = _apdm.ERROR_FILTER_NSYNC_ZERO
ERROR_FILTER_ZERO_WEIGHTS = _apdm.ERROR_FILTER_ZERO_WEIGHTS
ERROR_Q_OVRR_COMPRESSED = _apdm.ERROR_Q_OVRR_COMPRESSED
ERROR_CAN_TX_PENDING = _apdm.ERROR_CAN_TX_PENDING
ERROR_SYNC_NOT_CONNECTED = _apdm.ERROR_SYNC_NOT_CONNECTED
ERROR_FULL_SENSOR_INIT_RETRY = _apdm.ERROR_FULL_SENSOR_INIT_RETRY
ERROR_INTERPOL_SX_ACCEL_MID_G = _apdm.ERROR_INTERPOL_SX_ACCEL_MID_G
ERROR_INTERPOL_SX_ACCEL_HIGH_G = _apdm.ERROR_INTERPOL_SX_ACCEL_HIGH_G
ERROR_INTERPOL_SX_GYRO = _apdm.ERROR_INTERPOL_SX_GYRO
ERROR_INTERPOL_SX_MAG = _apdm.ERROR_INTERPOL_SX_MAG
ERROR_INTERPOL_SX_TEMPERATURE = _apdm.ERROR_INTERPOL_SX_TEMPERATURE
ERROR_Q_OVRR_RAW_SX_ACCEL_MID_G = _apdm.ERROR_Q_OVRR_RAW_SX_ACCEL_MID_G
ERROR_Q_OVRR_RAW_SX_ACCEL_HIGH_G = _apdm.ERROR_Q_OVRR_RAW_SX_ACCEL_HIGH_G
ERROR_Q_OVRR_RAW_SX_GYRO = _apdm.ERROR_Q_OVRR_RAW_SX_GYRO
ERROR_Q_OVRR_RAW_SX_MAG = _apdm.ERROR_Q_OVRR_RAW_SX_MAG
ERROR_Q_OVRR_RAW_SX_TEMPERATURE = _apdm.ERROR_Q_OVRR_RAW_SX_TEMPERATURE
ERROR_FILTER_Z_WINDOW = _apdm.ERROR_FILTER_Z_WINDOW
ERROR_EXTIO_SENSOR_TIME_GAP = _apdm.ERROR_EXTIO_SENSOR_TIME_GAP
ERROR_EXTIO_INTERPOL_BMA = _apdm.ERROR_EXTIO_INTERPOL_BMA
ERROR_EXTIO_INTERPOL_ADXL = _apdm.ERROR_EXTIO_INTERPOL_ADXL
ERROR_EXTIO_INTERPOL_MAX = _apdm.ERROR_EXTIO_INTERPOL_MAX
ERROR_EXTIO_INTERPOL_HMC = _apdm.ERROR_EXTIO_INTERPOL_HMC
ERROR_BUTTON_1_PRESS = _apdm.ERROR_BUTTON_1_PRESS
ERROR_BUTTON_2_PRESS = _apdm.ERROR_BUTTON_2_PRESS
ERROR_EMMC_RD_RETRY_SUCCESS = _apdm.ERROR_EMMC_RD_RETRY_SUCCESS
ERROR_EMMC_WR_RETRY_SUCCESS = _apdm.ERROR_EMMC_WR_RETRY_SUCCESS
ERROR_EMMC_DATA_BOUNDRY = _apdm.ERROR_EMMC_DATA_BOUNDRY
ERROR_INV_COMPRESSED_DATA = _apdm.ERROR_INV_COMPRESSED_DATA
ERROR_BATTERY_GENERAL = _apdm.ERROR_BATTERY_GENERAL
ERROR_BQ27_GENERAL = _apdm.ERROR_BQ27_GENERAL
ERROR_EMMC_GENERAL = _apdm.ERROR_EMMC_GENERAL
ERROR_RF_SYS_ERROR_STACK_OVERFLOW = _apdm.ERROR_RF_SYS_ERROR_STACK_OVERFLOW
ERROR_RF_SYS_ERROR_WDT_EVENT = _apdm.ERROR_RF_SYS_ERROR_WDT_EVENT
ERROR_RF_SYS_ERROR_POWER_EVENT = _apdm.ERROR_RF_SYS_ERROR_POWER_EVENT
ERROR_RF_SYS_ERROR_CLOCK_EVENT = _apdm.ERROR_RF_SYS_ERROR_CLOCK_EVENT
ERROR_RF_SYS_ERROR_SOFTDEVICE_EVENT = _apdm.ERROR_RF_SYS_ERROR_SOFTDEVICE_EVENT
ERROR_RF_SYS_ERROR_OVERFLOW_EVENT = _apdm.ERROR_RF_SYS_ERROR_OVERFLOW_EVENT
ERROR_RF_SYS_ERROR_RESET_EVENT = _apdm.ERROR_RF_SYS_ERROR_RESET_EVENT
ERROR_MAX_EVENT_ELEMENT = _apdm.ERROR_MAX_EVENT_ELEMENT
ERROR_STATE_BMA28X = _apdm.ERROR_STATE_BMA28X
ERROR_STATE_BMP280 = _apdm.ERROR_STATE_BMP280
ERROR_STATE_GYRO = _apdm.ERROR_STATE_GYRO
ERROR_STATE_MAG = _apdm.ERROR_STATE_MAG
ERROR_STATE_ADXL375 = _apdm.ERROR_STATE_ADXL375
ERROR_STATE_BQ24158 = _apdm.ERROR_STATE_BQ24158
ERROR_STATE_BQ24158_WDT_RST_FAIL = _apdm.ERROR_STATE_BQ24158_WDT_RST_FAIL
ERROR_STATE_BQ27742 = _apdm.ERROR_STATE_BQ27742
ERROR_STATE_BQ27742_NOT_FLASHED = _apdm.ERROR_STATE_BQ27742_NOT_FLASHED
ERROR_STATE_BQ27742_NOT_CALLIBRATED = _apdm.ERROR_STATE_BQ27742_NOT_CALLIBRATED
ERROR_STATE_BQ27742_RECAL = _apdm.ERROR_STATE_BQ27742_RECAL
ERROR_STATE_BQ27742_IT_DISABLED = _apdm.ERROR_STATE_BQ27742_IT_DISABLED
ERROR_STATE_BQ27742_IT_NOT_LEARN = _apdm.ERROR_STATE_BQ27742_IT_NOT_LEARN
ERROR_STATE_BATTERY_SWELL = _apdm.ERROR_STATE_BATTERY_SWELL
ERROR_STATE_NRF_FAIL = _apdm.ERROR_STATE_NRF_FAIL
ERROR_STATE_NRF_NO_BOOTLOADER = _apdm.ERROR_STATE_NRF_NO_BOOTLOADER
ERROR_STATE_NRF_HARD_FAULT = _apdm.ERROR_STATE_NRF_HARD_FAULT
ERROR_STATE_RF_QUEUE_BACKLOG = _apdm.ERROR_STATE_RF_QUEUE_BACKLOG
ERROR_STATE_RF_PROTO_MISMATCH = _apdm.ERROR_STATE_RF_PROTO_MISMATCH
ERROR_STATE_RF_SYS_ERROR = _apdm.ERROR_STATE_RF_SYS_ERROR
ERROR_STATE_RF_SETUP = _apdm.ERROR_STATE_RF_SETUP
ERROR_STATE_RF_NO_TX_MASK = _apdm.ERROR_STATE_RF_NO_TX_MASK
ERROR_STATE_RF_INVALID_RADIO_MODE = _apdm.ERROR_STATE_RF_INVALID_RADIO_MODE
ERROR_STATE_RF_NO_TARGET_AP_ID = _apdm.ERROR_STATE_RF_NO_TARGET_AP_ID
ERROR_STATE_RF_PKT_TOO_LARGE = _apdm.ERROR_STATE_RF_PKT_TOO_LARGE
ERROR_STATE_I2C2_SYSTEM = _apdm.ERROR_STATE_I2C2_SYSTEM
ERROR_STATE_I2C3_SENSOR = _apdm.ERROR_STATE_I2C3_SENSOR
ERROR_STATE_NO_CAL_DATA = _apdm.ERROR_STATE_NO_CAL_DATA
ERROR_STATE_CAL_DATA_MISMATCH = _apdm.ERROR_STATE_CAL_DATA_MISMATCH
ERROR_STATE_FULL_FILESYSTEM = _apdm.ERROR_STATE_FULL_FILESYSTEM
ERROR_STATE_MSD_DISABLED = _apdm.ERROR_STATE_MSD_DISABLED
ERROR_STATE_EMMC_FAIL = _apdm.ERROR_STATE_EMMC_FAIL
ERROR_STATE_FLUSH_CONFIG_FAIL = _apdm.ERROR_STATE_FLUSH_CONFIG_FAIL
ERROR_STATE_FS_MOUNT_FAIL = _apdm.ERROR_STATE_FS_MOUNT_FAIL
ERROR_STATE_DATA_WRITE_FAIL = _apdm.ERROR_STATE_DATA_WRITE_FAIL
ERROR_STATE_FILE_INIT_FAIL = _apdm.ERROR_STATE_FILE_INIT_FAIL
ERROR_STATE_INI_CONFIG_INVALID = _apdm.ERROR_STATE_INI_CONFIG_INVALID
ERROR_STATE_STK_OVERFLOW = _apdm.ERROR_STATE_STK_OVERFLOW
ERROR_STATE_CONFIG_STRUCTURE_INVALID = _apdm.ERROR_STATE_CONFIG_STRUCTURE_INVALID
ERROR_STATE_SHORTED_PINS = _apdm.ERROR_STATE_SHORTED_PINS
ERROR_STATE_PIN_PWR_DRAW = _apdm.ERROR_STATE_PIN_PWR_DRAW
ERROR_STATE_USB_HW = _apdm.ERROR_STATE_USB_HW
ERROR_STATE_INVALID_CAL_FILE = _apdm.ERROR_STATE_INVALID_CAL_FILE
ERROR_STATE_BQ27742_TEMPERATURE = _apdm.ERROR_STATE_BQ27742_TEMPERATURE
ERROR_STATE_FL_WR_ADDR = _apdm.ERROR_STATE_FL_WR_ADDR
ERROR_STATE_DATA_STRUCTURE = _apdm.ERROR_STATE_DATA_STRUCTURE
ERROR_STATE_INVALID_TIMEZONE = _apdm.ERROR_STATE_INVALID_TIMEZONE
ERROR_STATE_WIRELESS_SKIP_DATA = _apdm.ERROR_STATE_WIRELESS_SKIP_DATA
ERROR_STATE_NOT_MESHED = _apdm.ERROR_STATE_NOT_MESHED
ERROR_STATE_NOT_TXING = _apdm.ERROR_STATE_NOT_TXING
ERROR_STATE_RNG_BUFF_FULL = _apdm.ERROR_STATE_RNG_BUFF_FULL
ERROR_STATE_NEG_SYNC_JUMP = _apdm.ERROR_STATE_NEG_SYNC_JUMP
ERROR_STATE_BATTERY_FAULT = _apdm.ERROR_STATE_BATTERY_FAULT
ERROR_STATE_BATTERY_NOT_CHARGING = _apdm.ERROR_STATE_BATTERY_NOT_CHARGING
ERROR_STATE_AP_NOT_VISIBLE = _apdm.ERROR_STATE_AP_NOT_VISIBLE
ERROR_STATE_RX_FIFO_OFLOW = _apdm.ERROR_STATE_RX_FIFO_OFLOW
ERROR_STATE_RX_UNEXPECTED = _apdm.ERROR_STATE_RX_UNEXPECTED
ERROR_STATE_RANGING_CONFIG = _apdm.ERROR_STATE_RANGING_CONFIG
ERROR_STATE_RANGING_INIT = _apdm.ERROR_STATE_RANGING_INIT
ERROR_STATE_DW_CONF = _apdm.ERROR_STATE_DW_CONF
ERROR_STATE_USART_SPI_INIT = _apdm.ERROR_STATE_USART_SPI_INIT
ERROR_STATE_LOGGING_DISABLED = _apdm.ERROR_STATE_LOGGING_DISABLED
ERROR_STATE_NO_SENSORS_ENABLED = _apdm.ERROR_STATE_NO_SENSORS_ENABLED
ERROR_STATE_BMA28X_ZERO_READINGS = _apdm.ERROR_STATE_BMA28X_ZERO_READINGS
ERROR_STATE_BMP280_ZERO_READINGS = _apdm.ERROR_STATE_BMP280_ZERO_READINGS
ERROR_STATE_ADXL375_ZERO_READINGS = _apdm.ERROR_STATE_ADXL375_ZERO_READINGS
ERROR_STATE_GYRO_ZERO_READINGS = _apdm.ERROR_STATE_GYRO_ZERO_READINGS
ERROR_STATE_MAG_ZERO_READINGS = _apdm.ERROR_STATE_MAG_ZERO_READINGS
ERROR_STATE_BMA28X_FRC_READ = _apdm.ERROR_STATE_BMA28X_FRC_READ
ERROR_STATE_ADXL375_FRC_READ = _apdm.ERROR_STATE_ADXL375_FRC_READ
ERROR_STATE_GYRO_FRC_READ = _apdm.ERROR_STATE_GYRO_FRC_READ
ERROR_STATE_AP_BACKLOGGING = _apdm.ERROR_STATE_AP_BACKLOGGING
ERROR_STATE_FATFS_ERS = _apdm.ERROR_STATE_FATFS_ERS
ERROR_STATE_EMMC_ERS = _apdm.ERROR_STATE_EMMC_ERS
ERROR_STATE_INVALID_CAL_DATA = _apdm.ERROR_STATE_INVALID_CAL_DATA
ERROR_STATE_INVALID_USER_CAL_DATA = _apdm.ERROR_STATE_INVALID_USER_CAL_DATA
ERROR_STATE_FILTER_SAMPLES_ZERO = _apdm.ERROR_STATE_FILTER_SAMPLES_ZERO
ERROR_STATE_FILTER_PARAMS = _apdm.ERROR_STATE_FILTER_PARAMS
ERROR_STATE_FILTER_INTERACTION = _apdm.ERROR_STATE_FILTER_INTERACTION
ERROR_STATE_FILTER_ERS = _apdm.ERROR_STATE_FILTER_ERS
ERROR_STATE_EXTIO_GAP_ERS = _apdm.ERROR_STATE_EXTIO_GAP_ERS
ERROR_STATE_OPAL_TEMPERATURE = _apdm.ERROR_STATE_OPAL_TEMPERATURE
ERROR_STATE_NO_FILT_OUTPUT = _apdm.ERROR_STATE_NO_FILT_OUTPUT
ERROR_STATE_FLASH_SETTINGS = _apdm.ERROR_STATE_FLASH_SETTINGS
ERROR_STATE_DIRTY_FILESYSTEM = _apdm.ERROR_STATE_DIRTY_FILESYSTEM
ERROR_STATE_CLOCK_NOT_SET = _apdm.ERROR_STATE_CLOCK_NOT_SET
ERROR_STATE_SSOX_HEARTBEAT = _apdm.ERROR_STATE_SSOX_HEARTBEAT
ERROR_STATE_PIPELINE_INIT_FAIL = _apdm.ERROR_STATE_PIPELINE_INIT_FAIL
ERROR_STATE_BQ27742_CAPACITY = _apdm.ERROR_STATE_BQ27742_CAPACITY
ERROR_STATE_UNSUPPORTED_PCB = _apdm.ERROR_STATE_UNSUPPORTED_PCB
ERROR_STATE_BQ27742_NO_COMM = _apdm.ERROR_STATE_BQ27742_NO_COMM
ERROR_STATE_USER_CAL_DATA_MISMATCH = _apdm.ERROR_STATE_USER_CAL_DATA_MISMATCH
ERROR_STATE_BATTERY_SOH_LOW = _apdm.ERROR_STATE_BATTERY_SOH_LOW
ERROR_STATE_LAST = _apdm.ERROR_STATE_LAST
MONITOR_ERROR_CLASSIFICATION_NONE = _apdm.MONITOR_ERROR_CLASSIFICATION_NONE
MONITOR_ERROR_CLASSIFICATION_HARDWARE = _apdm.MONITOR_ERROR_CLASSIFICATION_HARDWARE
MONITOR_ERROR_CLASSIFICATION_FIRMWARE = _apdm.MONITOR_ERROR_CLASSIFICATION_FIRMWARE
SSOX_PACKED_STATUS_HEARTBEAT = _apdm.SSOX_PACKED_STATUS_HEARTBEAT
SSOX_PACKED_STATUS_ACCEL_HIGH_INIT = _apdm.SSOX_PACKED_STATUS_ACCEL_HIGH_INIT
SSOX_PACKED_STATUS_ACCEL_MID_INIT = _apdm.SSOX_PACKED_STATUS_ACCEL_MID_INIT
SSOX_PACKED_STATUS_GYRO_INIT = _apdm.SSOX_PACKED_STATUS_GYRO_INIT
SSOX_PACKED_STATUS_MAG_INIT = _apdm.SSOX_PACKED_STATUS_MAG_INIT
SSOX_PACKED_STATUS_CAN_INIT = _apdm.SSOX_PACKED_STATUS_CAN_INIT
SSOX_PACKED_STATUS_I2C_ERROR = _apdm.SSOX_PACKED_STATUS_I2C_ERROR
SSOX_PACKED_STATUS_SPI1_ERROR = _apdm.SSOX_PACKED_STATUS_SPI1_ERROR
SSOX_PACKED_STATUS_SPI2_ERROR = _apdm.SSOX_PACKED_STATUS_SPI2_ERROR
SSOX_PACKED_STATUS_ACCEL_HIGH_ERROR = _apdm.SSOX_PACKED_STATUS_ACCEL_HIGH_ERROR
SSOX_PACKED_STATUS_ACCEL_MID_ERROR = _apdm.SSOX_PACKED_STATUS_ACCEL_MID_ERROR
SSOX_PACKED_STATUS_GYRO_ERROR = _apdm.SSOX_PACKED_STATUS_GYRO_ERROR
SSOX_PACKED_STATUS_MAG_ERROR = _apdm.SSOX_PACKED_STATUS_MAG_ERROR
SSOX_PACKED_STATUS_CAN_ERROR = _apdm.SSOX_PACKED_STATUS_CAN_ERROR
USB_PAYLOAD_TYPE_UNUSED = _apdm.USB_PAYLOAD_TYPE_UNUSED
USB_PAYLOAD_TYPE_SENSOR_SAMPLE = _apdm.USB_PAYLOAD_TYPE_SENSOR_SAMPLE
USB_PAYLOAD_TYPE_AP_STATS = _apdm.USB_PAYLOAD_TYPE_AP_STATS
USB_PAYLOAD_TYPE_GENERIC_WIRELESS_PACKET = _apdm.USB_PAYLOAD_TYPE_GENERIC_WIRELESS_PACKET
USB_PAYLOAD_TYPE_AP_EVENT_COUNT = _apdm.USB_PAYLOAD_TYPE_AP_EVENT_COUNT
USB_PAYLOAD_TYPE_AP_ERROR_STATE = _apdm.USB_PAYLOAD_TYPE_AP_ERROR_STATE
USB_PAYLOAD_TYPE_SYNC_BOX_DATA = _apdm.USB_PAYLOAD_TYPE_SYNC_BOX_DATA
USB_PAYLOAD_TYPE_COMPRESSED_SENSOR_SAMPLE = _apdm.USB_PAYLOAD_TYPE_COMPRESSED_SENSOR_SAMPLE
USB_PAYLOAD_TYPE_AP_SENSOR_STATUS_DATA = _apdm.USB_PAYLOAD_TYPE_AP_SENSOR_STATUS_DATA
USB_PAYLOAD_TYPE_LAST_ELEMENT = _apdm.USB_PAYLOAD_TYPE_LAST_ELEMENT
SENSOR_TYPE_NONE = _apdm.SENSOR_TYPE_NONE
SENSOR_TYPE_BMA28X = _apdm.SENSOR_TYPE_BMA28X
SENSOR_TYPE_ADXL375 = _apdm.SENSOR_TYPE_ADXL375
SENSOR_TYPE_GYRO = _apdm.SENSOR_TYPE_GYRO
SENSOR_TYPE_MAG5883 = _apdm.SENSOR_TYPE_MAG5883
SENSOR_TYPE_BMP280 = _apdm.SENSOR_TYPE_BMP280
SENSOR_TYPE_DW1000 = _apdm.SENSOR_TYPE_DW1000
SENSOR_TYPE_END_ELEMENT = _apdm.SENSOR_TYPE_END_ELEMENT
QUEUE_TYPE_ACCEL_MID_G = _apdm.QUEUE_TYPE_ACCEL_MID_G
QUEUE_TYPE_ACCEL_HIGH_G = _apdm.QUEUE_TYPE_ACCEL_HIGH_G
QUEUE_TYPE_GYRO = _apdm.QUEUE_TYPE_GYRO
QUEUE_TYPE_MAG = _apdm.QUEUE_TYPE_MAG
QUEUE_TYPE_TEMPERATURE = _apdm.QUEUE_TYPE_TEMPERATURE
QUEUE_TYPE_PRESSURE = _apdm.QUEUE_TYPE_PRESSURE
QUEUE_TYPE_COUNT_END_ELEMENT = _apdm.QUEUE_TYPE_COUNT_END_ELEMENT
SD_STRUCTURE_TYPE_PADDING = _apdm.SD_STRUCTURE_TYPE_PADDING
SD_STRUCTURE_TYPE_FILE_HEADER = _apdm.SD_STRUCTURE_TYPE_FILE_HEADER
SD_STRUCTURE_TYPE_DATA = _apdm.SD_STRUCTURE_TYPE_DATA
SD_STRUCTURE_TYPE_ERROR_STATE = _apdm.SD_STRUCTURE_TYPE_ERROR_STATE
SD_STRUCTURE_TYPE_ERROR_EVENT = _apdm.SD_STRUCTURE_TYPE_ERROR_EVENT
SD_STRUCTURE_TYPE_CALIBRATION_DATA = _apdm.SD_STRUCTURE_TYPE_CALIBRATION_DATA
SD_STRUCTURE_TYPE_CONFIG_VALUE = _apdm.SD_STRUCTURE_TYPE_CONFIG_VALUE
SD_STRUCTURE_TYPE_DATA_RAW = _apdm.SD_STRUCTURE_TYPE_DATA_RAW
SD_STRUCTURE_TYPE_DATA_SI = _apdm.SD_STRUCTURE_TYPE_DATA_SI
SD_STRUCTURE_TYPE_STRING = _apdm.SD_STRUCTURE_TYPE_STRING
SD_STRUCTURE_TYPE_METRICS = _apdm.SD_STRUCTURE_TYPE_METRICS
SD_STRUCTURE_TYPE_BUTTON_PRESS = _apdm.SD_STRUCTURE_TYPE_BUTTON_PRESS
SD_STRUCTURE_TYPE_DATA_RANGE = _apdm.SD_STRUCTURE_TYPE_DATA_RANGE
SD_STRUCTURE_TYPE_DATA_COMPRESSED = _apdm.SD_STRUCTURE_TYPE_DATA_COMPRESSED
SD_STRUCTURE_TYPE_LAST_BUTTON_PRESS_OFFSET = _apdm.SD_STRUCTURE_TYPE_LAST_BUTTON_PRESS_OFFSET
SD_STRUCTURE_TYPE_LAST_ELEMENT = _apdm.SD_STRUCTURE_TYPE_LAST_ELEMENT
SENSOR_READING_TYPE_NONE = _apdm.SENSOR_READING_TYPE_NONE
SENSOR_READING_TYPE_BMA28X_ACCEL = _apdm.SENSOR_READING_TYPE_BMA28X_ACCEL
SENSOR_READING_TYPE_BMA28X_TEMPERATURE = _apdm.SENSOR_READING_TYPE_BMA28X_TEMPERATURE
SENSOR_READING_TYPE_ADXL375_ACCEL = _apdm.SENSOR_READING_TYPE_ADXL375_ACCEL
SENSOR_READING_TYPE_MAX21000_GYRO = _apdm.SENSOR_READING_TYPE_MAX21000_GYRO
SENSOR_READING_TYPE_MAG5883_MAG = _apdm.SENSOR_READING_TYPE_MAG5883_MAG
SENSOR_READING_TYPE_BMP280_PRESSURE = _apdm.SENSOR_READING_TYPE_BMP280_PRESSURE
SENSOR_READING_TYPE_BMP280_TEMPERATURE = _apdm.SENSOR_READING_TYPE_BMP280_TEMPERATURE
SENSOR_READING_TYPE_FUSED_ACCEL = _apdm.SENSOR_READING_TYPE_FUSED_ACCEL
SENSOR_READING_TYPE_DW1000_RANGE = _apdm.SENSOR_READING_TYPE_DW1000_RANGE
SENSOR_READING_TYPE_LAST_ELEMENT = _apdm.SENSOR_READING_TYPE_LAST_ELEMENT
SI_QUEUE_TYPE_ACCEL_MID_G = _apdm.SI_QUEUE_TYPE_ACCEL_MID_G
SI_QUEUE_TYPE_ACCEL_HIGH_G = _apdm.SI_QUEUE_TYPE_ACCEL_HIGH_G
SI_QUEUE_TYPE_GYRO = _apdm.SI_QUEUE_TYPE_GYRO
SI_QUEUE_TYPE_MAG = _apdm.SI_QUEUE_TYPE_MAG
SI_QUEUE_TYPE_TEMPERATURE = _apdm.SI_QUEUE_TYPE_TEMPERATURE
SI_QUEUE_TYPE_PRESSURE = _apdm.SI_QUEUE_TYPE_PRESSURE
SI_QUEUE_TYPE_ACCEL_FUSED = _apdm.SI_QUEUE_TYPE_ACCEL_FUSED
SI_QUEUE_TYPE_LAST_ELEMENT = _apdm.SI_QUEUE_TYPE_LAST_ELEMENT
OUTPUT_CLASS_ACCEL = _apdm.OUTPUT_CLASS_ACCEL
OUTPUT_CLASS_ACCEL_MID = _apdm.OUTPUT_CLASS_ACCEL_MID
OUTPUT_CLASS_ACCEL_HIGH = _apdm.OUTPUT_CLASS_ACCEL_HIGH
OUTPUT_CLASS_GYRO = _apdm.OUTPUT_CLASS_GYRO
OUTPUT_CLASS_MAG = _apdm.OUTPUT_CLASS_MAG
OUTPUT_CLASS_TEMPERATURE = _apdm.OUTPUT_CLASS_TEMPERATURE
OUTPUT_CLASS_PRESSURE = _apdm.OUTPUT_CLASS_PRESSURE
OUTPUT_CLASS_RANGE = _apdm.OUTPUT_CLASS_RANGE
OUTPUT_CLASS_LAST_ELEMENT2 = _apdm.OUTPUT_CLASS_LAST_ELEMENT2
SD_METRIC_WIRELESS = _apdm.SD_METRIC_WIRELESS
SD_METRIC_WIRELESS_MESH = _apdm.SD_METRIC_WIRELESS_MESH
SD_METRIC_BATTERY = _apdm.SD_METRIC_BATTERY
SD_STRING_VALUE_CONFIG_V2_STRING = _apdm.SD_STRING_VALUE_CONFIG_V2_STRING
SD_STRING_VALUE_CASE_ID = _apdm.SD_STRING_VALUE_CASE_ID
SD_STRING_VALUE_FIRMWARE_VERSION = _apdm.SD_STRING_VALUE_FIRMWARE_VERSION
SD_STRING_VALUE_SENSOR_ID = _apdm.SD_STRING_VALUE_SENSOR_ID
SD_STRING_VALUE_HARDWARE_ID = _apdm.SD_STRING_VALUE_HARDWARE_ID
WIRELESS_PACKET_PAYLOAD_TYPE_NONE = _apdm.WIRELESS_PACKET_PAYLOAD_TYPE_NONE
WIRELESS_PACKET_PAYLOAD_TYPE_DATA = _apdm.WIRELESS_PACKET_PAYLOAD_TYPE_DATA
WIRELESS_PACKET_PAYLOAD_TYPE_ERROR_COUNTS = _apdm.WIRELESS_PACKET_PAYLOAD_TYPE_ERROR_COUNTS
WIRELESS_PACKET_PAYLOAD_TYPE_ERROR_STATES = _apdm.WIRELESS_PACKET_PAYLOAD_TYPE_ERROR_STATES
WIRELESS_PACKET_PAYLOAD_TYPE_STATISTICS = _apdm.WIRELESS_PACKET_PAYLOAD_TYPE_STATISTICS
WIRELESS_PACKET_PAYLOAD_CONFIG_SET = _apdm.WIRELESS_PACKET_PAYLOAD_CONFIG_SET
WIRELESS_PACKET_PAYLOAD_COMMAND_ACTION = _apdm.WIRELESS_PACKET_PAYLOAD_COMMAND_ACTION
WIRELESS_PACKET_PAYLOAD_CONFIG_VALUE = _apdm.WIRELESS_PACKET_PAYLOAD_CONFIG_VALUE
WIRELESS_PACKET_PAYLOAD_LABEL_STRING = _apdm.WIRELESS_PACKET_PAYLOAD_LABEL_STRING
WIRELESS_PACKET_PAYLOAD_RANGES = _apdm.WIRELESS_PACKET_PAYLOAD_RANGES
WIRELESS_PACKET_PAYLOAD_TYPE_DELTA_ENCODED_DATA = _apdm.WIRELESS_PACKET_PAYLOAD_TYPE_DELTA_ENCODED_DATA
WIRELESS_PACKET_PAYLOAD_BUTTON_EVENT = _apdm.WIRELESS_PACKET_PAYLOAD_BUTTON_EVENT
WIRELESS_PACKET_PAYLOAD_TYPE_LAST_ELEMENT = _apdm.WIRELESS_PACKET_PAYLOAD_TYPE_LAST_ELEMENT
WIRELESS_COMMAND_ACTION_NONE = _apdm.WIRELESS_COMMAND_ACTION_NONE
WIRELESS_COMMAND_ACTION_APPLY_NEW_CONFIG = _apdm.WIRELESS_COMMAND_ACTION_APPLY_NEW_CONFIG
WIRELESS_COMMAND_ACTION_SET_MIN_SYNC_VALUE = _apdm.WIRELESS_COMMAND_ACTION_SET_MIN_SYNC_VALUE
WIRELESS_MESH_DATA_TYPE_NONE = _apdm.WIRELESS_MESH_DATA_TYPE_NONE
WIRELESS_MESH_DATA_TYPE_MINIMUM_SYNC = _apdm.WIRELESS_MESH_DATA_TYPE_MINIMUM_SYNC
WIRELESS_MESH_DATA_TYPE_MAX_LATENCY_MS = _apdm.WIRELESS_MESH_DATA_TYPE_MAX_LATENCY_MS
WIRELESS_MESH_DATA_TYPE_POWER_OFF_OPAL = _apdm.WIRELESS_MESH_DATA_TYPE_POWER_OFF_OPAL
WIRELESS_MESH_DATA_TYPE_EPOCH_SECOND = _apdm.WIRELESS_MESH_DATA_TYPE_EPOCH_SECOND
CONFIG_PACKED_8BIT_V2_ENABLE_ACCEL = _apdm.CONFIG_PACKED_8BIT_V2_ENABLE_ACCEL
CONFIG_PACKED_8BIT_V2_ENABLE_GYRO = _apdm.CONFIG_PACKED_8BIT_V2_ENABLE_GYRO
CONFIG_PACKED_8BIT_V2_ENABLE_MAG = _apdm.CONFIG_PACKED_8BIT_V2_ENABLE_MAG
CONFIG_PACKED_8BIT_V2_ENABLE_PRESSURE = _apdm.CONFIG_PACKED_8BIT_V2_ENABLE_PRESSURE
CONFIG_PACKED_8BIT_V2_FILE_FORMAT = _apdm.CONFIG_PACKED_8BIT_V2_FILE_FORMAT
CONFIG_PACKED_8BIT_V2_ENABLE_SI_SD_DATA_LOGGING = _apdm.CONFIG_PACKED_8BIT_V2_ENABLE_SI_SD_DATA_LOGGING
CONFIG_PACKED_8BIT_V2_ENABLE_RAW_SD_DATA_LOGGING = _apdm.CONFIG_PACKED_8BIT_V2_ENABLE_RAW_SD_DATA_LOGGING
CONFIG_PACKED_8BIT_V2_WIRELESS_PROTOCOL = _apdm.CONFIG_PACKED_8BIT_V2_WIRELESS_PROTOCOL
CONFIG_PACKED_8BIT_V2_WIRELESS_CHANNEL = _apdm.CONFIG_PACKED_8BIT_V2_WIRELESS_CHANNEL
CONFIG_PACKED_8BIT_V2_WIRELESS_TX_POWER = _apdm.CONFIG_PACKED_8BIT_V2_WIRELESS_TX_POWER
CONFIG_PACKED_8BIT_V2_FILTER_MODE = _apdm.CONFIG_PACKED_8BIT_V2_FILTER_MODE
CONFIG_PACKED_8BIT_V2_SD_CARD_BUFFERING = _apdm.CONFIG_PACKED_8BIT_V2_SD_CARD_BUFFERING
CONFIG_PACKED_8BIT_V2_BATTERY_CUTOFF = _apdm.CONFIG_PACKED_8BIT_V2_BATTERY_CUTOFF
CONFIG_PACKED_8BIT_V2_LED_MODE = _apdm.CONFIG_PACKED_8BIT_V2_LED_MODE
CONFIG_PACKED_8BIT_V2_BUTTON_MODE = _apdm.CONFIG_PACKED_8BIT_V2_BUTTON_MODE
CONFIG_PACKED_8BIT_V2_EXTERNAL_COMMUNICATIONS_MODE = _apdm.CONFIG_PACKED_8BIT_V2_EXTERNAL_COMMUNICATIONS_MODE
CONFIG_PACKED_8BIT_V2_LCD_DISPLAY_ENABLE = _apdm.CONFIG_PACKED_8BIT_V2_LCD_DISPLAY_ENABLE
CONFIG_PACKED_8BIT_V2_LCD_DISPLAY_ANGLE = _apdm.CONFIG_PACKED_8BIT_V2_LCD_DISPLAY_ANGLE
CONFIG_PACKED_8BIT_V2_UNUSED = _apdm.CONFIG_PACKED_8BIT_V2_UNUSED
CONFIG_PACKED_8BIT_V2_DEBUG_LCD_ENABLE = _apdm.CONFIG_PACKED_8BIT_V2_DEBUG_LCD_ENABLE
CONFIG_PACKED_8BIT_V2_ENABLE_USB_CDC_ACM_VCOM = _apdm.CONFIG_PACKED_8BIT_V2_ENABLE_USB_CDC_ACM_VCOM
CONFIG_PACKED_8BIT_V2_ENABLE_AP_DATA_STREAMING = _apdm.CONFIG_PACKED_8BIT_V2_ENABLE_AP_DATA_STREAMING
CONFIG_PACKED_8BIT_V2_UNUSED2 = _apdm.CONFIG_PACKED_8BIT_V2_UNUSED2
CONFIG_PACKED_8BIT_V2_UNUSED3 = _apdm.CONFIG_PACKED_8BIT_V2_UNUSED3
CONFIG_PACKED_8BIT_V2_UNUSED4 = _apdm.CONFIG_PACKED_8BIT_V2_UNUSED4
CONFIG_PACKED_8BIT_V2_DISABLE_CALIBRATION_DATA = _apdm.CONFIG_PACKED_8BIT_V2_DISABLE_CALIBRATION_DATA
CONFIG_PACKED_8BIT_V2_LOGGING_BEHAVIOR = _apdm.CONFIG_PACKED_8BIT_V2_LOGGING_BEHAVIOR
CONFIG_PACKED_8BIT_V2_ENABLE_RANGING = _apdm.CONFIG_PACKED_8BIT_V2_ENABLE_RANGING
CONFIG_PACKED_8BIT_V2_SENSOR_INDEX = _apdm.CONFIG_PACKED_8BIT_V2_SENSOR_INDEX
CONFIG_PACKED_8BIT_V2_SENSOR_COUNT = _apdm.CONFIG_PACKED_8BIT_V2_SENSOR_COUNT
CONFIG_PACKED_8BIT_V2_MOUNT_MODE = _apdm.CONFIG_PACKED_8BIT_V2_MOUNT_MODE
CONFIG_PACKED_8BIT_V2_WIRELESS_MESH_CHANNEL = _apdm.CONFIG_PACKED_8BIT_V2_WIRELESS_MESH_CHANNEL
CONFIG_PACKED_8BIT_V2_WIRELESS_DOCKING_BEHAVIOR = _apdm.CONFIG_PACKED_8BIT_V2_WIRELESS_DOCKING_BEHAVIOR
CONFIG_PACKED_8BIT_V2_STANDBY_MODE = _apdm.CONFIG_PACKED_8BIT_V2_STANDBY_MODE
CONFIG_PACKED_8BIT_V2_VALUE_LAST_ELEMENT = _apdm.CONFIG_PACKED_8BIT_V2_VALUE_LAST_ELEMENT
CONFIG_PACKED_8BIT_V2_LAST_8BIT_VALUE = _apdm.CONFIG_PACKED_8BIT_V2_LAST_8BIT_VALUE
CONFIG_PACKED_16BIT_V2_OUTPUT_RATE = _apdm.CONFIG_PACKED_16BIT_V2_OUTPUT_RATE
CONFIG_PACKED_16BIT_V2_OUTPUT_RATE_WIRELESS_DIVIDER = _apdm.CONFIG_PACKED_16BIT_V2_OUTPUT_RATE_WIRELESS_DIVIDER
CONFIG_PACKED_16BIT_V2_RAW_RATE_OVERRIDE_ACCEL_MID = _apdm.CONFIG_PACKED_16BIT_V2_RAW_RATE_OVERRIDE_ACCEL_MID
CONFIG_PACKED_16BIT_V2_RAW_RATE_OVERRIDE_ACCEL_HIGH = _apdm.CONFIG_PACKED_16BIT_V2_RAW_RATE_OVERRIDE_ACCEL_HIGH
CONFIG_PACKED_16BIT_V2_RAW_RATE_OVERRIDE_GYRO = _apdm.CONFIG_PACKED_16BIT_V2_RAW_RATE_OVERRIDE_GYRO
CONFIG_PACKED_16BIT_V2_RAW_RATE_OVERRIDE_MAG = _apdm.CONFIG_PACKED_16BIT_V2_RAW_RATE_OVERRIDE_MAG
CONFIG_PACKED_16BIT_V2_RANGE_OVERRIDE_ACCEL_MID = _apdm.CONFIG_PACKED_16BIT_V2_RANGE_OVERRIDE_ACCEL_MID
CONFIG_PACKED_16BIT_V2_RANGE_OVERRIDE_GYRO = _apdm.CONFIG_PACKED_16BIT_V2_RANGE_OVERRIDE_GYRO
CONFIG_PACKED_16BIT_V2_RANGE_OVERRIDE_MAG = _apdm.CONFIG_PACKED_16BIT_V2_RANGE_OVERRIDE_MAG
CONFIG_PACKED_16BIT_V2_LAST_16BIT_VALUE = _apdm.CONFIG_PACKED_16BIT_V2_LAST_16BIT_VALUE
CONFIG_PACKED_32BIT_V2_WIRELESS_LATENCY_MS = _apdm.CONFIG_PACKED_32BIT_V2_WIRELESS_LATENCY_MS
CONFIG_PACKED_32BIT_V2_WIRELESS_GROUP_CODE = _apdm.CONFIG_PACKED_32BIT_V2_WIRELESS_GROUP_CODE
CONFIG_PACKED_32BIT_V2_WIRELESS_TX_MASK = _apdm.CONFIG_PACKED_32BIT_V2_WIRELESS_TX_MASK
CONFIG_PACKED_32BIT_V2_WIRELESS_TARGET_AP_ID = _apdm.CONFIG_PACKED_32BIT_V2_WIRELESS_TARGET_AP_ID
CONFIG_PACKED_32BIT_V2_WIRELESS_DEBUG_CONTROL = _apdm.CONFIG_PACKED_32BIT_V2_WIRELESS_DEBUG_CONTROL
CONFIG_PACKED_32BIT_V2_FILTER_MAX_LATENCY_MS = _apdm.CONFIG_PACKED_32BIT_V2_FILTER_MAX_LATENCY_MS
CONFIG_PACKED_32BIT_V2_LAST_32BIT_VALUE = _apdm.CONFIG_PACKED_32BIT_V2_LAST_32BIT_VALUE
MONITOR_PRODUCT_OPAL = _apdm.MONITOR_PRODUCT_OPAL
MONITOR_PRODUCT_AP = _apdm.MONITOR_PRODUCT_AP
MONITOR_PRODUCT_LAST_ELEMENT = _apdm.MONITOR_PRODUCT_LAST_ELEMENT
ERROR_LEVEL_MINIMUM = _apdm.ERROR_LEVEL_MINIMUM
ERROR_LEVEL_WARNING = _apdm.ERROR_LEVEL_WARNING
ERROR_LEVEL_CRITICAL = _apdm.ERROR_LEVEL_CRITICAL

def error_log_get_error_level_from_state(*args):
  """error_log_get_error_level_from_state(s) -> error_level_t"""
  return _apdm.error_log_get_error_level_from_state(*args)

def config_validate_data():
  """config_validate_data() -> bool"""
  return _apdm.config_validate_data()

def monitor_state_t_to_monitor_error_classification_t(*args):
  """monitor_state_t_to_monitor_error_classification_t(v) -> monitor_error_classification_t"""
  return _apdm.monitor_state_t_to_monitor_error_classification_t(*args)

def monitor_events_t_to_monitor_error_classification_t(*args):
  """monitor_events_t_to_monitor_error_classification_t(v) -> monitor_error_classification_t"""
  return _apdm.monitor_events_t_to_monitor_error_classification_t(*args)

def error_level_t_to_str(*args):
  """error_level_t_to_str(e) -> char const *"""
  return _apdm.error_level_t_to_str(*args)

def apdm_data_payload_type_t_to_str(*args):
  """apdm_data_payload_type_t_to_str(v) -> char const *"""
  return _apdm.apdm_data_payload_type_t_to_str(*args)

def apdm_device_data_t_to_str(*args):
  """apdm_device_data_t_to_str(v) -> char const *"""
  return _apdm.apdm_device_data_t_to_str(*args)

def apdm_device_statistic_t_to_str(*args):
  """apdm_device_statistic_t_to_str(v) -> char const *"""
  return _apdm.apdm_device_statistic_t_to_str(*args)

def apdm_device_statistic_t_to_str_long(*args):
  """apdm_device_statistic_t_to_str_long(v) -> char const *"""
  return _apdm.apdm_device_statistic_t_to_str_long(*args)

def apdm_sd_structure_type_t_to_str(*args):
  """apdm_sd_structure_type_t_to_str(v) -> char const *"""
  return _apdm.apdm_sd_structure_type_t_to_str(*args)

def apdm_si_output_sensor_class_t_to_user_str(*args):
  """apdm_si_output_sensor_class_t_to_user_str(v) -> char const *"""
  return _apdm.apdm_si_output_sensor_class_t_to_user_str(*args)

def apdm_si_output_sensor_class_t_to_user_str_short(*args):
  """apdm_si_output_sensor_class_t_to_user_str_short(v) -> char const *"""
  return _apdm.apdm_si_output_sensor_class_t_to_user_str_short(*args)

def apdm_si_queue_type_t_to_str(*args):
  """apdm_si_queue_type_t_to_str(v) -> char const *"""
  return _apdm.apdm_si_queue_type_t_to_str(*args)

def apdm_queue_type_t_to_str(*args):
  """apdm_queue_type_t_to_str(v) -> char const *"""
  return _apdm.apdm_queue_type_t_to_str(*args)

def apdm_queue_type_t_to_str_short(*args):
  """apdm_queue_type_t_to_str_short(v) -> char const *"""
  return _apdm.apdm_queue_type_t_to_str_short(*args)

def button_event_t_to_str(*args):
  """button_event_t_to_str(v) -> char const *"""
  return _apdm.button_event_t_to_str(*args)

def calibration_type_t_to_str(*args):
  """calibration_type_t_to_str(v) -> char const *"""
  return _apdm.calibration_type_t_to_str(*args)

def can_cmd_types_t_to_str(*args):
  """can_cmd_types_t_to_str(v) -> char const *"""
  return _apdm.can_cmd_types_t_to_str(*args)

def can_edge_t_to_str(*args):
  """can_edge_t_to_str(arg) -> char const *"""
  return _apdm.can_edge_t_to_str(*args)

def can_packet_status_t_to_str(*args):
  """can_packet_status_t_to_str(arg) -> char const *"""
  return _apdm.can_packet_status_t_to_str(*args)

def can_set_cmd_t_to_str(*args):
  """can_set_cmd_t_to_str(arg) -> char const *"""
  return _apdm.can_set_cmd_t_to_str(*args)

def can_sync_box_pin_t_to_str(*args):
  """can_sync_box_pin_t_to_str(v) -> char const *"""
  return _apdm.can_sync_box_pin_t_to_str(*args)

def can_query_cmd_t_to_str(*args):
  """can_query_cmd_t_to_str(arg) -> char const *"""
  return _apdm.can_query_cmd_t_to_str(*args)

def config_v2_string_t_to_str(*args):
  """config_v2_string_t_to_str(v) -> char const *"""
  return _apdm.config_v2_string_t_to_str(*args)

def config_v2_string_t_to_str_hint(*args):
  """config_v2_string_t_to_str_hint(v) -> char const *"""
  return _apdm.config_v2_string_t_to_str_hint(*args)

def config_value_t_to_str(*args):
  """config_value_t_to_str(v) -> char const *"""
  return _apdm.config_value_t_to_str(*args)

def config_value_t_to_str_short(*args):
  """config_value_t_to_str_short(v) -> char const *"""
  return _apdm.config_value_t_to_str_short(*args)

def config_value_t_to_str_hint(*args):
  """config_value_t_to_str_hint(v) -> char const *"""
  return _apdm.config_value_t_to_str_hint(*args)

def external_sensor_type_t_to_str(*args):
  """external_sensor_type_t_to_str(v) -> char const *"""
  return _apdm.external_sensor_type_t_to_str(*args)

def hardware_id_t_to_str(*args):
  """hardware_id_t_to_str(rev) -> char const *"""
  return _apdm.hardware_id_t_to_str(*args)

def monitor_error_classification_t_to_str(*args):
  """monitor_error_classification_t_to_str(v) -> char const *"""
  return _apdm.monitor_error_classification_t_to_str(*args)

def monitor_events_t_to_user_str(*args):
  """monitor_events_t_to_user_str(event) -> char const *"""
  return _apdm.monitor_events_t_to_user_str(*args)

def monitor_product_t_to_user_str(*args):
  """monitor_product_t_to_user_str(product) -> char const *"""
  return _apdm.monitor_product_t_to_user_str(*args)

def monitor_product_t_to_user_str_short(*args):
  """monitor_product_t_to_user_str_short(product) -> char const *"""
  return _apdm.monitor_product_t_to_user_str_short(*args)

def monitor_state_t_error_description(*args):
  """monitor_state_t_error_description(v) -> char const *"""
  return _apdm.monitor_state_t_error_description(*args)

def monitor_state_t_error_description_sort(*args):
  """monitor_state_t_error_description_sort(v) -> char const *"""
  return _apdm.monitor_state_t_error_description_sort(*args)

def monitor_state_t_to_user_str(*args):
  """monitor_state_t_to_user_str(es) -> char const *"""
  return _apdm.monitor_state_t_to_user_str(*args)

def sd_card_metric_type_t_to_str(*args):
  """sd_card_metric_type_t_to_str(v) -> char const *"""
  return _apdm.sd_card_metric_type_t_to_str(*args)

def sensor_reading_type_t_to_str(*args):
  """sensor_reading_type_t_to_str(v) -> char const *"""
  return _apdm.sensor_reading_type_t_to_str(*args)

def sensor_reading_type_t_to_str_short(*args):
  """sensor_reading_type_t_to_str_short(v) -> char const *"""
  return _apdm.sensor_reading_type_t_to_str_short(*args)

def sensor_type_t_to_user_str(*args):
  """sensor_type_t_to_user_str(sensor_type) -> char const *"""
  return _apdm.sensor_type_t_to_user_str(*args)

def sensor_type_t_to_str(*args):
  """sensor_type_t_to_str(sensor_type) -> char const *"""
  return _apdm.sensor_type_t_to_str(*args)

def wireless_mesh_data_type_t_to_str(*args):
  """wireless_mesh_data_type_t_to_str(v) -> char const *"""
  return _apdm.wireless_mesh_data_type_t_to_str(*args)

def wireless_v2_radio_mode_t_to_str(*args):
  """wireless_v2_radio_mode_t_to_str(mode) -> char const *"""
  return _apdm.wireless_v2_radio_mode_t_to_str(*args)

def wireless_v2_radio_mode_t_to_str_short(*args):
  """wireless_v2_radio_mode_t_to_str_short(mode) -> char const *"""
  return _apdm.wireless_v2_radio_mode_t_to_str_short(*args)

def wireless_v2_radio_mode_t_to_str_short_user(*args):
  """wireless_v2_radio_mode_t_to_str_short_user(mode) -> char const *"""
  return _apdm.wireless_v2_radio_mode_t_to_str_short_user(*args)

def str_to_device_data_t(*args):
  """str_to_device_data_t(str) -> apdm_device_data_t"""
  return _apdm.str_to_device_data_t(*args)

def str_to_apdm_device_statistic_t(*args):
  """str_to_apdm_device_statistic_t(str) -> apdm_device_statistic_t"""
  return _apdm.str_to_apdm_device_statistic_t(*args)

def str_to_can_query_cmd_t(*args):
  """str_to_can_query_cmd_t(buff) -> can_query_cmd_t"""
  return _apdm.str_to_can_query_cmd_t(*args)

def str_to_can_set_cmd_t(*args):
  """str_to_can_set_cmd_t(buff) -> can_set_cmd_t"""
  return _apdm.str_to_can_set_cmd_t(*args)

def str_to_config_value_t(*args):
  """str_to_config_value_t(str) -> config_value_t"""
  return _apdm.str_to_config_value_t(*args)

def str_to_config_v2_string_t(*args):
  """str_to_config_v2_string_t(str) -> config_v2_string_t"""
  return _apdm.str_to_config_v2_string_t(*args)
APDM_USB_VID = _apdm.APDM_USB_VID
APDM_ACCESS_POINT_PID = _apdm.APDM_ACCESS_POINT_PID
APDM_DOCKING_STATION_PID = _apdm.APDM_DOCKING_STATION_PID
APDM_ACCESS_POINT_ACM_PID = _apdm.APDM_ACCESS_POINT_ACM_PID
APDM_AP_VENDOR_REQUEST_NOP = _apdm.APDM_AP_VENDOR_REQUEST_NOP
APDM_AP_VENDOR_REQUEST_SET_SINGLE_AP_MODE = _apdm.APDM_AP_VENDOR_REQUEST_SET_SINGLE_AP_MODE
APDM_AP_VENDOR_REQUEST_SET_WARNING_BLINK_THRESHOLD = _apdm.APDM_AP_VENDOR_REQUEST_SET_WARNING_BLINK_THRESHOLD
APDM_AP_VENDOR_REQUEST_SET_ERROR_BLINK_THRESHOLD = _apdm.APDM_AP_VENDOR_REQUEST_SET_ERROR_BLINK_THRESHOLD
APDM_AP_VENDOR_REQUEST_GET_MODE = _apdm.APDM_AP_VENDOR_REQUEST_GET_MODE
APDM_AP_VENDOR_REQUEST_GET_VERSION = _apdm.APDM_AP_VENDOR_REQUEST_GET_VERSION
APDM_AP_VENDOR_REQUEST_AP_INFO = _apdm.APDM_AP_VENDOR_REQUEST_AP_INFO
APDM_AP_VENDOR_REQUEST_LED = _apdm.APDM_AP_VENDOR_REQUEST_LED
APDM_AP_VENDOR_REQUEST_PWM_OUTPUT = _apdm.APDM_AP_VENDOR_REQUEST_PWM_OUTPUT
APDM_AP_VENDOR_REQUEST_STOP_PWM_OUTPUT_DEPRECATED = _apdm.APDM_AP_VENDOR_REQUEST_STOP_PWM_OUTPUT_DEPRECATED
APDM_AP_VENDOR_REQUEST_START_N_PWM_OUTPUTS = _apdm.APDM_AP_VENDOR_REQUEST_START_N_PWM_OUTPUTS
APDM_AP_VENDOR_REQUEST_SYNC_PULSE_COUNTER = _apdm.APDM_AP_VENDOR_REQUEST_SYNC_PULSE_COUNTER
APDM_AP_VENDOR_REQUEST_GET_SYNC_PULSE_COUNTER_DEPRECATED = _apdm.APDM_AP_VENDOR_REQUEST_GET_SYNC_PULSE_COUNTER_DEPRECATED
APDM_AP_VENDOR_REQUEST_SENSOR_GROUP = _apdm.APDM_AP_VENDOR_REQUEST_SENSOR_GROUP
APDM_AP_VENDOR_REQUEST_GET_SENSOR_GROUP_DEPRECATED = _apdm.APDM_AP_VENDOR_REQUEST_GET_SENSOR_GROUP_DEPRECATED
APDM_AP_VENDOR_REQUEST_GET_RADIO_BLOCK_ADDRESSES_DEPRECATED = _apdm.APDM_AP_VENDOR_REQUEST_GET_RADIO_BLOCK_ADDRESSES_DEPRECATED
APDM_AP_VENDOR_REQUEST_RADIO_BLOCK_ADDRESSES = _apdm.APDM_AP_VENDOR_REQUEST_RADIO_BLOCK_ADDRESSES
APDM_AP_VENDOR_REQUEST_GET_RADIO_CHANNELS_DEPRECATED = _apdm.APDM_AP_VENDOR_REQUEST_GET_RADIO_CHANNELS_DEPRECATED
APDM_AP_VENDOR_REQUEST_RADIO_CHANNELS = _apdm.APDM_AP_VENDOR_REQUEST_RADIO_CHANNELS
APDM_AP_VENDOR_REQUEST_GET_RADIO_PIPE_COUNTS_DEPRECATED = _apdm.APDM_AP_VENDOR_REQUEST_GET_RADIO_PIPE_COUNTS_DEPRECATED
APDM_AP_VENDOR_REQUEST_RADIO_PIPE_COUNTS = _apdm.APDM_AP_VENDOR_REQUEST_RADIO_PIPE_COUNTS
APDM_AP_VENDOR_REQUEST_SYNC_SUBTRACTOR = _apdm.APDM_AP_VENDOR_REQUEST_SYNC_SUBTRACTOR
APDM_AP_VENDOR_REQUEST_GET_SYNC_SUBTRACTOR_DEPRECATED = _apdm.APDM_AP_VENDOR_REQUEST_GET_SYNC_SUBTRACTOR_DEPRECATED
APDM_AP_VENDOR_REQUEST_MAX_LATENCY = _apdm.APDM_AP_VENDOR_REQUEST_MAX_LATENCY
APDM_AP_VENDOR_REQUEST_GET_MAX_LATENCY_DEPRECATED = _apdm.APDM_AP_VENDOR_REQUEST_GET_MAX_LATENCY_DEPRECATED
APDM_AP_VENDOR_REQUEST_SYNC_VALUE = _apdm.APDM_AP_VENDOR_REQUEST_SYNC_VALUE
APDM_AP_VENDOR_REQUEST_GET_SYNC_VALUE_DEPRECATED = _apdm.APDM_AP_VENDOR_REQUEST_GET_SYNC_VALUE_DEPRECATED
APDM_AP_VENDOR_REQUEST_FLUSH_PACKET_FIFO = _apdm.APDM_AP_VENDOR_REQUEST_FLUSH_PACKET_FIFO
APDM_AP_VENDOR_REQUEST_START_WIRELESS_CONFIG_UPDATE = _apdm.APDM_AP_VENDOR_REQUEST_START_WIRELESS_CONFIG_UPDATE
APDM_AP_VENDOR_REQUEST_PROMISC = _apdm.APDM_AP_VENDOR_REQUEST_PROMISC
APDM_AP_VENDOR_REQUEST_AP_GROUP = _apdm.APDM_AP_VENDOR_REQUEST_AP_GROUP
APDM_AP_VENDOR_REQUEST_REQUESTED_DEVICE_STATE = _apdm.APDM_AP_VENDOR_REQUEST_REQUESTED_DEVICE_STATE
APDM_AP_VENDOR_REQUEST_GET_REQUESTED_DEVICE_STATE_DEPRECATED = _apdm.APDM_AP_VENDOR_REQUEST_GET_REQUESTED_DEVICE_STATE_DEPRECATED
APDM_AP_VENDOR_REQUEST_VERBOSE_AP_EVENTS = _apdm.APDM_AP_VENDOR_REQUEST_VERBOSE_AP_EVENTS
APDM_AP_VENDOR_REQUEST_HOST_LIBRARY_VERSION = _apdm.APDM_AP_VENDOR_REQUEST_HOST_LIBRARY_VERSION
APDM_AP_VENDOR_REQUEST_RESET_INTO = _apdm.APDM_AP_VENDOR_REQUEST_RESET_INTO
APDM_AP_VENDOR_REQUEST_SUPPORTED_FEATURE_BITMASK = _apdm.APDM_AP_VENDOR_REQUEST_SUPPORTED_FEATURE_BITMASK
APDM_AP_VENDOR_REQUEST_MISC = _apdm.APDM_AP_VENDOR_REQUEST_MISC
APDM_AP_VENDOR_REQUEST_LED_IGNORE_WIRELESS_ISR = _apdm.APDM_AP_VENDOR_REQUEST_LED_IGNORE_WIRELESS_ISR
APDM_AP_VENDOR_REQUEST_LED_STREAMING_STATUS = _apdm.APDM_AP_VENDOR_REQUEST_LED_STREAMING_STATUS
APDM_AP_VENDOR_REQUEST_LED_OVERRIDE_LED_COLOR = _apdm.APDM_AP_VENDOR_REQUEST_LED_OVERRIDE_LED_COLOR
APDM_AP_VENDOR_REQUEST_AP_INFO_SERIAL_AND_BOARD_VERSION = _apdm.APDM_AP_VENDOR_REQUEST_AP_INFO_SERIAL_AND_BOARD_VERSION
APDM_AP_VENDOR_REQUEST_AP_INFO_CASE_ID = _apdm.APDM_AP_VENDOR_REQUEST_AP_INFO_CASE_ID
APDM_AP_VENDOR_REQUEST_AP_INFO_RED_SCALAR = _apdm.APDM_AP_VENDOR_REQUEST_AP_INFO_RED_SCALAR
APDM_AP_VENDOR_REQUEST_AP_INFO_GREEN_SCALAR = _apdm.APDM_AP_VENDOR_REQUEST_AP_INFO_GREEN_SCALAR
APDM_AP_VENDOR_REQUEST_AP_INFO_BLUE_SCALAR = _apdm.APDM_AP_VENDOR_REQUEST_AP_INFO_BLUE_SCALAR
APDM_AP_VENDOR_REQUEST_AP_INFO_MAX_SAMPLES_PER_TRANSFER = _apdm.APDM_AP_VENDOR_REQUEST_AP_INFO_MAX_SAMPLES_PER_TRANSFER
APDM_AP_VENDOR_REQUEST_RADIO_BLOCK_ADDRESSES_BLOCK_A_B = _apdm.APDM_AP_VENDOR_REQUEST_RADIO_BLOCK_ADDRESSES_BLOCK_A_B
APDM_AP_VENDOR_REQUEST_RADIO_BLOCK_ADDRESSES_EXPECTED_SYNC_DELTA = _apdm.APDM_AP_VENDOR_REQUEST_RADIO_BLOCK_ADDRESSES_EXPECTED_SYNC_DELTA
APDM_AP_VENDOR_REQUEST_RADIO_BLOCK_ADDRESSES_CH1_RF_POWER_LEVEL = _apdm.APDM_AP_VENDOR_REQUEST_RADIO_BLOCK_ADDRESSES_CH1_RF_POWER_LEVEL
APDM_AP_VENDOR_REQUEST_RADIO_BLOCK_ADDRESSES_CH2_RF_POWER_LEVEL = _apdm.APDM_AP_VENDOR_REQUEST_RADIO_BLOCK_ADDRESSES_CH2_RF_POWER_LEVEL
APDM_AP_VENDOR_REQUEST_FLUSH_PACKET_FIFO_DO_FLUSH = _apdm.APDM_AP_VENDOR_REQUEST_FLUSH_PACKET_FIFO_DO_FLUSH
APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MAX_LATENCY = _apdm.APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MAX_LATENCY
APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_0 = _apdm.APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_0
APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_1 = _apdm.APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_1
APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_2 = _apdm.APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_2
APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_3 = _apdm.APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_3
APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_4 = _apdm.APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_4
APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_5 = _apdm.APDM_AP_VENDOR_REQUEST_MAX_LATENCY_MONITOR_LATENCY_5
APDM_AP_VENDOR_REQUEST_MINIMUM_SYNC_VALUE_64 = _apdm.APDM_AP_VENDOR_REQUEST_MINIMUM_SYNC_VALUE_64
APDM_AP_VENDOR_REQUEST_PWM_OUTPUT_PWM = _apdm.APDM_AP_VENDOR_REQUEST_PWM_OUTPUT_PWM
APDM_AP_VENDOR_REQUEST_PWM_OUTPUT_PIN_0_VALUE = _apdm.APDM_AP_VENDOR_REQUEST_PWM_OUTPUT_PIN_0_VALUE
APDM_AP_VENDOR_REQUEST_PWM_OUTPUT_ANALOG_OUT_0_VALUE = _apdm.APDM_AP_VENDOR_REQUEST_PWM_OUTPUT_ANALOG_OUT_0_VALUE
APDM_AP_VENDOR_REQUEST_PWM_OUTPUT_ANALOG_IN_0_VALUE = _apdm.APDM_AP_VENDOR_REQUEST_PWM_OUTPUT_ANALOG_IN_0_VALUE
RF_POWER_0DB = _apdm.RF_POWER_0DB
RF_POWER_N6DB = _apdm.RF_POWER_N6DB
RF_POWER_N12DB = _apdm.RF_POWER_N12DB
RF_POWER_N18DB = _apdm.RF_POWER_N18DB
APDM_AP_VENDOR_REQUEST_RADIO_PIPE_COUNTS_NUM_PIPES_TO_ENABLE = _apdm.APDM_AP_VENDOR_REQUEST_RADIO_PIPE_COUNTS_NUM_PIPES_TO_ENABLE
APDM_AP_VENDOR_REQUEST_RADIO_PIPE_COUNTS_PIPE_MAPPING = _apdm.APDM_AP_VENDOR_REQUEST_RADIO_PIPE_COUNTS_PIPE_MAPPING
APDM_AP_VENDOR_REQUEST_RADIO_PIPE_MONITOR_FIRMWARE_20110511 = _apdm.APDM_AP_VENDOR_REQUEST_RADIO_PIPE_MONITOR_FIRMWARE_20110511
APDM_AP_VENDOR_REQUEST_START_WIRELESS_CONFIG_UPDATE_COMMIT_ENABLE_WIRELESS = _apdm.APDM_AP_VENDOR_REQUEST_START_WIRELESS_CONFIG_UPDATE_COMMIT_ENABLE_WIRELESS
APDM_AP_VENDOR_REQUEST_START_WIRELESS_CONFIG_UPDATE_COMMIT_DISABLE_WIRELESS = _apdm.APDM_AP_VENDOR_REQUEST_START_WIRELESS_CONFIG_UPDATE_COMMIT_DISABLE_WIRELESS
APDM_AP_VENDOR_REQUEST_START_WIRELESS_CONFIG_UPDATE_COMMIT_ENABLE_PAIRED_RADIO_TEST = _apdm.APDM_AP_VENDOR_REQUEST_START_WIRELESS_CONFIG_UPDATE_COMMIT_ENABLE_PAIRED_RADIO_TEST
APDM_AP_VENDOR_REQUEST_START_WIRELESS_CONFIG_UPDATE_COMMIT_DISABLE_PAIRED_RADIO_TEST = _apdm.APDM_AP_VENDOR_REQUEST_START_WIRELESS_CONFIG_UPDATE_COMMIT_DISABLE_PAIRED_RADIO_TEST
APDM_AP_VENDOR_REQUEST_VERBOSE_AP_EVENTS_VERBOSE_AP_EVENTS = _apdm.APDM_AP_VENDOR_REQUEST_VERBOSE_AP_EVENTS_VERBOSE_AP_EVENTS
APDM_AP_VENDOR_REQUEST_VERBOSE_AP_EVENTS_VERBOSE_AP_EVENT_ERRORS = _apdm.APDM_AP_VENDOR_REQUEST_VERBOSE_AP_EVENTS_VERBOSE_AP_EVENT_ERRORS
APDM_AP_VENDOR_REQUEST_VERBOSE_AP_EVENTS_GENERIC_MONITOR_PACKETS = _apdm.APDM_AP_VENDOR_REQUEST_VERBOSE_AP_EVENTS_GENERIC_MONITOR_PACKETS
APDM_AP_VENDOR_REQUEST_MISC_PURGE_TX_FIFO = _apdm.APDM_AP_VENDOR_REQUEST_MISC_PURGE_TX_FIFO
APDM_AP_VENDOR_REQUEST_MISC_PEEK_POKE = _apdm.APDM_AP_VENDOR_REQUEST_MISC_PEEK_POKE
APDM_AP_VENDOR_REQUEST_MISC_PEEK_VALUE = _apdm.APDM_AP_VENDOR_REQUEST_MISC_PEEK_VALUE
APDM_AP_VENDOR_REQUEST_MISC_PAIRED_WIRELESS_TX_RX_COUNTS = _apdm.APDM_AP_VENDOR_REQUEST_MISC_PAIRED_WIRELESS_TX_RX_COUNTS
APDM_AP_VENDOR_REQUEST_MISC_NRF_1_REGISTER_VALUE = _apdm.APDM_AP_VENDOR_REQUEST_MISC_NRF_1_REGISTER_VALUE
APDM_AP_VENDOR_REQUEST_MISC_NRF_2_REGISTER_VALUE = _apdm.APDM_AP_VENDOR_REQUEST_MISC_NRF_2_REGISTER_VALUE
APDM_AP_VENDOR_REQUEST_MISC_NO_OP_PACKET_ENABLE = _apdm.APDM_AP_VENDOR_REQUEST_MISC_NO_OP_PACKET_ENABLE
APDM_AP_VENDOR_REQUEST_MISC_CHECK_NEW_FIRMWARE_VERSION = _apdm.APDM_AP_VENDOR_REQUEST_MISC_CHECK_NEW_FIRMWARE_VERSION
APDM_AP_VENDOR_REQUEST_MISC_CURRENT_MEM_CHECK_INDEX = _apdm.APDM_AP_VENDOR_REQUEST_MISC_CURRENT_MEM_CHECK_INDEX
APDM_AP_VENDOR_REQUEST_MISC_CURRENT_MEM_CHECK_FLAG = _apdm.APDM_AP_VENDOR_REQUEST_MISC_CURRENT_MEM_CHECK_FLAG
APDM_AP_VENDOR_REQUEST_MISC_MEM_CHECK_BAD_ADDRESS = _apdm.APDM_AP_VENDOR_REQUEST_MISC_MEM_CHECK_BAD_ADDRESS
APDM_AP_VENDOR_REQUEST_RESET_INTO_TARGET_MODE_BOOTLOADER = _apdm.APDM_AP_VENDOR_REQUEST_RESET_INTO_TARGET_MODE_BOOTLOADER
APDM_AP_VENDOR_REQUEST_RESET_INTO_TARGET_MODE_FIRMWARE = _apdm.APDM_AP_VENDOR_REQUEST_RESET_INTO_TARGET_MODE_FIRMWARE
APDM_AP_VENDOR_REQUEST_RESET_INTO_TARGET_MODE_ACM = _apdm.APDM_AP_VENDOR_REQUEST_RESET_INTO_TARGET_MODE_ACM
GENERIC_PACKET_TYPE_PROMISC = _apdm.GENERIC_PACKET_TYPE_PROMISC
GENERIC_PACKET_TYPE_AP_EVENT = _apdm.GENERIC_PACKET_TYPE_AP_EVENT
GENERIC_PACKET_TYPE_OPAL_DATA = _apdm.GENERIC_PACKET_TYPE_OPAL_DATA
GENERIC_PACKET_TYPE_32_NO_OP = _apdm.GENERIC_PACKET_TYPE_32_NO_OP
AP_EVENT_SYNC_NO_TYPE = _apdm.AP_EVENT_SYNC_NO_TYPE
AP_EVENT_SYNC_DELTA_ERROR = _apdm.AP_EVENT_SYNC_DELTA_ERROR
AP_EVENT_PACKET_CKSUM_ERROR = _apdm.AP_EVENT_PACKET_CKSUM_ERROR
AP_EVENT_NORMAL_VALID_PACKET = _apdm.AP_EVENT_NORMAL_VALID_PACKET
class opal_data_t(_object):
    """Proxy of C opal_data_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opal_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opal_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["retrys"] = _apdm.opal_data_t_retrys_set
    __swig_getmethods__["retrys"] = _apdm.opal_data_t_retrys_get
    if _newclass:retrys = _swig_property(_apdm.opal_data_t_retrys_get, _apdm.opal_data_t_retrys_set)
    __swig_setmethods__["flags"] = _apdm.opal_data_t_flags_set
    __swig_getmethods__["flags"] = _apdm.opal_data_t_flags_get
    if _newclass:flags = _swig_property(_apdm.opal_data_t_flags_get, _apdm.opal_data_t_flags_set)
    __swig_setmethods__["ax"] = _apdm.opal_data_t_ax_set
    __swig_getmethods__["ax"] = _apdm.opal_data_t_ax_get
    if _newclass:ax = _swig_property(_apdm.opal_data_t_ax_get, _apdm.opal_data_t_ax_set)
    __swig_setmethods__["ay"] = _apdm.opal_data_t_ay_set
    __swig_getmethods__["ay"] = _apdm.opal_data_t_ay_get
    if _newclass:ay = _swig_property(_apdm.opal_data_t_ay_get, _apdm.opal_data_t_ay_set)
    __swig_setmethods__["az"] = _apdm.opal_data_t_az_set
    __swig_getmethods__["az"] = _apdm.opal_data_t_az_get
    if _newclass:az = _swig_property(_apdm.opal_data_t_az_get, _apdm.opal_data_t_az_set)
    __swig_setmethods__["gx"] = _apdm.opal_data_t_gx_set
    __swig_getmethods__["gx"] = _apdm.opal_data_t_gx_get
    if _newclass:gx = _swig_property(_apdm.opal_data_t_gx_get, _apdm.opal_data_t_gx_set)
    __swig_setmethods__["gy"] = _apdm.opal_data_t_gy_set
    __swig_getmethods__["gy"] = _apdm.opal_data_t_gy_get
    if _newclass:gy = _swig_property(_apdm.opal_data_t_gy_get, _apdm.opal_data_t_gy_set)
    __swig_setmethods__["gz"] = _apdm.opal_data_t_gz_set
    __swig_getmethods__["gz"] = _apdm.opal_data_t_gz_get
    if _newclass:gz = _swig_property(_apdm.opal_data_t_gz_get, _apdm.opal_data_t_gz_set)
    __swig_setmethods__["mx"] = _apdm.opal_data_t_mx_set
    __swig_getmethods__["mx"] = _apdm.opal_data_t_mx_get
    if _newclass:mx = _swig_property(_apdm.opal_data_t_mx_get, _apdm.opal_data_t_mx_set)
    __swig_setmethods__["my"] = _apdm.opal_data_t_my_set
    __swig_getmethods__["my"] = _apdm.opal_data_t_my_get
    if _newclass:my = _swig_property(_apdm.opal_data_t_my_get, _apdm.opal_data_t_my_set)
    __swig_setmethods__["mz"] = _apdm.opal_data_t_mz_set
    __swig_getmethods__["mz"] = _apdm.opal_data_t_mz_get
    if _newclass:mz = _swig_property(_apdm.opal_data_t_mz_get, _apdm.opal_data_t_mz_set)
    __swig_setmethods__["opt_data"] = _apdm.opal_data_t_opt_data_set
    __swig_getmethods__["opt_data"] = _apdm.opal_data_t_opt_data_get
    if _newclass:opt_data = _swig_property(_apdm.opal_data_t_opt_data_get, _apdm.opal_data_t_opt_data_set)
    __swig_setmethods__["sync_val_32"] = _apdm.opal_data_t_sync_val_32_set
    __swig_getmethods__["sync_val_32"] = _apdm.opal_data_t_sync_val_32_get
    if _newclass:sync_val_32 = _swig_property(_apdm.opal_data_t_sync_val_32_get, _apdm.opal_data_t_sync_val_32_set)
    __swig_getmethods__["mc_temp"] = _apdm.opal_data_t_mc_temp_get
    if _newclass:mc_temp = _swig_property(_apdm.opal_data_t_mc_temp_get)
    def __init__(self): 
        """__init__(self) -> opal_data_t"""
        this = _apdm.new_opal_data_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_opal_data_t
    __del__ = lambda self : None;
opal_data_t_swigregister = _apdm.opal_data_t_swigregister
opal_data_t_swigregister(opal_data_t)

class opal_data_t_mc_temp(_object):
    """Proxy of C opal_data_t_mc_temp struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opal_data_t_mc_temp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opal_data_t_mc_temp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _apdm.opal_data_t_mc_temp_mc_set
    __swig_getmethods__["mc"] = _apdm.opal_data_t_mc_temp_mc_get
    if _newclass:mc = _swig_property(_apdm.opal_data_t_mc_temp_mc_get, _apdm.opal_data_t_mc_temp_mc_set)
    __swig_setmethods__["temperature"] = _apdm.opal_data_t_mc_temp_temperature_set
    __swig_getmethods__["temperature"] = _apdm.opal_data_t_mc_temp_temperature_get
    if _newclass:temperature = _swig_property(_apdm.opal_data_t_mc_temp_temperature_get, _apdm.opal_data_t_mc_temp_temperature_set)
    def __init__(self): 
        """__init__(self) -> opal_data_t_mc_temp"""
        this = _apdm.new_opal_data_t_mc_temp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_opal_data_t_mc_temp
    __del__ = lambda self : None;
opal_data_t_mc_temp_swigregister = _apdm.opal_data_t_mc_temp_swigregister
opal_data_t_mc_temp_swigregister(opal_data_t_mc_temp)

class host_sample_transfer_t(_object):
    """Proxy of C host_sample_transfer_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ap_flags"] = _apdm.host_sample_transfer_t_ap_flags_set
    __swig_getmethods__["ap_flags"] = _apdm.host_sample_transfer_t_ap_flags_get
    if _newclass:ap_flags = _swig_property(_apdm.host_sample_transfer_t_ap_flags_get, _apdm.host_sample_transfer_t_ap_flags_set)
    __swig_getmethods__["packet_data"] = _apdm.host_sample_transfer_t_packet_data_get
    if _newclass:packet_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_get)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t"""
        this = _apdm.new_host_sample_transfer_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t
    __del__ = lambda self : None;
host_sample_transfer_t_swigregister = _apdm.host_sample_transfer_t_swigregister
host_sample_transfer_t_swigregister(host_sample_transfer_t)

class host_sample_transfer_t_packet_data(_object):
    """Proxy of C host_sample_transfer_t_packet_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data_raw_array"] = _apdm.host_sample_transfer_t_packet_data_data_raw_array_set
    __swig_getmethods__["data_raw_array"] = _apdm.host_sample_transfer_t_packet_data_data_raw_array_get
    if _newclass:data_raw_array = _swig_property(_apdm.host_sample_transfer_t_packet_data_data_raw_array_get, _apdm.host_sample_transfer_t_packet_data_data_raw_array_set)
    __swig_setmethods__["opal_data"] = _apdm.host_sample_transfer_t_packet_data_opal_data_set
    __swig_getmethods__["opal_data"] = _apdm.host_sample_transfer_t_packet_data_opal_data_get
    if _newclass:opal_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_opal_data_get, _apdm.host_sample_transfer_t_packet_data_opal_data_set)
    __swig_getmethods__["external_sync_data"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_get
    if _newclass:external_sync_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_external_sync_data_get)
    __swig_getmethods__["opal_event_data"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_get
    if _newclass:opal_event_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_opal_event_data_get)
    __swig_getmethods__["generic_packet_data_32"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_get
    if _newclass:generic_packet_data_32 = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_get)
    __swig_getmethods__["generic_packet_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_get
    if _newclass:generic_packet_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_get)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data"""
        this = _apdm.new_host_sample_transfer_t_packet_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_swigregister = _apdm.host_sample_transfer_t_packet_data_swigregister
host_sample_transfer_t_packet_data_swigregister(host_sample_transfer_t_packet_data)

class host_sample_transfer_t_packet_data_generic_packet_data(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["generic_packet_type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_generic_packet_type_set
    __swig_getmethods__["generic_packet_type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_generic_packet_type_get
    if _newclass:generic_packet_type = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_generic_packet_type_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_generic_packet_type_set)
    __swig_getmethods__["payload"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_get
    if _newclass:payload = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_get)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_swigregister(host_sample_transfer_t_packet_data_generic_packet_data)

class host_sample_transfer_t_packet_data_generic_packet_data_payload(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opal_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_opal_data_set
    __swig_getmethods__["opal_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_opal_data_get
    if _newclass:opal_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_opal_data_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_opal_data_set)
    __swig_getmethods__["promisc_packet"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_get
    if _newclass:promisc_packet = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_get)
    __swig_getmethods__["ap_event"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_get
    if _newclass:ap_event = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_get)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload)

class host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["event_type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_type_set
    __swig_getmethods__["event_type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_type_get
    if _newclass:event_type = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_type_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_type_set)
    __swig_getmethods__["event_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_get
    if _newclass:event_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_get)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event)

class host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data, name)
    __repr__ = _swig_repr
    __swig_getmethods__["sync_delta"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_get
    if _newclass:sync_delta = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_get)
    __swig_getmethods__["invalid_packet_cksum"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_get
    if _newclass:invalid_packet_cksum = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_get)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data)

class host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nrf_status_register"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_nrf_status_register_set
    __swig_getmethods__["nrf_status_register"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_nrf_status_register_get
    if _newclass:nrf_status_register = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_nrf_status_register_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_nrf_status_register_set)
    __swig_setmethods__["ap_sync_value"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_ap_sync_value_set
    __swig_getmethods__["ap_sync_value"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_ap_sync_value_get
    if _newclass:ap_sync_value = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_ap_sync_value_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_ap_sync_value_set)
    __swig_setmethods__["packet_sync64"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_packet_sync64_set
    __swig_getmethods__["packet_sync64"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_packet_sync64_get
    if _newclass:packet_sync64 = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_packet_sync64_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_packet_sync64_set)
    __swig_setmethods__["device_id"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_device_id_set
    __swig_getmethods__["device_id"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_device_id_get
    if _newclass:device_id = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_device_id_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_device_id_set)
    __swig_setmethods__["packet_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_packet_data_set
    __swig_getmethods__["packet_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_packet_data_get
    if _newclass:packet_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_packet_data_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_packet_data_set)
    __swig_setmethods__["nrf_fifo_status_register"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_nrf_fifo_status_register_set
    __swig_getmethods__["nrf_fifo_status_register"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_nrf_fifo_status_register_get
    if _newclass:nrf_fifo_status_register = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_nrf_fifo_status_register_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_nrf_fifo_status_register_set)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_invalid_packet_cksum)

class host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nrf_status_register"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_status_register_set
    __swig_getmethods__["nrf_status_register"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_status_register_get
    if _newclass:nrf_status_register = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_status_register_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_status_register_set)
    __swig_setmethods__["sync_a"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_sync_a_set
    __swig_getmethods__["sync_a"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_sync_a_get
    if _newclass:sync_a = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_sync_a_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_sync_a_set)
    __swig_setmethods__["sync_b"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_sync_b_set
    __swig_getmethods__["sync_b"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_sync_b_get
    if _newclass:sync_b = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_sync_b_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_sync_b_set)
    __swig_setmethods__["ap_sync_value"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_ap_sync_value_set
    __swig_getmethods__["ap_sync_value"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_ap_sync_value_get
    if _newclass:ap_sync_value = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_ap_sync_value_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_ap_sync_value_set)
    __swig_setmethods__["device_id"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_device_id_set
    __swig_getmethods__["device_id"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_device_id_get
    if _newclass:device_id = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_device_id_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_device_id_set)
    __swig_setmethods__["nrf_fifo_status_register"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_fifo_status_register_set
    __swig_getmethods__["nrf_fifo_status_register"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_fifo_status_register_get
    if _newclass:nrf_fifo_status_register = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_fifo_status_register_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_fifo_status_register_set)
    __swig_setmethods__["nrf_fifo_status_register2"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_fifo_status_register2_set
    __swig_getmethods__["nrf_fifo_status_register2"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_fifo_status_register2_get
    if _newclass:nrf_fifo_status_register2 = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_fifo_status_register2_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_nrf_fifo_status_register2_set)
    __swig_setmethods__["currentSampleCount"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCount_set
    __swig_getmethods__["currentSampleCount"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCount_get
    if _newclass:currentSampleCount = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCount_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCount_set)
    __swig_setmethods__["currentSampleCountMod24"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCountMod24_set
    __swig_getmethods__["currentSampleCountMod24"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCountMod24_get
    if _newclass:currentSampleCountMod24 = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCountMod24_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCountMod24_set)
    __swig_setmethods__["currentSampleCountMod32"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCountMod32_set
    __swig_getmethods__["currentSampleCountMod32"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCountMod32_get
    if _newclass:currentSampleCountMod32 = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCountMod32_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_currentSampleCountMod32_set)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload_ap_event_event_data_sync_delta)

class host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["padding"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_padding_set
    __swig_getmethods__["padding"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_padding_get
    if _newclass:padding = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_padding_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_padding_set)
    __swig_setmethods__["sync_value_at_time_of_arrivial"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_sync_value_at_time_of_arrivial_set
    __swig_getmethods__["sync_value_at_time_of_arrivial"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_sync_value_at_time_of_arrivial_get
    if _newclass:sync_value_at_time_of_arrivial = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_sync_value_at_time_of_arrivial_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_sync_value_at_time_of_arrivial_set)
    __swig_getmethods__["packet"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_get
    if _newclass:packet = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_get)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet)

class host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["raw_packet"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_raw_packet_set
    __swig_getmethods__["raw_packet"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_raw_packet_get
    if _newclass:raw_packet = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_raw_packet_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_raw_packet_set)
    __swig_setmethods__["type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_type_set
    __swig_getmethods__["type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_type_get
    if _newclass:type = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_type_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_type_set)
    __swig_getmethods__["opal_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_get
    if _newclass:opal_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_get)
    __swig_getmethods__["external_sync_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_get
    if _newclass:external_sync_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_get)
    __swig_getmethods__["opal_event_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_get
    if _newclass:opal_event_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_get)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet)

class host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_type_set
    __swig_getmethods__["type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_type_get
    if _newclass:type = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_type_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_type_set)
    __swig_setmethods__["retrys"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_retrys_set
    __swig_getmethods__["retrys"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_retrys_get
    if _newclass:retrys = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_retrys_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_retrys_set)
    __swig_setmethods__["event_id"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_event_id_set
    __swig_getmethods__["event_id"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_event_id_get
    if _newclass:event_id = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_event_id_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_event_id_set)
    __swig_setmethods__["data_a"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_a_set
    __swig_getmethods__["data_a"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_a_get
    if _newclass:data_a = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_a_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_a_set)
    __swig_setmethods__["data_b"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_b_set
    __swig_getmethods__["data_b"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_b_get
    if _newclass:data_b = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_b_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_b_set)
    __swig_setmethods__["data_c"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_c_set
    __swig_getmethods__["data_c"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_c_get
    if _newclass:data_c = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_c_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_c_set)
    __swig_setmethods__["data_d"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_d_set
    __swig_getmethods__["data_d"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_d_get
    if _newclass:data_d = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_d_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_d_set)
    __swig_setmethods__["data_e"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_e_set
    __swig_getmethods__["data_e"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_e_get
    if _newclass:data_e = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_e_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_e_set)
    __swig_setmethods__["data_f"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_f_set
    __swig_getmethods__["data_f"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_f_get
    if _newclass:data_f = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_f_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_data_f_set)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_event_data)

class host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_type_set
    __swig_getmethods__["type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_type_get
    if _newclass:type = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_type_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_type_set)
    __swig_setmethods__["gpio_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_gpio_data_set
    __swig_getmethods__["gpio_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_gpio_data_get
    if _newclass:gpio_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_gpio_data_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_gpio_data_set)
    __swig_setmethods__["data_type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_data_type_set
    __swig_getmethods__["data_type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_data_type_get
    if _newclass:data_type = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_data_type_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_data_type_set)
    __swig_setmethods__["gpio_change_mask"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_gpio_change_mask_set
    __swig_getmethods__["gpio_change_mask"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_gpio_change_mask_get
    if _newclass:gpio_change_mask = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_gpio_change_mask_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_gpio_change_mask_set)
    __swig_setmethods__["sync_value"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_sync_value_set
    __swig_getmethods__["sync_value"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_sync_value_get
    if _newclass:sync_value = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_sync_value_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_sync_value_set)
    __swig_setmethods__["adc_read_value1"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_adc_read_value1_set
    __swig_getmethods__["adc_read_value1"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_adc_read_value1_get
    if _newclass:adc_read_value1 = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_adc_read_value1_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_adc_read_value1_set)
    __swig_setmethods__["adc_read_value2"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_adc_read_value2_set
    __swig_getmethods__["adc_read_value2"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_adc_read_value2_get
    if _newclass:adc_read_value2 = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_adc_read_value2_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_adc_read_value2_set)
    __swig_setmethods__["uart_character"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_uart_character_set
    __swig_getmethods__["uart_character"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_uart_character_get
    if _newclass:uart_character = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_uart_character_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_uart_character_set)
    __swig_setmethods__["value_population_populated_flags"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_value_population_populated_flags_set
    __swig_getmethods__["value_population_populated_flags"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_value_population_populated_flags_get
    if _newclass:value_population_populated_flags = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_value_population_populated_flags_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_value_population_populated_flags_set)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_external_sync_data)

class host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_type_set
    __swig_getmethods__["type"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_type_get
    if _newclass:type = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_type_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_type_set)
    __swig_setmethods__["retrys"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_retrys_set
    __swig_getmethods__["retrys"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_retrys_get
    if _newclass:retrys = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_retrys_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_retrys_set)
    __swig_setmethods__["flags"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_flags_set
    __swig_getmethods__["flags"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_flags_get
    if _newclass:flags = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_flags_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_flags_set)
    __swig_setmethods__["ax"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_ax_set
    __swig_getmethods__["ax"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_ax_get
    if _newclass:ax = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_ax_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_ax_set)
    __swig_setmethods__["ay"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_ay_set
    __swig_getmethods__["ay"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_ay_get
    if _newclass:ay = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_ay_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_ay_set)
    __swig_setmethods__["az"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_az_set
    __swig_getmethods__["az"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_az_get
    if _newclass:az = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_az_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_az_set)
    __swig_setmethods__["gx"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gx_set
    __swig_getmethods__["gx"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gx_get
    if _newclass:gx = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gx_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gx_set)
    __swig_setmethods__["gy"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gy_set
    __swig_getmethods__["gy"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gy_get
    if _newclass:gy = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gy_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gy_set)
    __swig_setmethods__["gz"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gz_set
    __swig_getmethods__["gz"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gz_get
    if _newclass:gz = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gz_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_gz_set)
    __swig_setmethods__["mx"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mx_set
    __swig_getmethods__["mx"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mx_get
    if _newclass:mx = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mx_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mx_set)
    __swig_setmethods__["my"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_my_set
    __swig_getmethods__["my"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_my_get
    if _newclass:my = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_my_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_my_set)
    __swig_setmethods__["mz"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mz_set
    __swig_getmethods__["mz"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mz_get
    if _newclass:mz = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mz_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mz_set)
    __swig_setmethods__["opt_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_opt_data_set
    __swig_getmethods__["opt_data"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_opt_data_get
    if _newclass:opt_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_opt_data_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_opt_data_set)
    __swig_setmethods__["sync_val_32"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_sync_val_32_set
    __swig_getmethods__["sync_val_32"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_sync_val_32_get
    if _newclass:sync_val_32 = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_sync_val_32_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_sync_val_32_set)
    __swig_getmethods__["mc_temp"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_get
    if _newclass:mc_temp = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_get)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data)

class host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_mc_set
    __swig_getmethods__["mc"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_mc_get
    if _newclass:mc = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_mc_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_mc_set)
    __swig_setmethods__["temperature"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_temperature_set
    __swig_getmethods__["temperature"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_temperature_get
    if _newclass:temperature = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_temperature_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_temperature_set)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_payload_promisc_packet_packet_opal_data_mc_temp)

class host_sample_transfer_t_packet_data_generic_packet_data_32(_object):
    """Proxy of C host_sample_transfer_t_packet_data_generic_packet_data_32 struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_generic_packet_data_32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_generic_packet_data_32, name)
    __repr__ = _swig_repr
    __swig_setmethods__["generic_packet_type_32"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_generic_packet_type_32_set
    __swig_getmethods__["generic_packet_type_32"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_generic_packet_type_32_get
    if _newclass:generic_packet_type_32 = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_generic_packet_type_32_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_generic_packet_type_32_set)
    __swig_setmethods__["padd"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_padd_set
    __swig_getmethods__["padd"] = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_padd_get
    if _newclass:padd = _swig_property(_apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_padd_get, _apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_padd_set)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_generic_packet_data_32"""
        this = _apdm.new_host_sample_transfer_t_packet_data_generic_packet_data_32()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_generic_packet_data_32
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_generic_packet_data_32_swigregister = _apdm.host_sample_transfer_t_packet_data_generic_packet_data_32_swigregister
host_sample_transfer_t_packet_data_generic_packet_data_32_swigregister(host_sample_transfer_t_packet_data_generic_packet_data_32)

class host_sample_transfer_t_packet_data_opal_event_data(_object):
    """Proxy of C host_sample_transfer_t_packet_data_opal_event_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_opal_event_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_opal_event_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["retrys"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_retrys_set
    __swig_getmethods__["retrys"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_retrys_get
    if _newclass:retrys = _swig_property(_apdm.host_sample_transfer_t_packet_data_opal_event_data_retrys_get, _apdm.host_sample_transfer_t_packet_data_opal_event_data_retrys_set)
    __swig_setmethods__["event_id"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_event_id_set
    __swig_getmethods__["event_id"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_event_id_get
    if _newclass:event_id = _swig_property(_apdm.host_sample_transfer_t_packet_data_opal_event_data_event_id_get, _apdm.host_sample_transfer_t_packet_data_opal_event_data_event_id_set)
    __swig_setmethods__["data_a"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_a_set
    __swig_getmethods__["data_a"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_a_get
    if _newclass:data_a = _swig_property(_apdm.host_sample_transfer_t_packet_data_opal_event_data_data_a_get, _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_a_set)
    __swig_setmethods__["data_b"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_b_set
    __swig_getmethods__["data_b"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_b_get
    if _newclass:data_b = _swig_property(_apdm.host_sample_transfer_t_packet_data_opal_event_data_data_b_get, _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_b_set)
    __swig_setmethods__["data_c"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_c_set
    __swig_getmethods__["data_c"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_c_get
    if _newclass:data_c = _swig_property(_apdm.host_sample_transfer_t_packet_data_opal_event_data_data_c_get, _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_c_set)
    __swig_setmethods__["data_d"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_d_set
    __swig_getmethods__["data_d"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_d_get
    if _newclass:data_d = _swig_property(_apdm.host_sample_transfer_t_packet_data_opal_event_data_data_d_get, _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_d_set)
    __swig_setmethods__["data_e"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_e_set
    __swig_getmethods__["data_e"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_e_get
    if _newclass:data_e = _swig_property(_apdm.host_sample_transfer_t_packet_data_opal_event_data_data_e_get, _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_e_set)
    __swig_setmethods__["data_f"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_f_set
    __swig_getmethods__["data_f"] = _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_f_get
    if _newclass:data_f = _swig_property(_apdm.host_sample_transfer_t_packet_data_opal_event_data_data_f_get, _apdm.host_sample_transfer_t_packet_data_opal_event_data_data_f_set)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_opal_event_data"""
        this = _apdm.new_host_sample_transfer_t_packet_data_opal_event_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_opal_event_data
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_opal_event_data_swigregister = _apdm.host_sample_transfer_t_packet_data_opal_event_data_swigregister
host_sample_transfer_t_packet_data_opal_event_data_swigregister(host_sample_transfer_t_packet_data_opal_event_data)

class host_sample_transfer_t_packet_data_external_sync_data(_object):
    """Proxy of C host_sample_transfer_t_packet_data_external_sync_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, host_sample_transfer_t_packet_data_external_sync_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, host_sample_transfer_t_packet_data_external_sync_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gpio_data"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_gpio_data_set
    __swig_getmethods__["gpio_data"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_gpio_data_get
    if _newclass:gpio_data = _swig_property(_apdm.host_sample_transfer_t_packet_data_external_sync_data_gpio_data_get, _apdm.host_sample_transfer_t_packet_data_external_sync_data_gpio_data_set)
    __swig_setmethods__["data_type"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_data_type_set
    __swig_getmethods__["data_type"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_data_type_get
    if _newclass:data_type = _swig_property(_apdm.host_sample_transfer_t_packet_data_external_sync_data_data_type_get, _apdm.host_sample_transfer_t_packet_data_external_sync_data_data_type_set)
    __swig_setmethods__["gpio_change_mask"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_gpio_change_mask_set
    __swig_getmethods__["gpio_change_mask"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_gpio_change_mask_get
    if _newclass:gpio_change_mask = _swig_property(_apdm.host_sample_transfer_t_packet_data_external_sync_data_gpio_change_mask_get, _apdm.host_sample_transfer_t_packet_data_external_sync_data_gpio_change_mask_set)
    __swig_setmethods__["sync_value"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_sync_value_set
    __swig_getmethods__["sync_value"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_sync_value_get
    if _newclass:sync_value = _swig_property(_apdm.host_sample_transfer_t_packet_data_external_sync_data_sync_value_get, _apdm.host_sample_transfer_t_packet_data_external_sync_data_sync_value_set)
    __swig_setmethods__["adc_read_value1"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_adc_read_value1_set
    __swig_getmethods__["adc_read_value1"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_adc_read_value1_get
    if _newclass:adc_read_value1 = _swig_property(_apdm.host_sample_transfer_t_packet_data_external_sync_data_adc_read_value1_get, _apdm.host_sample_transfer_t_packet_data_external_sync_data_adc_read_value1_set)
    __swig_setmethods__["adc_read_value2"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_adc_read_value2_set
    __swig_getmethods__["adc_read_value2"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_adc_read_value2_get
    if _newclass:adc_read_value2 = _swig_property(_apdm.host_sample_transfer_t_packet_data_external_sync_data_adc_read_value2_get, _apdm.host_sample_transfer_t_packet_data_external_sync_data_adc_read_value2_set)
    __swig_setmethods__["uart_character"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_uart_character_set
    __swig_getmethods__["uart_character"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_uart_character_get
    if _newclass:uart_character = _swig_property(_apdm.host_sample_transfer_t_packet_data_external_sync_data_uart_character_get, _apdm.host_sample_transfer_t_packet_data_external_sync_data_uart_character_set)
    __swig_setmethods__["value_population_populated_flags"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_value_population_populated_flags_set
    __swig_getmethods__["value_population_populated_flags"] = _apdm.host_sample_transfer_t_packet_data_external_sync_data_value_population_populated_flags_get
    if _newclass:value_population_populated_flags = _swig_property(_apdm.host_sample_transfer_t_packet_data_external_sync_data_value_population_populated_flags_get, _apdm.host_sample_transfer_t_packet_data_external_sync_data_value_population_populated_flags_set)
    def __init__(self): 
        """__init__(self) -> host_sample_transfer_t_packet_data_external_sync_data"""
        this = _apdm.new_host_sample_transfer_t_packet_data_external_sync_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _apdm.delete_host_sample_transfer_t_packet_data_external_sync_data
    __del__ = lambda self : None;
host_sample_transfer_t_packet_data_external_sync_data_swigregister = _apdm.host_sample_transfer_t_packet_data_external_sync_data_swigregister
host_sample_transfer_t_packet_data_external_sync_data_swigregister(host_sample_transfer_t_packet_data_external_sync_data)

APDM_DOCK_VENDOR_REQUEST_NOP = _apdm.APDM_DOCK_VENDOR_REQUEST_NOP
APDM_DOCK_VENDOR_REQUEST_SUPPORTED_FEATURE_BITMASK = _apdm.APDM_DOCK_VENDOR_REQUEST_SUPPORTED_FEATURE_BITMASK
APDM_DOCK_VENDOR_REQUEST_SET_SD_MOUNTING_MODE = _apdm.APDM_DOCK_VENDOR_REQUEST_SET_SD_MOUNTING_MODE
APDM_DOCK_VENDOR_REQUEST_SET_MONITOR_UART_MODE = _apdm.APDM_DOCK_VENDOR_REQUEST_SET_MONITOR_UART_MODE
APDM_DOCK_VENDOR_REQUEST_DOCK_INFO = _apdm.APDM_DOCK_VENDOR_REQUEST_DOCK_INFO
APDM_DOCK_VENDOR_REQUEST_GET_HARDWARE_VERSION = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_HARDWARE_VERSION
APDM_DOCK_VENDOR_REQUEST_GET_FIRMWARE_VERSION = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_FIRMWARE_VERSION
APDM_DOCK_VENDOR_REQUEST_GET_MODE = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_MODE
APDM_DOCK_VENDOR_REQUEST_GET_IS_MONITOR_PRESENT = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_IS_MONITOR_PRESENT
APDM_DOCK_VENDOR_REQUEST_GET_DOCKED_MODULE_ID = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_DOCKED_MODULE_ID
APDM_DOCK_VENDOR_REQUEST_GET_MONITOR_DOCKING_STATUS = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_MONITOR_DOCKING_STATUS
APDM_DOCK_VENDOR_REQUEST_GET_SD_MOUNTING_STATUS = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_SD_MOUNTING_STATUS
APDM_DOCK_VENDOR_REQUEST_GET_NODE_ID = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_NODE_ID
APDM_DOCK_VENDOR_REQUEST_GET_CURRENT_POWER_SOURCE = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_CURRENT_POWER_SOURCE
APDM_DOCK_VENDOR_REQUEST_GET_MINIMUM_HOST_LIBRARY_VERSION = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_MINIMUM_HOST_LIBRARY_VERSION
APDM_DOCK_VENDOR_REQUEST_RESET_INTO = _apdm.APDM_DOCK_VENDOR_REQUEST_RESET_INTO
APDM_DOCK_VENDOR_REQUEST_GET_CASE_ID_DEPRECATED = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_CASE_ID_DEPRECATED
APDM_DOCK_VENDOR_REQUEST_MISC = _apdm.APDM_DOCK_VENDOR_REQUEST_MISC
APDM_DOCK_VENDOR_REQUEST_MISC_PURGE_MONITOR_FIFO = _apdm.APDM_DOCK_VENDOR_REQUEST_MISC_PURGE_MONITOR_FIFO
APDM_DOCK_VENDOR_REQUEST_MISC_PURGE_DS_COMMAND_FIFO = _apdm.APDM_DOCK_VENDOR_REQUEST_MISC_PURGE_DS_COMMAND_FIFO
APDM_DOCK_VENDOR_REQUEST_MISC_PEEK_POKE = _apdm.APDM_DOCK_VENDOR_REQUEST_MISC_PEEK_POKE
APDM_DOCK_VENDOR_REQUEST_MISC_PEEK_VALUE = _apdm.APDM_DOCK_VENDOR_REQUEST_MISC_PEEK_VALUE
APDM_DOCK_VENDOR_REQUEST_MISC_MONITOR_TX_FIFO_SIZE = _apdm.APDM_DOCK_VENDOR_REQUEST_MISC_MONITOR_TX_FIFO_SIZE
APDM_DOCK_VENDOR_REQUEST_MISC_MONITOR_RX_FIFO_SIZE = _apdm.APDM_DOCK_VENDOR_REQUEST_MISC_MONITOR_RX_FIFO_SIZE
APDM_DOCK_VENDOR_REQUEST_MISC_DS_COMMAND_TX_FIFO_SIZE = _apdm.APDM_DOCK_VENDOR_REQUEST_MISC_DS_COMMAND_TX_FIFO_SIZE
APDM_DOCK_VENDOR_REQUEST_MISC_DS_COMMAND_RX_FIFO_SIZE = _apdm.APDM_DOCK_VENDOR_REQUEST_MISC_DS_COMMAND_RX_FIFO_SIZE
APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_DOCKING_STATION_ID = _apdm.APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_DOCKING_STATION_ID
APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_DOCKING_STATION_CASE_ID = _apdm.APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_DOCKING_STATION_CASE_ID
APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_HARDWARE_VERSION_NUMBER = _apdm.APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_HARDWARE_VERSION_NUMBER
APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_LED_CAL_RED = _apdm.APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_LED_CAL_RED
APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_LED_CAL_GREEN = _apdm.APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_LED_CAL_GREEN
APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_LED_CAL_BLUE = _apdm.APDM_DOCK_VENDOR_REQUEST_DOCK_INFO_LED_CAL_BLUE
APDM_DOCK_VENDOR_REQUEST_GET_IS_MONITOR_PRESENT_MONITOR_DOCKED_FLAG = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_IS_MONITOR_PRESENT_MONITOR_DOCKED_FLAG
APDM_DOCK_VENDOR_REQUEST_GET_IS_MONITOR_PRESENT_MONITOR_DATA_FORWARD_ENABLED = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_IS_MONITOR_PRESENT_MONITOR_DATA_FORWARD_ENABLED
APDM_DOCK_VENDOR_REQUEST_GET_CURRENT_POWER_SOURCE_CURRENT_POWER_TYPE = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_CURRENT_POWER_SOURCE_CURRENT_POWER_TYPE
APDM_DOCK_VENDOR_REQUEST_GET_CURRENT_POWER_SOURCE_CURRENT_USB_POWER_MILLIVOLTS = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_CURRENT_POWER_SOURCE_CURRENT_USB_POWER_MILLIVOLTS
APDM_DOCK_VENDOR_REQUEST_GET_CURRENT_POWER_SOURCE_CURRENT_EXT_POWER_MILLIVOLTS = _apdm.APDM_DOCK_VENDOR_REQUEST_GET_CURRENT_POWER_SOURCE_CURRENT_EXT_POWER_MILLIVOLTS
APDM_DOCK_VENDOR_REQUEST_SET_MONITOR_UART_MODE_CURRENT_BAUDRATE = _apdm.APDM_DOCK_VENDOR_REQUEST_SET_MONITOR_UART_MODE_CURRENT_BAUDRATE
APDM_DOCK_VENDOR_REQUEST_SET_MONITOR_UART_MODE_TARGET_BAUDRATE = _apdm.APDM_DOCK_VENDOR_REQUEST_SET_MONITOR_UART_MODE_TARGET_BAUDRATE
APDM_DOCK_VENDOR_REQUEST_SET_MONITOR_UART_MODE_BAUDRATE_CHANGE_STATUS_DONE = _apdm.APDM_DOCK_VENDOR_REQUEST_SET_MONITOR_UART_MODE_BAUDRATE_CHANGE_STATUS_DONE
PS_None = _apdm.PS_None
PS_USB_Power = _apdm.PS_USB_Power
PS_External_Power = _apdm.PS_External_Power
PS_USB_And_External_Power = _apdm.PS_USB_And_External_Power

def apdm_readline_dockingstation(*args):
  """apdm_readline_dockingstation(ds_handle, output_string_buffer, output_buffer_length, timeout_milliseconds) -> int"""
  return _apdm.apdm_readline_dockingstation(*args)

def apdm_dockingstation_send_data(*args):
  """apdm_dockingstation_send_data(ds_handle, data, length, timeout_ms) -> int"""
  return _apdm.apdm_dockingstation_send_data(*args)

def apdm_send_dockingstation_cmd(*args):
  """apdm_send_dockingstation_cmd(ds_handle, cmd_to_send, BYTE, output_buffer_length, num_lines_to_read, timeout_milliseconds) -> int"""
  return _apdm.apdm_send_dockingstation_cmd(*args)
APDM_DS_RESET_INTO_BOOTLOADER = _apdm.APDM_DS_RESET_INTO_BOOTLOADER
APDM_DS_RESET_INTO_FIRMWARE = _apdm.APDM_DS_RESET_INTO_FIRMWARE
APDM_DS_RESET_INTO_ACM_MODE = _apdm.APDM_DS_RESET_INTO_ACM_MODE
APDM_DS_RESET_INTO_ACM_OPAL = _apdm.APDM_DS_RESET_INTO_ACM_OPAL

def apdm_ds_get_debug_value(*args):
  """apdm_ds_get_debug_value(the_handle, value, dest) -> int"""
  return _apdm.apdm_ds_get_debug_value(*args)

def apdm_ds_reset_into_bootloader(*args):
  """apdm_ds_reset_into_bootloader(the_handle) -> int"""
  return _apdm.apdm_ds_reset_into_bootloader(*args)

def apdm_ds_reset_into_firmware(*args):
  """apdm_ds_reset_into_firmware(the_handle) -> int"""
  return _apdm.apdm_ds_reset_into_firmware(*args)

def apdm_ds_reset_into_acm(*args):
  """apdm_ds_reset_into_acm(the_handle) -> int"""
  return _apdm.apdm_ds_reset_into_acm(*args)

def apdm_ds_reset_into_acm_opal(*args):
  """apdm_ds_reset_into_acm_opal(the_handle) -> int"""
  return _apdm.apdm_ds_reset_into_acm_opal(*args)

def apdm_ds_get_mode(*args):
  """apdm_ds_get_mode(ds_handle) -> int"""
  return _apdm.apdm_ds_get_mode(*args)

def apdm_ds_get_version_string(*args):
  """apdm_ds_get_version_string(the_handle, dest, destLength) -> int"""
  return _apdm.apdm_ds_get_version_string(*args)

def apdm_ds_sensor_verify_supported_version(*args):
  """apdm_ds_sensor_verify_supported_version(handle) -> int"""
  return _apdm.apdm_ds_sensor_verify_supported_version(*args)

def apdm_ds_commit_info_changes(*args):
  """apdm_ds_commit_info_changes(handle) -> int"""
  return _apdm.apdm_ds_commit_info_changes(*args)

def apdm_ds_set_ds_info(*args):
  """apdm_ds_set_ds_info(handle, dock_id, hardware_version_number, case_id, cal_red, cal_green, cal_blue) -> int"""
  return _apdm.apdm_ds_set_ds_info(*args)

def apdm_ds_set_hardware_version_number(*args):
  """apdm_ds_set_hardware_version_number(handle, hardware_version_number) -> int"""
  return _apdm.apdm_ds_set_hardware_version_number(*args)

def apdm_ds_poke(*args):
  """apdm_ds_poke(ds_handle, address, new_value) -> int"""
  return _apdm.apdm_ds_poke(*args)

def apdm_ds_get_monitor_baud_rate(*args):
  """apdm_ds_get_monitor_baud_rate(ds_handle, dest) -> int"""
  return _apdm.apdm_ds_get_monitor_baud_rate(*args)

def apdm_ds_get_done_changing_monitor_baud_rate_flag(*args):
  """apdm_ds_get_done_changing_monitor_baud_rate_flag(ds_handle, dest) -> int"""
  return _apdm.apdm_ds_get_done_changing_monitor_baud_rate_flag(*args)

def apdm_v1_ds_sensor_verify_supported_version(*args):
  """apdm_v1_ds_sensor_verify_supported_version(handle) -> int"""
  return _apdm.apdm_v1_ds_sensor_verify_supported_version(*args)

def apdm_ds_get_monitor_tx_fifo_size(*args):
  """apdm_ds_get_monitor_tx_fifo_size(ds_handle, dest) -> int"""
  return _apdm.apdm_ds_get_monitor_tx_fifo_size(*args)

def apdm_ds_get_monitor_rx_fifo_size(*args):
  """apdm_ds_get_monitor_rx_fifo_size(ds_handle, dest) -> int"""
  return _apdm.apdm_ds_get_monitor_rx_fifo_size(*args)

def apdm_ds_get_command_tx_fifo_size(*args):
  """apdm_ds_get_command_tx_fifo_size(ds_handle, dest) -> int"""
  return _apdm.apdm_ds_get_command_tx_fifo_size(*args)

def apdm_ds_get_command_rx_fifo_size(*args):
  """apdm_ds_get_command_rx_fifo_size(ds_handle, dest) -> int"""
  return _apdm.apdm_ds_get_command_rx_fifo_size(*args)

def apdm_ap_estimate_now_sync_value_v2(*args):
  """apdm_ap_estimate_now_sync_value_v2(ap_handle) -> unsigned long long"""
  return _apdm.apdm_ap_estimate_now_sync_value_v2(*args)

def apdm_v2_write_calibration_data(*args):
  """apdm_v2_write_calibration_data(handle, src, calibratin_type) -> int"""
  return _apdm.apdm_v2_write_calibration_data(*args)

def apdm_v2_read_calibration_data(*args):
  """apdm_v2_read_calibration_data(handle, dest, user_cal_data_flag) -> int"""
  return _apdm.apdm_v2_read_calibration_data(*args)

def apdm_v2_ap_set_sync_box_output_while_streaming(*args):
  """apdm_v2_ap_set_sync_box_output_while_streaming(handle, on_flag) -> int"""
  return _apdm.apdm_v2_ap_set_sync_box_output_while_streaming(*args)

def apdm_v2_start_streaming(*args):
  """apdm_v2_start_streaming(handle) -> int"""
  return _apdm.apdm_v2_start_streaming(*args)

def apdm_v2_ap_set_minimum_sync_value_while_streaming(*args):
  """apdm_v2_ap_set_minimum_sync_value_while_streaming(handle, min_sync_value_us) -> int"""
  return _apdm.apdm_v2_ap_set_minimum_sync_value_while_streaming(*args)

def apdm_v2_ap_set_max_latency_while_streaming(*args):
  """apdm_v2_ap_set_max_latency_while_streaming(handle, max_latency_ms) -> int"""
  return _apdm.apdm_v2_ap_set_max_latency_while_streaming(*args)

def apdm_v2_stream_data_sample(*args):
  """apdm_v2_stream_data_sample(handle, dest_rec, dest_range_sample, allowAPTransferFlag, discovered_device_id_data2) -> int"""
  return _apdm.apdm_v2_stream_data_sample(*args)

def apdm_print_sample(*args):
  """apdm_print_sample(sample) -> int"""
  return _apdm.apdm_print_sample(*args)

def apdm_v2_stop_streaming(*args):
  """apdm_v2_stop_streaming(handle) -> int"""
  return _apdm.apdm_v2_stop_streaming(*args)

def apdm_v2_enter_bootloader(*args):
  """apdm_v2_enter_bootloader(handle) -> int"""
  return _apdm.apdm_v2_enter_bootloader(*args)

def apdm_v2_reset(*args):
  """apdm_v2_reset(handle) -> int"""
  return _apdm.apdm_v2_reset(*args)

def apdm_v2_disable_charge(*args):
  """apdm_v2_disable_charge(handle) -> int"""
  return _apdm.apdm_v2_disable_charge(*args)

def apdm_v2_enable_charge(*args):
  """apdm_v2_enable_charge(handle) -> int"""
  return _apdm.apdm_v2_enable_charge(*args)

def apdm_v2_halt(*args):
  """apdm_v2_halt(handle) -> int"""
  return _apdm.apdm_v2_halt(*args)

def apdm_v2_unhalt(*args):
  """apdm_v2_unhalt(handle) -> int"""
  return _apdm.apdm_v2_unhalt(*args)

def apdm_v2_standby(*args):
  """apdm_v2_standby(handle) -> int"""
  return _apdm.apdm_v2_standby(*args)

def apdm_sensor_reset_config(*args):
  """apdm_sensor_reset_config(h) -> int"""
  return _apdm.apdm_sensor_reset_config(*args)

def apdm_v2_reset_config(*args):
  """apdm_v2_reset_config(handle) -> int"""
  return _apdm.apdm_v2_reset_config(*args)

def apdm_v2_format_sd(*args):
  """apdm_v2_format_sd(handle) -> int"""
  return _apdm.apdm_v2_format_sd(*args)

def apdm_v2_delete_old_data_files(*args):
  """apdm_v2_delete_old_data_files(handle) -> int"""
  return _apdm.apdm_v2_delete_old_data_files(*args)

def apdm_v2_error_data_mode(*args):
  """apdm_v2_error_data_mode(handle, enable_flag) -> int"""
  return _apdm.apdm_v2_error_data_mode(*args)

def apdm_v2_clear_errors(*args):
  """apdm_v2_clear_errors(handle) -> int"""
  return _apdm.apdm_v2_clear_errors(*args)

def apdm_v2_set_time_now(*args):
  """apdm_v2_set_time_now(handle) -> int"""
  return _apdm.apdm_v2_set_time_now(*args)

def apdm_v2_set_time(*args):
  """apdm_v2_set_time(handle, year, month, day, hour, minute, second, millisecond) -> int"""
  return _apdm.apdm_v2_set_time(*args)

def apdm_v2_get_time(*args):
  """apdm_v2_get_time(handle, millisecond) -> int"""
  return _apdm.apdm_v2_get_time(*args)

def apdm_v2_get_time_epoch_second(*args):
  """apdm_v2_get_time_epoch_second(handle, dest) -> int"""
  return _apdm.apdm_v2_get_time_epoch_second(*args)

def apdm_v2_sync_protocol(*args):
  """apdm_v2_sync_protocol(handle) -> int"""
  return _apdm.apdm_v2_sync_protocol(*args)

def apdm_v2_check_structure_sum(*args):
  """apdm_v2_check_structure_sum(handle) -> int"""
  return _apdm.apdm_v2_check_structure_sum(*args)

def apdm_v2_monitor_handle_init(*args):
  """apdm_v2_monitor_handle_init(monitor_handle) -> int"""
  return _apdm.apdm_v2_monitor_handle_init(*args)

def apdm_v2_monitor_open(*args):
  """apdm_v2_monitor_open(monitor_handle, indexNumber) -> int"""
  return _apdm.apdm_v2_monitor_open(*args)

def apdm_v2_accesspoint_open(*args):
  """apdm_v2_accesspoint_open(monitor_handle, indexNumber) -> int"""
  return _apdm.apdm_v2_accesspoint_open(*args)

def apdm_v2_device_open(*args):
  """apdm_v2_device_open(monitor_handle, usb_pid, indexNumber) -> int"""
  return _apdm.apdm_v2_device_open(*args)

def apdm_v2_monitor_close(*args):
  """apdm_v2_monitor_close(monitor_handle) -> int"""
  return _apdm.apdm_v2_monitor_close(*args)

def apdm_v2_min_sync_set(*args):
  """apdm_v2_min_sync_set(handle, min_sync_value_us) -> int"""
  return _apdm.apdm_v2_min_sync_set(*args)

def apdm_v2_set_mesh_data_uint32(*args):
  """apdm_v2_set_mesh_data_uint32(ap_handle, setting, device_id, value) -> int"""
  return _apdm.apdm_v2_set_mesh_data_uint32(*args)

def apdm_v2_set_mesh_uint64_str(*args):
  """apdm_v2_set_mesh_uint64_str(handle, variable_name, device_id, value) -> int"""
  return _apdm.apdm_v2_set_mesh_uint64_str(*args)

def apdm_v2_set_mesh_int64_str(*args):
  """apdm_v2_set_mesh_int64_str(handle, variable_name, device_id, value) -> int"""
  return _apdm.apdm_v2_set_mesh_int64_str(*args)

def apdm_v2_set_mesh_str_str(*args):
  """apdm_v2_set_mesh_str_str(handle, variable_name, device_id, print_str) -> int"""
  return _apdm.apdm_v2_set_mesh_str_str(*args)

def apdm_v2_set_acm_mode(*args):
  """apdm_v2_set_acm_mode(handle, value) -> int"""
  return _apdm.apdm_v2_set_acm_mode(*args)

def apdm_v2_set_msd_mode(*args):
  """apdm_v2_set_msd_mode(handle, value) -> int"""
  return _apdm.apdm_v2_set_msd_mode(*args)

def apdm_v2_control_in_transfer(*args):
  """apdm_v2_control_in_transfer(handle, request) -> int"""
  return _apdm.apdm_v2_control_in_transfer(*args)

def apdm_v2_control_out_transfer(*args):
  """apdm_v2_control_out_transfer(handle, request, value, u64_value, index_ctrl) -> int"""
  return _apdm.apdm_v2_control_out_transfer(*args)

def apdm_v2_sync_box_attached(*args):
  """apdm_v2_sync_box_attached(handle, dest) -> int"""
  return _apdm.apdm_v2_sync_box_attached(*args)

def apdm_v2_sync_box_set(*args):
  """apdm_v2_sync_box_set(handle, cmd, new_value) -> int"""
  return _apdm.apdm_v2_sync_box_set(*args)

def apdm_v2_sync_box_query(*args):
  """apdm_v2_sync_box_query(handle, cmd, dest) -> int"""
  return _apdm.apdm_v2_sync_box_query(*args)

def apdm_v2_cmd_no_response_data2(*args):
  """apdm_v2_cmd_no_response_data2(handle, str, look_for_ok_response, do_flush) -> int"""
  return _apdm.apdm_v2_cmd_no_response_data2(*args)

def apdm_v2_get_int32_str(*args):
  """apdm_v2_get_int32_str(handle, variable_name) -> int"""
  return _apdm.apdm_v2_get_int32_str(*args)

def apdm_v2_get_int64_str(*args):
  """apdm_v2_get_int64_str(handle, variable_name, dest) -> int"""
  return _apdm.apdm_v2_get_int64_str(*args)

def apdm_v2_set_uint64_str(*args):
  """apdm_v2_set_uint64_str(handle, variable_name, value) -> int"""
  return _apdm.apdm_v2_set_uint64_str(*args)

def apdm_v2_get_uint32_str(*args):
  """apdm_v2_get_uint32_str(handle, variable_name, dest) -> int"""
  return _apdm.apdm_v2_get_uint32_str(*args)

def apdm_v2_set_uint32(*args):
  """apdm_v2_set_uint32(handle, setting, value) -> int"""
  return _apdm.apdm_v2_set_uint32(*args)

def apdm_v2_set_uint64(*args):
  """apdm_v2_set_uint64(handle, setting, value) -> int"""
  return _apdm.apdm_v2_set_uint64(*args)

def apdm_v2_get_uint32(*args):
  """apdm_v2_get_uint32(handle, setting, dest) -> int"""
  return _apdm.apdm_v2_get_uint32(*args)

def apdm_v2_get_uint64_str(*args):
  """apdm_v2_get_uint64_str(handle, variable_name) -> int"""
  return _apdm.apdm_v2_get_uint64_str(*args)

def apdm_v2_get_uint64(*args):
  """apdm_v2_get_uint64(handle, setting) -> int"""
  return _apdm.apdm_v2_get_uint64(*args)

def apdm_v2_set_string2(*args):
  """apdm_v2_set_string2(handle, variable_name, value) -> int"""
  return _apdm.apdm_v2_set_string2(*args)

def apdm_v2_get_string2(*args):
  """apdm_v2_get_string2(handle, variable_name, dest, dest_length) -> int"""
  return _apdm.apdm_v2_get_string2(*args)

def apdm_v2_get_string(*args):
  """apdm_v2_get_string(handle, setting, dest, dest_length) -> int"""
  return _apdm.apdm_v2_get_string(*args)

def apdm_v2_set_string(*args):
  """apdm_v2_set_string(handle, setting, value) -> int"""
  return _apdm.apdm_v2_set_string(*args)

def apdm_v2_send_string(*args):
  """apdm_v2_send_string(handle, str) -> int"""
  return _apdm.apdm_v2_send_string(*args)

def apdm_v2_set_label_string(*args):
  """apdm_v2_set_label_string(handle, label_string, value) -> int"""
  return _apdm.apdm_v2_set_label_string(*args)

def apdm_v2_set_label_int32(*args):
  """apdm_v2_set_label_int32(handle, label_string, value_int) -> int"""
  return _apdm.apdm_v2_set_label_int32(*args)

def apdm_v2_mesh_devices_cmd(*args):
  """apdm_v2_mesh_devices_cmd(handle, max_sensor_info_index, sensor_info_index_ptr, sensor_list) -> int"""
  return _apdm.apdm_v2_mesh_devices_cmd(*args)

def apdm_v2_mesh_data_ready(*args):
  """apdm_v2_mesh_data_ready(handle, dest) -> int"""
  return _apdm.apdm_v2_mesh_data_ready(*args)

def apdm_v2_sync_value(*args):
  """apdm_v2_sync_value(handle) -> int"""
  return _apdm.apdm_v2_sync_value(*args)

def apdm_v2_clear_mesh_data(*args):
  """apdm_v2_clear_mesh_data(handle) -> int"""
  return _apdm.apdm_v2_clear_mesh_data(*args)

def apdm_v2_apply_config(*args):
  """apdm_v2_apply_config(handle) -> int"""
  return _apdm.apdm_v2_apply_config(*args)

def apdm_v2_wireless_power_off(*args):
  """apdm_v2_wireless_power_off(handle) -> int"""
  return _apdm.apdm_v2_wireless_power_off(*args)

def apdm_v2_nrf_disable_fake_occlusion(*args):
  """apdm_v2_nrf_disable_fake_occlusion(handle) -> int"""
  return _apdm.apdm_v2_nrf_disable_fake_occlusion(*args)

def apdm_v2_nrf_enable_fake_occlusion(*args):
  """apdm_v2_nrf_enable_fake_occlusion(handle) -> int"""
  return _apdm.apdm_v2_nrf_enable_fake_occlusion(*args)

def apdm_v2_cmd_no_response_data(*args):
  """apdm_v2_cmd_no_response_data(handle, str, look_for_ok_response) -> int"""
  return _apdm.apdm_v2_cmd_no_response_data(*args)

def apdm_v2_state_status(*args):
  """apdm_v2_state_status(handle, state, dest) -> int"""
  return _apdm.apdm_v2_state_status(*args)

def apdm_v2_error_count(*args):
  """apdm_v2_error_count(handle, dest) -> int"""
  return _apdm.apdm_v2_error_count(*args)

def apdm_v2_error_stats_size(*args):
  """apdm_v2_error_stats_size(handle, dest) -> int"""
  return _apdm.apdm_v2_error_stats_size(*args)

def apdm_v2_state_stats_get(*args):
  """apdm_v2_state_stats_get(handle, monitor_state_id, dest) -> int"""
  return _apdm.apdm_v2_state_stats_get(*args)

def apdm_v2_event_stats_get(*args):
  """apdm_v2_event_stats_get(handle, monitor_events_id, dest) -> int"""
  return _apdm.apdm_v2_event_stats_get(*args)

def apdm_v2_error_name(*args):
  """apdm_v2_error_name(handle, idx, dest, dest_length) -> int"""
  return _apdm.apdm_v2_error_name(*args)

def apdm_v2_flush(*args):
  """apdm_v2_flush(handle) -> int"""
  return _apdm.apdm_v2_flush(*args)

def apdm_v2_flush2(*args):
  """apdm_v2_flush2(handle, hard_limit_ms) -> int"""
  return _apdm.apdm_v2_flush2(*args)
# This file is compatible with both classic and new-style classes.


